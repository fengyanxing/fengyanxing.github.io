<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springcloud实验</title>
      <link href="/2020/05/15/springcloud-wei-fu-wu/"/>
      <url>/2020/05/15/springcloud-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>SpringCloud微服务入门</p><p>注：个人的学习是通过视频的讲解、阅读相关数据、进行实践、记录笔记进行的，希望与君共勉。个人的实验环境是Windows7，64位，内存16G，建议16G否则效果很差。</p><p>下面是我启动三个注册中心，一个路由网关一个服务器端进行测试，使用内存启动后占11~12G</p><p><img src="F:%5C%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%5Cblogimages%5Cspringcloud0515%5Ccpu.png" alt="启动后内存"></p><p>前提条件：在进行接下来的实现希望读者知道java的一些知识、mybatis、spring、springboot、mysql、json、maven等相关的知识。</p><p>如果读者没有学过maven，可以花几分钟读简单看一看maven创建项目的一篇博客：</p><p><a href="https://fengyanxing.github.io/2020/05/14/maven-gong-ju/" target="_blank" rel="noopener">maven学习</a></p><p>如果有什么需要的maven的依赖可以进行搜索</p><p><a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven中央库</a></p><p>springCloud官方网站，有各种的组件：</p><p><a href="https://www.springcloud.cc/" target="_blank" rel="noopener">Spring Cloud</a></p><p>SpringCloud配置中文网址</p><p><a href="https://www.springcloud.cc/spring-cloud-config.html" target="_blank" rel="noopener">Spring Cloud Config</a></p><p><strong>注：</strong>SpringCloud 是一种生态，用来解决为服务中的一些问题</p><p>实现之前必须确定自己的SpringBoot与自己的SpringCloud版本号是否对应，如果不对应就会有各种错误。</p><p><a href="https://www.cnblogs.com/zhuwenjoyce/p/10261079.html" target="_blank" rel="noopener">可以参考网上的分析</a></p><h5 id="微服务中的主要问题"><a href="#微服务中的主要问题" class="headerlink" title="微服务中的主要问题"></a>微服务中的主要问题</h5><blockquote><p>1.微服务较多，客户端如何访问？</p><p>2.服务器端之间的交互方式？</p><p>3.服务雪崩，服务器挂掉怎么办？</p><p>4.服务多是如何管理的？</p></blockquote><p>我们带着问题去进行学习，最后我们对于技术有一个宏观的把控</p><p>基本概念：API网关、HTTP/RPC、注册与发现、熔断机制（问题产生的根本原因：网络不可靠）</p><p><strong>下面是一些常见的面试中的问题：</strong></p><p>微服务之间如何通讯？</p><p>1.SpringCloud和Dubbo的区别？</p><blockquote><p>Doubbo只是为了实现服务治理，而Spring Cloud是一种生态，是微服务的一种架构，实现了微服务的方方面面，服务治理知识其中一部分</p></blockquote><table><thead><tr><th>微服务核心</th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper、Redis</td><td>SpringCloud   Netflix   Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloudconfig</td></tr><tr><td>分布式追踪系统</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p>2.SpringBoot和Spring Cloud的理解</p><p>Spring是一个快速的开发框架，可以通过maven依赖的继承方式，快速整合第三方的常用框架，完全采用注解化，简化xml配置。</p><p>SpringCloud是一整套的微服务框架，是一种生态，是一系列框架的集合。springCloud依赖springboot</p><p>3.什么是服务熔断？什么是服务降级？(正文中有答案)</p><p>4.微服务的优缺点是什么？</p><p>可以参考网上的教程：</p><p><a href="https://www.cnblogs.com/kongsq/p/9886676.html" target="_blank" rel="noopener">微服务的优缺点</a></p><p>优点：</p><blockquote><p>1.每个服务都比较简单，只关注一个业务功能</p><p>2.微服务架构方式是松耦合的，可以提供更高的灵活性</p><p>3.微服务可以通过最佳及最合适的不同的编程语言与工具进行开发</p><p>4.每个微服务可由不同的团队独立开发，互不影响，加快推出市场的速度</p><p>5.微服务架构是持续交付的巨大推动力，允许在频繁发布不同服务同时保持系统其它部分的可用性和稳定性</p></blockquote><p>缺点：</p><blockquote><p>1.运维的开销以及成本的增加</p><p>2.需要有一定的开发运维一体化技术</p><p>3.隐式的接口及接口匹配问题</p><p>4.代码重复问题</p><p>5.分布式系统的复杂性</p><p>6.一部机制</p></blockquote><p>5.你知道的微服务技术栈有哪些？</p><table><thead><tr><th>微服务开发条目</th><th>实现的技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMvc</td></tr><tr><td>服务配置与管理</td><td>Netflix公司的Arcaius、阿里的Diamond</td></tr><tr><td>服务注册与发现</td><td>Eureka、consul、Zookeeper</td></tr><tr><td>服务调用</td><td>Rest、RPC、gRpc</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx</td></tr><tr><td>服务接口调用</td><td>Fegin</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMq</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、chef</td></tr><tr><td>服务路由</td><td>Zuul</td></tr><tr><td>服务监控</td><td>Zabbix、Nagious、Metrics、Specataor</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper</td></tr><tr><td>服务部署</td><td>Docker、Openstack、Kubernetes</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream（封装Redis、Rabbit、Kafka）</td></tr><tr><td>事件消息总线</td><td>SpringCloud BUS</td></tr></tbody></table><p>6.eureka和zookeeper都可以提供服务注册与发现的功能，区别是什么？</p><blockquote><p>CAP理论支出，一个分布式系统不可能同时满足C(一致性)、A(可用性)、P(容错性)，分区容错性P在分布式系统中是必须保证的，因此我们只能在A和C之间权衡。</p><p>eureka保证AP原则；zookeeper保证CP</p><p>zookeeper可以容忍注册中心返回几分钟以前的注册信息，但不能接受服务直接挂掉，主服务器挂掉后其他的节点进行选举产生一个新的领导者，选举时间中服务不可用，服务瘫痪，导致长期服务不可以注册</p><p>Eureka首先保证了可用性，Eureka的各个节点是平等的，几个节点挂掉不会影响正常的节点工作，剩余的节点依旧可以提供注册和查询，只要注册中心有一台服务器可以使用，就可以保证注册中心的可用。</p><p>Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，不会像zookeeper那样使得整个注册服务瘫痪</p></blockquote><p>微服务中一般分为<strong>三大角色：</strong></p><p>服务注册中心：用于提供服务的注册与发现</p><p>服务提供者：将自身的服务注册到服务中心</p><p>服务的消费者：从服务注册中心获取服务</p><p><strong>Eureka服务注册与发现（相当于Zookeeper）</strong></p><p>Eureka是一个Netflix的一个子模块,也是核心模块之一。Eureka是一个基于REST</p><p>的服务，用于定位服务，以实现云端中间层服务发现和故障转移，服务注册与发现对于微服务是相当重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务器调用的配置文件了，功能类似于Dubbo的注册中心。</p><p><strong>原理讲解：</strong></p><p>Eureka的基本架构：</p><blockquote><p>SpringCloud封装了NetFlix公司开发的Eureka模块来实现服务注册和发现</p><p>Eureka采用CS架构设计，EurekaServer作为服务注册功能的服务器，用来服务使得注册</p><p>Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统维护人员就可以通过EurekaServer来监控系统各个微服务是否正常运行，SpringCloud的一些其他模块就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑</p></blockquote><p><strong>自我保护机制：</strong></p><p>某一时刻一个微服务不能够使用时，eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>默认情况下，Eureka在一定的时间内没有接收到某个服务实例的心跳，EurekaServer将会注销该实例，但是当网络分区故障发生时，微服务与Eureka之间无法进行正常通信，以上行为将会非常危险，因为微服务本身是健康的，此时本不应该注销这个服务。Eureka的自我保护机制来解决这个问题，当EurekaServer节点在短时间内丢失过多的客户端时，那么这个节点就会进入自我保护模式，一旦进入自我保护模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据。当网络故障恢复后，该EurekaServer节点会自动退出自我保存模式。自我保护模式是一种应用网络异常的安全保护措施，宁可同时保留所有的服务，也不盲目注销任何健康的微服务。</p><p>可以手动设置取消自我保护模式：eureka.server.enable-self-preservation = false禁止自我保护模式。</p><p>CAP原则：</p><p>RDBMS(mysql、oracle、sqlserver)——-ACID</p><p>NoSql(redis、Mongdb)—–CAP</p><p>ACID：</p><blockquote><p>原子性：Atomicity    一致性：Consistency</p><p>隔离性：Isolation     持久性：Durability</p></blockquote><p>CAP：</p><blockquote><p>强一致性：Consitency    可用性：Availability      分区容错性：Partition toleration</p></blockquote><p><strong>CAP三者只能满足两个。</strong></p><p>CAP核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性。</p><p>一般都是两个满足，</p><p>CA：单点集群，满足一致性，可用性的系统，通常可扩展性比较差</p><p>CP：满足一致性，分区容错性的系统，通常性能不是特别高</p><p>AP：满足可用性，分区容错性系统，通常可能对一致性要求低一些</p><p><strong>Eureka实现的是AP原则、Zookeeper实现遵循的是CP</strong></p><p><strong>Ribbon：</strong></p><p>ribbon是什么？</p><blockquote><p>SpringCloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong></p><p>主要功能是提供客户端的软件负载均衡算法，将NetFlix的中间层服务连接在一起，Ribbon的客户端组件提供一系列完整的配置：连接超时、重试等。就是在配置文件中列出负载均衡LoadBalancer后的所有机器，Ribbon会基于某种规则去连接这些机器。</p></blockquote><p>常见的负载均衡算法：(不是值Ribbon中的负载均衡算法，与之相关)</p><blockquote><p>1.轮询均衡（Round Robin）:每次来自网络的请求轮流分配给内部服务器，从1到N然后重新开始，这种均衡算法适合服务组中的所有服务器都有相同的硬件配置并且平均服务请求相对均衡的情况</p><p>2.权重轮询均衡(Weighted Round Robin)：根据服务器不同的处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请求。简单来说就是使得每个服务器有不同的使用率，高性能使用率更高</p><p>3.随机均衡(Random)：将请求随机分配给内部的服务器</p><p>4.权重随机均衡(Weight Random):此种均衡算法类似于权重轮循算法，不过在处理请求分担时是个随机选择的过程。  </p><p>5.响应速度均衡(Response  Time探测时间)：负载均衡设备对内部各服务器发出一个探测请求（例如 Ping），然后根据内部中各服务器对探测请求的最快响应时间来决定哪一台服务器来响应客户端的服务请求。  </p><p>6.最少连接数均衡(Last Connection):最少连接数均衡算法对内部中需负载的每一台服务器都有一个数据记录，记录当前该服务器正在处理的连接数量，当有新的服务连接请求时，将把当前请求分配给连接数最少的服务器，使均衡更加符合实际情况，负载更加均衡。此种均衡算法适合长时处理的请求服务，如 FTP。  </p><p>7.处理器能力均衡(cpu、内存)：把服务请求分配给内部中处理负荷（根据服务器 CPU 型号、 CPU 数量、内存大小及当前连接数等换算而成）最轻的服务器  </p><p>8.DNS响应均衡(Flash DNS)：把此域名解析成各自相对应服务器的 IP 地址并返回给客户端， 则客户端将以最先收到的域名解析 IP 地址来继续请求服务，而忽略其它的 IP 地址响应  </p><p>9.哈希算法：一致性 Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。  </p><p>10.IP地址散列：管理发送方 IP 和目的地 IP 地址的散列，将来自同一发送方的分组(或发送至同一目的地的分<br>组)统一转发到相同服务器的算法。  保证来自相同客户端的通信能够一直在同一服务器中进行处理。  </p><p>11.URL散列：通过管理客户端请求 URL 信息的散列，将发送至相同 URL 的请求转发至同一服务器的算法  </p></blockquote><p>客户端配置Ribbon：导入依赖，添加配置，添加注解@LoadBalance</p><p><strong>Feign负载均衡：</strong>是声明式的webService客户端，它让微服务之间的调用变得简单，类似于controller调用service，springCloud集成了Ribbon和Eureka，可以使用Feign时提供负载均衡的http客户端，需要创建一个接口并添加注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用Feign需要写一个接口，对其接口进行注解配置</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>feign是通过接口和注解的方式，ribbon是通过微服务的名称来进行负载均衡，Ribbon+RestTemplate是利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法，实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口或被多处调用，因此通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务调用。Feign在此基础上进行了进一步的封装，使用它定义和实现依赖服务接口的定义，在Feign实现下，我们只需要创建一个接口并使用注解的方式配置它，简化了SpringCLoudRibbon，自行封装服务调用客户端的并发量。</p><p>常用的负载均衡的软件有Nginx、LVS</p><p>服务雪崩：多个服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，引起系统崩溃，即所谓的雪崩效应。</p><p><strong>Hystrix服务熔断：</strong> 服务降级、服务熔断、服务限流、接近实时监控</p><p>Hystrix是一个处于分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等。Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，向调用方式返回一个服务预期的、可处理的备选响应，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证服务调用方线程不会被长时间不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p><img src="F:%5C%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%5Cblogimages%5Cspringcloud0515%5Chystrix.png" alt="熔断器"></p><blockquote><p>当 Hystrix Command 请求后端服务失败数量超过一定比例(默认 50%), 断路器会<br>切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态<br>一段时间后(默认 5 秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况,<br>如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix 的断路器<br>就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效<br>请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力  </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//服务端程序，服务端在服务有网络延时或者异常因此的服务熔断进行备选处理</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"hystrixGet"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>       Dept dept <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dept <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",不存在用户，或者信息无法找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> dept<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//备选方法</span>   <span class="token keyword">public</span> Dept <span class="token function">hystrixGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>  Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDeptname</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"没有对应的信息，null"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"没有对应的数据库信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hystrix是服务器端的处理：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author itxing * @create 2020/5/16-spring_cloud */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment" spellcheck="true">//配置Eureka客户端，自动将服务配置到注册中心</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token comment" spellcheck="true">//服务发现</span><span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment" spellcheck="true">//注解断路器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProviderHytris</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProviderHytris<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hystrix-dashboard:监控页，使用时需要确认服务端的信息是否有actuator监控信息</p><p><strong>服务降级：</strong>是在客户端进行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在接口处添加服务降级处理的实现类信息</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER"</span><span class="token punctuation">,</span>fallbackFactory <span class="token operator">=</span> DeptClientServiceFallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>服务降级实现类如下,服务降级是由客户端访问过高引起部分服务进行暂停用来处理高并发的服务，因此使用Feign尽心相关的配置：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author itxing * @create 2020/5/16-spring_cloud * * 服务降级 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptClientServiceFallbackFactory</span>  <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeptClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDeptname</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">" 没有对应的信息，客户端使用降级，服务暂时停止"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"数据源暂时关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端的yaml的配置：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8002eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka8003.com:8003/eureka/,http://eureka8004.com:8004/eureka/,http://eureka8005.com:8005/eureka/feign:  hystrix:    enabled: true</code></pre><p>API网关：</p><p>API Gateway是一个服务器，也可以说是进入系统的唯一节点。与设计模式中的Facade模式相似，APIGateWay封装内部系统的架构，并且提供API给各个客户端，还有其他的功能，例如：授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理。API网关负责请求转发、合成和协议转换，通过调用多个微服务来处理一个请求以及聚合多个服务的结果。<strong>请求转发、响应合并、协议转换、数据转换、安全认证。</strong></p><p><img src="F:%5C%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%5Cblogimages%5Cspringcloud0515%5CapiGateway.png" alt="API网关"></p><p><strong>Zuul路由网关：</strong> 功能是路由+过滤</p><p>Zuul路由包含了请求的路由和过滤两个最主要的功能。路由功能是将一些具体的请求转发到具体的微服务实例上，是实现外部访问同一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他服务消息。</p><p>application.yml与bootstrap.yml区别是：前者是用户级别的配置，后者是系统级别的配置</p><p>SpringBoot启动类上需要加入注解：<strong>@EnableZuulProxy</strong></p><p>路由网关的yaml配置:</p><pre class=" language-yml"><code class="language-yml">server:  port: 9527spring:  application:    name: springcloud-zuuleureka:  client:    service-url:      defaultZone: http://eureka8003.com:8003/eureka/,http://eureka8004.com:8004/eureka/,http://eureka8005.com:8005/eureka/  instance:    instance-id: zuul9527.com    prefer-ip-address: trueinfo:  app.name: itxing-springcloud  company.name: itxing.comzuul:  routes:    mydept.serviceId: spring-provider-dept    mydept.path: /mydept/**  ignored-services: "*"#springcloud-provider-dept  prefix: /itxing</code></pre>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习</title>
      <link href="/2020/05/14/spring-xue-xi/"/>
      <url>/2020/05/14/spring-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>1.spring出现之前：</p><p>循环依赖：指的是多个Bean之间的相互调用，A对象创建时，需要构造B对象，构造B对象时需要构建C对象，构建C对象时又依赖A对象</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven工具</title>
      <link href="/2020/05/14/maven-gong-ju/"/>
      <url>/2020/05/14/maven-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>Maven工具  </p><p>前提是已经在自己本地有一个maven仓库，个人使用的是3.3.9版本的maven。</p><p>准备构建一个maven项目来进行spring的复习，发现之前学习的maven搭建项目的步骤突然忘记了，最近一直在做一些算法的题目和论文的知识，有点疏忽工具的使用了，用此来记录maven工具并创建maven项目做简单的复习。</p><p>maven是apache下面的一个开源项目，只用来管理java项目以及项目依赖的jar包。</p><p>好处：maven将jar包放在本地的仓库，通过坐标(公司-项目-版本号)进行获取，对jar包依赖管理</p><p>仓库分为本地仓库共个人使用，公司的仓库一般为远程仓库又称私服，网络中的仓库为中央仓库。</p><p>maven的标准目录结构：</p><blockquote><p>src/main/java   核心代码部分</p><p>src/main/resources  配置文件</p><p>src/test/java  测试文件</p><p>src/test/resources  测试配置文件</p><p>如果是web项目：</p><p>src/main/webapp  web相关的文件，静态资源等</p></blockquote><p>maven的命令：</p><blockquote><p>mvn clean  将编译的项目进行清理，每个人的环境都是不同的因此对项目在本地需要clean</p><p>mvn  compile  将项目编译</p><p>mvn test   测试项目</p><p>mvn package  项目打包</p><p>mvn install  项目发布到本地仓库</p><p>mvn deploy  发布</p><p>mvn tomcat:run  启动tomcat</p></blockquote><p>maven的声明周期：三种声明周期（clean周期、default周期、site周期）</p><p><strong>默认的周期</strong>为（compile、test、package、install、deploy），可以一键构建</p><p>maven的依赖包含的信息有：公司组织名称、项目名、版本号</p><p>idea配置maven：</p><p>点击configure选择settings</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/idea01.png" alt="image-20200514174706024"></p><p>左上角搜索框中填入maven，设置自己的maven位置与xml</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image02.png" alt="image-20200514175156031"></p><p>为了防止在不能上网的情况下maven项目有问题，配置一个参数：</p><blockquote><p>-DarchetypeCatalog=internal</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image03.png" alt="image-20200514175543835"></p><p>创建一个maven的java工程：idea提供许多的maven骨架，选择java的骨架点击next</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image04.png" alt="image-20200514175800914"></p><p>填写项目的坐标信息、并且配置路径：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image05.png" alt="image-20200514180043974"></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image06.png" alt="image-20200514180208078"></p><p>创建项目成功并运行测试：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image07.png" alt="image-20200514180734962"></p><p>当前的文件目录结构缺少资源目录结构，自定义一个文件夹并且设置为资源文件夹，选中文件夹右键进行设置。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image08.png" alt="image-20200514181020322"></p><p>如果不适用骨架创建出来的maven只是在test路径下没有resources文件夹，并且没有默认的测试类文件，但是在main目录下有resources文件夹。推荐在创建maven的时候不要使用上面的选择骨架创建。</p><p>不适用骨架创建的maven项目：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image09.png" alt="image-20200514181748329"></p><p>使用maven创建一个web项目：<strong>需要使用骨架</strong></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image10.png" alt="image-20200514181932854"></p><p>其余操作与上面类似，web的目录结构是：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image11.png" alt="image-20200514182132452"></p><p>web项目需要有tomcat服务器，配置如果有如下问题：</p><blockquote><p>No artifacts marked for deployment</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat01.png" alt="image-20200514183015819"></p><p>参考：<a href="https://www.cnblogs.com/lbrs/p/11620694.html" target="_blank" rel="noopener">以上问题解决方案</a></p><p>问题二：创建Servlet时没有Servlet选项：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat02.png" alt="image-20200514184027669"></p><p>一次点击并选中：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat03.png" alt="image-20200514184146448"></p><p>最后就可以创建Servlet了。</p><p>创建Servlet出现的问题：在创建好Servlet后由于没有jar的包汇报错误，需要在pom.xml中引入依赖：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--这是单元测试的包，需要配置其坐标以及scope作用范围，只在test的时候生效--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--这是servlet的包，用于创建servlet是java中文件引入jar包，但是需要设置scope为provided，只在编译的时候使用，因为maven中有tomcat的相关jar包，如果不配置则会产生冲突，jsp的包也是相同的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>配置自定的的插件模板：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat04.png" alt="image-20200514191029786"></p><p>在搜索框中填入live，先创建一个自己的组，customer</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat05.png" alt="image-20200514191128705"></p><p>配置模板，并配置模板名称，模板内容以及设置其在xml中使用</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat06.png" alt="image-20200514191349570"></p><p>maven的pom文件中依赖的作用范围：scope的值</p><table><thead><tr><th>依赖的范围</th><th>对于编译classpath有效</th><th>对于测试classpath有效</th><th>对于运行时classpath有效</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>spring-core</td></tr><tr><td>test</td><td>—-</td><td>Y</td><td>—-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>—-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>—–</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>—-</td><td>本地的，maven仓库之外的类库</td></tr></tbody></table><p>maven使用mysql数据库简单记录</p><p>pom的文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据库驱动的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>项目目录结构如下：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat07.png" alt="image-20200514221749031"></p><p>测试以及测试结果：</p><p>创建数据层接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建实现类：采用的传统的数据库格式连接，代码有冗余，在于基础。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>ItemDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ItemDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接数据库的四个要素</span>        <span class="token comment" spellcheck="true">//1.数据库驱动</span>        <span class="token comment" spellcheck="true">//2.连接对象</span>        <span class="token comment" spellcheck="true">//3.执行对象</span>        <span class="token comment" spellcheck="true">//4.结果集</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pst <span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet resultSet<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加载驱动类</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//先获取Connection对象</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///test"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取真正操作数据的对象</span>            pst <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将结果集转换成java的List集合</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pst<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection conn <span class="token operator">=</span>null<span class="token punctuation">;</span>        PreparedStatement pstm <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//编写sql语句</span>            String sql<span class="token operator">=</span><span class="token string">"insert into user(u_name,u_id,u_sex) values(?,?,?)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取预处理对象</span>             pstm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql语句</span>            <span class="token keyword">int</span> line <span class="token operator">=</span> pstm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新添加有"</span><span class="token operator">+</span>line<span class="token operator">+</span><span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放资源</span>            pstm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ItemDaoImpl itemDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> all <span class="token operator">=</span> itemDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Item item<span class="token operator">:</span>all<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is a pretty "</span><span class="token operator">+</span>item<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" hero "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ItemDaoImpl itemDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hhhaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>end: maven学习主要还是要多多使用。</p>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx笔记</title>
      <link href="/2020/05/04/nginx-bi-ji/"/>
      <url>/2020/05/04/nginx-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>title:  nginx笔记<br>date: 2020-05-04 20:30<br>tags: web服务器<br>categories: java深入学习</p><h5 id="nginx是什么？能做什么？"><a href="#nginx是什么？能做什么？" class="headerlink" title="nginx是什么？能做什么？"></a>nginx是什么？能做什么？</h5><p>  nginx是一个高性能的Http和反向代理web服务器，占用内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p><p>  专为性能优化而开发，性能是其最重要的考量，实现上注重效率，能经受高负载的考验，报告中支出其能支持高达50000个并发连接数。</p><h5 id="nginx的反向代理"><a href="#nginx的反向代理" class="headerlink" title="nginx的反向代理"></a>nginx的反向代理</h5><p>  正向代理：如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问internet，则需要通过代理服务器进行访问，这种代理称为正向代理。（需要客户端配置，输入的是目标地址）</p><p>  反向代理：客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送反向代理服务器，通过反向代理选择目标服务器获取数据后，返回客户端，向外暴露的是代理服务器地址，隐藏了真实服务器 IP地址。（客户端不需配置，访问反向代理服务器即可）</p><h5 id="nginx的负载均衡"><a href="#nginx的负载均衡" class="headerlink" title="nginx的负载均衡"></a>nginx的负载均衡</h5><p>服务器进行集群，单个服务器解决不了的问题，通过增加服务器数量，然后将请求分发到各个服务器上，将最原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，称之为负载均衡。</p><h5 id="nginx动静分离"><a href="#nginx动静分离" class="headerlink" title="nginx动静分离"></a>nginx动静分离</h5><p>为了加快网站的解析速度，可以把静态资源和动态资源分开放置，有不同的服务器来进行解析，加快解析速度，降低原来单个服务器的压力。</p><h5 id="nginx的linux安装"><a href="#nginx的linux安装" class="headerlink" title="nginx的linux安装"></a>nginx的linux安装</h5><p>nginx安装需要的依赖（根据个人的需要进行下载相关的依赖）：</p><p>pcre-8.37.tar.gz、openssl-1.0.1t.tar.gz、</p><p>zlib-1.2.8.tar.gz、nginx-1.11.1.tar.gz</p><p>使用linux命令在有网的情况下安装</p><p>1.安装pcre依赖</p><blockquote><p>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.32/pcre-8.37.tsr.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.32/pcre-8.37.tsr.gz</a></p><p>解压文件：tar - xvf  pcre.tar.gz</p><p>在解压的文件夹中 cd pcre</p><p>执行检查配置文件：./configure</p><p>编译并安装：make  &amp;&amp;make install</p><p>使用命令查看版本号：pcre-config  –version</p></blockquote><p>2.安装openssl和安装zlib</p><blockquote><p>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</p></blockquote><p>注：</p><blockquote><p>一键命令安装四个依赖</p><p>yum -y install gcc  zlib  zlib-devel  pcre-devel  openssl  openssl-devel</p></blockquote><p>3.安装nginx</p><blockquote><p>1.将安装包传输到linux服务器</p><p>2.解压文件： tar - xvf  nginx.tar,gz</p><p>3.检查相关的配置：cd  nginx后执行./configure</p><p>4.编译并安装：make &amp;&amp; make install</p><p>安装成功后在usr/local/中有一个nginx的目录，启动nginx命令在sbin中</p><p>启动nginx命令：./nginx</p><p>查看启动的端口：ps -ef  |  grep  nginx</p></blockquote><p>启动时遇到错误：</p><blockquote><p> error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p></blockquote><p>安装的pcre依赖需要建立连接</p><pre class=" language-shell"><code class="language-shell">##查找出错的文件位置find / -type f -name *libpcre.so.*##进行软连接ln -s /lib64/libpcre.so.0.0.1 /lib64/libpcre.so.1##启动nginx，在usr/local/nginx/sbin中执行./nginx##验证是否启动成功ps -ef | grep nginx##centos6查看防火墙service iptables status##开启防火墙service iptables start##关闭防火墙service iptables stop##开机不启动防火墙chkconfig iptables off##开机启动防火墙chkconfig iptables on##查看端口状态/etc/init.d/iptables status##重启防火墙service iptables restart##开放指定的端口，修改/etc/sysconfig/iptables文件,重启防火墙-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT##centos7查看防火墙firewall-cmd --list-all##查看防火墙状态firewall-cmd --state##开启防火墙systemctl stop firewalld.service##开机不启动防火墙systemctl disable firewalld.service##开机启动防火墙systemctl enable firewalld.service##设置开放端口号firewall-cmd --add-service = http -permanentsudo firewall-cmd --cmd --add-port=80/tcp --permanent##重启防火墙firewall-cmd -reload</code></pre><h5 id="nginx常用命令-在-usr-local-nginx-sbin-下使用"><a href="#nginx常用命令-在-usr-local-nginx-sbin-下使用" class="headerlink" title="nginx常用命令(在/usr/local/nginx/sbin/下使用)"></a>nginx常用命令(在/usr/local/nginx/sbin/下使用)</h5><p>1.查看nginx版本号</p><blockquote><p>./nginx -v</p></blockquote><p>2.关闭nginx</p><blockquote><p>./nginx  -s  stop</p></blockquote><p>3.启动nginx </p><blockquote><p>./nginx</p></blockquote><p>4.重加载(更改配置文件后，不需要重启nginx)</p><blockquote><p>./nginx -s reload</p></blockquote><h5 id="nginx配置-配置文件的位置-usr-local-nginx-conf"><a href="#nginx配置-配置文件的位置-usr-local-nginx-conf" class="headerlink" title="nginx配置(配置文件的位置/usr/local/nginx/conf/)"></a>nginx配置(配置文件的位置/usr/local/nginx/conf/)</h5><p>配置文件的组成(主要分为三部分)：</p><p>1.全局块：可以支持并发的数量，值越大可以支持的并发量越多</p><p>work    processes    1;</p><p>2.events块：涉及nginx服务器与用户的网络连接</p><p>例如：worker   processes   1024</p><p>3.http块：配置最频繁的部分，http包含http全局块和server块</p><p>server与虚拟主机相关，包括监听的端口号，主机名称，本地路径</p><h5 id="反向代理实例"><a href="#反向代理实例" class="headerlink" title="反向代理实例"></a>反向代理实例</h5><p>访问nginx时，跳转到tomcat的服务器中。</p><p>1.linux需要有tomcat，并且tomcat依赖jdk因此需要安装jdk</p><p>2.启动tomcat，进入tomcat的安装的路径下的bin文件夹下</p><pre class=" language-shell"><code class="language-shell">##启动tomcat./startup.sh##查看启动情况，在tomcat的路径在，有logs目录cd logs/##查看日志tail -f catalina.out##在防火墙总添加8080端口(vim /etc/sysconfig/iptables)-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></pre><p>3.用户访问80端口，利用反向代理转发到8080端口的web服务器中</p><p>1.用户本地host配置域名：</p><blockquote><p>C:\Windows\System32\drivers\etc\的路径下有一个hosts文件，添加域名和用户名的映射</p><p>192.168.159.132  www .xing123.com</p></blockquote><p>2.在nginx的配置文件中</p><p>修改server_name为自己的服务器地址</p><p>在licalation块中添加：proxy_pass  http:  localhost:8080;表示访问本地的web服务器位置</p><p>3.不同的路径访问不同的tomcat服务器</p><blockquote><p>安装不同的tomcat并设置配置文件中的端口：8001、8002、8003等</p><p>设置nginx的server监听以及location中的转发位置，具体如下图：</p></blockquote><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="image-20200504105942408"></p><p>将监听的nginx端口号以及tomcat的端口号在linux的防火墙中配置</p><blockquote><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8081 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 9001 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT</p></blockquote><p>重新启动防火墙以及nginx</p><p>测试：</p><p>访问路径为：192.168.159.132:9001/edu/a.html，该路径映射到端口为8080的tomcat</p><p>访问路径为：192.168.159.132:9001/vod/b.html，该路径映射到端口为8081的tomcat</p><p>配置location路径是使用的通配符：</p><blockquote><p>=：用于不含正则表达式的uri前，要求请求的字符串严格匹配</p><p>~:表示uri包含正则表达式，并且区分大小写</p><p>~*:表示uri包含正则表达式，并且不区分大小写</p><p>^~:用于不含正则表达式的uri前</p></blockquote><h5 id="负载均衡实例"><a href="#负载均衡实例" class="headerlink" title="负载均衡实例"></a>负载均衡实例</h5><p>对于同一请求分别均衡的分发到8080和8081的服务器中</p><p>1.准备两台服务器，8080和8081，并准备相同的资源及路径edu/a.html</p><p>2.负载均衡配置</p><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE.png" alt="image-20200504112024745"></p><p>3.测试路径：http: 192.168.159.132/edu/a.html</p><p>对于同一地址分别在浏览器上显示不同的服务器地址</p><p>4.nginx分配服务器的策略：</p><p>第一种，默认策略为轮询策略；第二种，根据权重分配策略</p><p>第三种，ip地址hash；第四种，fair方式，按后台响应时间来分配请求</p><h5 id="动静分离实例"><a href="#动静分离实例" class="headerlink" title="动静分离实例"></a>动静分离实例</h5><p>将动态请求与静态请求分离开来，可以有两种分离方式</p><p>一种是将静态文件独立成单独的域名，放在独立的服务器上；另一种办法是动态跟静态文件混合在一起发布，通过nginx来分开。</p><p>通过location指定不同的后缀名实现不同的请求转发，通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体的Expires定义：是一个资源设定过期时间，也就是无需去服务器端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量，此方法不适合经常变动的资源。例如设置为3d表示3天之内访问这个URL，发送一个请求，对比服务器改文件最后更新时间没有变化，则不会从服务器抓取，返回状态吗304，如果有更新，则直接从服务器重新下载，返回200。</p><p>案例准备：先建立一些静态资源,在根路径在建立data文件夹并建立两个子文件夹image以及www，在两个文件夹中放置静态的资源。</p><p>在nginx的配置文件中进行配置(/usr/local/nginx/conf/nginx.conf)</p><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="image-20200504145326327"></p><p>在浏览器中测试，http: //192.168.159.132/image/dncs.jpg</p><h5 id="nginx高可用集群"><a href="#nginx高可用集群" class="headerlink" title="nginx高可用集群"></a>nginx高可用集群</h5><p>场景，当nginx服务器出现问题时，能够保证用户能够正常访问tomcat，配置两个nginx一个主服务器一个备份服务器，使用keeplived检测nginx是否存活，对外提供虚拟ip给两个nginx的ip地址进行绑定。</p><p>准备：两台服务器，两个服务器安装nginx，两台服务器安装keepaived</p><p>安装keepalived</p><blockquote><p> yum install keepalived -y</p><p>查看安装情况</p><p>rpm  -q  -a  keepalived</p></blockquote><p>安装完成后在路径：/etc/keepalived/  中有一个配置文件keepalived.conf文件，可以配置相关的信息。</p><p>启动nginx和keepalived</p><blockquote><p>./nginx</p><p>systemctl start keepalived.service</p></blockquote><p>当主nginx挂掉后，需要调用外部的配置文件（shell脚本）将kill掉nginx主机上的keepalived。</p><h5 id="nginx原理"><a href="#nginx原理" class="headerlink" title="nginx原理"></a>nginx原理</h5><p>master&amp;&amp;worker,启动nginx后会启动master进程和worker进程，worker进程争抢资源。</p><p>一个master和多个worker设计有利于热部署，每个worker为一个独立的进程，worker的数量与服务器的cpu核数大致相等。</p><p>worker_connection，一个请求会占用2个或者4个连接数</p><p>一个master有4个worker，worker最大支持1024连接，求最大并发数量：</p><p>请求的是静态资源，需要除以2</p><p>worker_connection<em>worker_processes/2</em></p><p><em>或者</em></p><p>如果作为反向代理，需要除以4</p><p><em>worker_connection</em>worker_processes/4</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pddl规划</title>
      <link href="/2020/04/30/gui-hua-xiang-guan/"/>
      <url>/2020/04/30/gui-hua-xiang-guan/</url>
      
        <content type="html"><![CDATA[<p>角括号&lt;&gt; 表述名字</p><p>圆括号（）元素名字</p><p>方括号[]围绕着option</p><p>An asterisk（*）means “zero or more of”</p><p>a plus（+）means“one or more of”</p><p>规划系统是问题求解算法，它在关于状态和行动的显示命题表示或关系表示上运转。这些表示方法使获得高效启发式和强有力且灵活的问题求解算法成为可能。</p><p>状态空间搜索能够在前向方向（前进）和后向方法（后退）上操作。有效的启发式可由子目标独立性假设和状态规划问题的各种松弛而获得。</p><p>一个规划图可从初始状态开始增量式地构造出来。每一层包含一个所有在那个时间步出现的文字和行动的超集，并且对文字之间或行动之间互斥（或简称mutex）关系进行编码。规划图为状态空间和偏序规划器产生有有的启发式，并能直接用于GRAPHPLAN算法中。</p><p>其他方法包括情景演算公理上的一阶逻辑推理；将规划问题编制为布尔满足性问题或约束满足问题；在偏序规划空间进行显示地搜索。</p><p>进行规划的每一种主流方法都有其拥护者，而哪种方法最好还没有达成一致。方法之间的竞争和杂交导致了规划系统的效率上的重要收货。</p><p>规划系统的五大类：</p><h5 id="基于图规划的规划系统："><a href="#基于图规划的规划系统：" class="headerlink" title="基于图规划的规划系统："></a>基于图规划的规划系统：</h5><p>其代表有美国卡乃基一梅隆大学( Carnegie Mellon University) 的图规划系统GraphPlan (Blum和Furst) 、德国的IPP、英国的STAN 、美国盛顿大学(University ofWashington)的SGP(Daniel S。Weld 等)89]。</p><p>先来介绍几个概念:</p><p>1.有效(valid) 规划解:规划问题的一个有效规划解是一一个动作的集合和对每- - 一个动作发生时间的指定。</p><p>2.规划图(planning graph) :是一个具有两类节点和三类边的有向、分层图。规划图各层是命题层(propositionlevels)和动作层(actionlevels)交替出现的，命题层包含命题节点(标识为一些命题)，动作层包含动作节点(标识为动作)。规划图的第- - 层是命题层，包括规划问题初始条件下的所有命题。</p><p>图规划在两个阶段(phases)交替进行:图扩展( graph expansion)阶段和解提取(solutionextraction)阶段。图扩展阶段正向扩展规划图直到目标状态的所有命题都出现为止。解提取阶段反向搜索规划图以求出规划解。</p><h5 id="基于启发式搜索的规划方法"><a href="#基于启发式搜索的规划方法" class="headerlink" title="基于启发式搜索的规划方法"></a>基于启发式搜索的规划方法</h5><p>目前规划系统为了提高效率，几乎都采用了启发信息。启发式搜索的基本思想是:人为给定一个评估函数，对每个搜索状态进行计算，得到每个状态的值，从而决定哪个状态较好。但是，这个启发函数用在与领域无关的规划系统上比较困难。</p><p>在当前智能规划研究中，领域无关的启发信息的抽取技术是基于实现目标的动作数量，对要解决的问题P放宽到一个比较简单的问题P’，抽取技术就是基于P’来评估。Bonet提出的向前搜索的一个放宽方法7就是将操作的删除边忽略，对于每个状态s，得到在放宽了的问题P’的启发函数h’(s)就可以作为原有问题P的启发函数h*(s)的下限，这样h’(s)就可以作为合适的启发函数作用在原有问题P.上。.</p><p>实质上，初始状态和操作可以理解为-一个定义了的节点有向图，对于每个操作op都有一条由其前提条件节点指向正效果节点的边，这样从初始状态到达节点p的开销就可以计算。从状态s到节点p的开销g(s)递归定义为:</p><p>O(p)表示添加效果为p的操作集，就是p∈Add(op)。g,(Prec(op)) 是从状态从状态s到操作op前提条件节点的计算。</p><p>Bonet对上面的g ,(p)提出更为简单的向前计算过程，首先初始化图上各个节点:当p∈s，令g,(p)为0;否则令g,(p)=∞。这样，每一次操作op作用在状态s上，每个添加效果节点p∈Add(op)添加到s，g,(p) 更新为:</p><p>g,(p)= min[g,(p),1 + g,(Prec(op))]</p><p>这个计算g,(p)的过程一直到g,(p) 不再改变为止，显然，这个过程在节点数目一-定的情况下，时间复杂度是多项式的。</p><p>这样，节点集C的估算g , (C)可以由在这节点集C里面每个节点估算来得到。同理h(s)定义为:</p><p>def  h(s)= g,(G)g, (C)可以定义为三种估算:节点集C中所有节点估算值的和、节点集C中节点最小估算、节点集C中节点最大估算。在HSp[28]中，Bonet 主要采用两种估算:</p><p>A) g,(C)为节点集中所有节点估算值的和，称作添加启发函数haa:</p><p>1.HSP</p><p>规划系统HSP ( Heuristic Search Planner)[3在AIPS-00的规划大赛上取得了成功，它的与领域无关的启发信息的抽取是基于实现目标的动作数量，对要求解的问题P放宽到一个比较简单的问题P’，抽取技术就是基于P’来评估。Bonet提出的向前搜索的-一个放宽方法就是将操作的删除边忽略。对于每个状态s得到在放宽了的问题P’的启发函数h’(s)就可以作为原有问题P的启发函数h*(s)的下限，这样h’(s)就可以作为合适的启发函数作用在原有问题P .上。</p><p>2.FF<br>两个版本的FF (FAST-FORWARD)规划系统23参与了这次比赛。第-一个版本是FF-v2.2，它大致跟在2000年比赛使用的FF-v2.2版本- <em>致， 只是改掉了在预处理阶段存在的小错误:另一个版本是Metric-FF，它能处理用数字表示的约束和对用数字表示的状态数值变量的影响。两个版本的FF (FAST-FORWARD)规划系统23参与了这次比赛。第-一个版本是FF-v2.2，它大致跟在2000年比赛使用的FF-v2.2版本- *致， 只是改掉了在预处理阶段存在的小错误:另一个版本是Metric-FF，它能处理用数字表示的约束和对用数字表示的状态数值变量的影响。<br>Metric-FF可以根据用户两个要求来分别对规划系统进行两种设置。这两个要求是: 1.在最短时间内生成合法规划; 2、 生成最优的规划。前- -种设置搜索技术采用跟FF-v2.2类似的加强爬山法。这种方法是:采用放宽规划长度作为从初始状态到目标状态距离的估计和利用动作互斥来剪枝向前搜索;后一种设置搜索技术采用类似标准的A</em>算法，利用采用放宽规划长度作为从初始状态到目标状态距离的估计也就是启发函数。在两种设置中放宽规划很自然的从STRIPS/ADL中扩展得到。只需要在预处理阶段把数值型约束和影响转化，使得它们都是严格单调的。</p><p>在这些严格单调的限定下通过忽略所有删除边和数值影响变元来放宽一一个规划。 如果这个放宽规划得到解决，那么Metric-FF 综合考虑它的逻辑和数值因素跟FF-v2.2计算启发函数，假如在没有一个放宽规划能到达这个状态，那就证明这个状态是不可达的。</p><p>3.LGP</p><p>规划系统LPGl76 (Local Search in Planning Graphs)是一个基于局部搜索和规划图的规划系统，并且能处理在PDDL2.1领域上用数值来表示的度量和持续时间，和能解决生成规划和优化规划方面问题。</p><p>LGP基本的搜索策略基于Walksat- 一个 高效的SAT问题求解程序。LGP的搜索空间是一个“动作图”(“actiongraphs”),部分规划子图就表示了部分规划搜索步骤就是一一个图的修改，使得一个“动作图”转换成为另一个“动作图”。LGP使用了一种紧凑的规划图表示形式来定义搜索邻近点，使用参数启发函数来评价它的值。这些参数表示在这个部分规划中不同种类冲突的权值在搜索过程中动态计算。评价函数采用了–些通常的启发技术，例如对一个前提条件计算启发搜索开销和启发执行开销。持续的动作和数字化的量值都表示在“动作图”，且通过评价函数模型化。LGP在测试例子中能产生高质量的规划，因为每一次生成一个规划的序列，下一次质量会在这基础上得到提高。LGP采用了跟FF.相似的“最好优先”(best-first)算法，系统能在进行了若干步搜索后会自动转换到“最好优先”搜索。</p><h5 id="基于逐步细化的分层规划方法"><a href="#基于逐步细化的分层规划方法" class="headerlink" title="基于逐步细化的分层规划方法"></a>基于逐步细化的分层规划方法</h5><p>以SHOP2[36为代表的层次规划方法思想是:首先勾画出- -个完整但又比较粗略的规划解，然后逐步细化、逐步明确，直到足以具体完成整个规划的每一步 操作，层次规划方法实际上把不同性质的问题放在不同层次上加以考虑。</p><p>SHOP2</p><p>SHOP2[36]是-一个分层任务网络规划系统。跟在一般的规划需要一组目标不一 一样， 取而代之是SHOP2需要一个半序的任务序列去执行。为了解决一些领域上的规划问题，SHOP2需要- -些基于领域知识的方法来将一一个任务分解为- 组半序的子任务。 为了得到合法的规划，SHOP2将问题变形:它递归地将任务分解为子任务，直到它到达能被规划操作直接执行的原始的任务。</p><p>跟大多数分层任务网络规划系统不一样，SHOP2是从初始状态向前规划:给出几个任务需要分解SHOP2按它们同一执行顺序来得到规划。在规划过程中的每个点上，SHOP2已经知道在这个点之前所执行的操作，故SHOP2了解当前状态。这种技术使得SHOP2的预处理估计机制相当强大: SHOP2预处理方法和操作可以包含逻辑推理、复杂数值计算和外接程序。</p><p>SHOP2比SHOP成功的地方在于它的预处理过程。SHOP 需要他的任务是全序结构,然而SHOP2只需要它的任务是半序结构。因为SHOP2可以插入不同的子任务，- - 些领域知识在SHOP2比SHOP更容易表示。</p><h5 id="基于约束可满足的规划方法"><a href="#基于约束可满足的规划方法" class="headerlink" title="基于约束可满足的规划方法"></a>基于约束可满足的规划方法</h5><p>起初SATPLAN是Henry Kautz和Bart Selman深入地分析了传统的基于定理证明的规划以后提出来的完全不同于以往演绎技术的一种特殊的规划系统，它克服了传统规划系统的异常(每一个模型不一定对应一一个有效的规划解)情况，使得每-一个 正确模型都有一个有效的规划解与其相对应。</p><p><img src="%5Cmedias%5Cimages%5Cplanimages%5CplanGsat.png" alt="image-20200430101424036"></p><p>SAT规划系统的体系结构如图11.10 所示，编译器(Compiler) 的输入是规划问题(包括初始状态、目标状态和动作集合)，它首先猜测规划解的长度，产生一个逻辑命题公式，如果逻辑命题公式是可满足的，它蕴涵着规划解是存在的:符号表( Symbol Table)记录了命题变量和规划实例之间的对应;简化器(Simplifier)运用较快(通常为线性时间)的技术(如单元子句法，纯文字消去法等)来降低CNF公式的规模;求解器(Solver)运用系统或统计的方法来找到-一个满足的赋值:解码器(Decoder) 用符号表把赋值转换成一个规划解。如果求解器发现公式是不可满足的，那么编译器就会产生新的编码(代表更长的规划解)。</p><p>由基于SAT的规划的体系结构可以看到，这种规划方法关键在于两个环节，- -个是编码方式，另一个是求解方式。有关第一个问题的研究取得了一系列的进展，如[38]中综合叙述了几种普遍的编码方式，由于基于SAT的规划算法是基于SAT算法来实现的，所以第二个问题其实就是选择好的SAT算法，而可满足性(SAT)问题是人工智能研究领域中的一个基本理论问题，最近几年来，每年都有新的SAT算法问世，人们设计各种各样的技术来提高解决SAT问题的效率39-441，这几年来主要有GSAT算法和WALKSAT算法，但是这两个算法都不是完备的，一一个比较经典的完备SAT 算法是DP算法，以下就先来介绍GSAT算法和DP算法。</p><p>总结GraphPlan和SATPlan的相同点和异同点之处，共同点: SATPlan 和GraphPlan都分两阶段进行，建立一个命题结构( Propositional Structure) ，在图规划中是规划图，在SAT规划中是CNF wff， 在第一-步所建立的结构中搜索规划解。异同点:图规划(GrphPlan)用的实例化命题结构算法较好，SAT规划( SatPlan)的搜索算法更加强大。</p><p>结合以上两种算法的优点，Kautz 和Selman于1998 年在AIPS.上提出了BLACKBOX规划算法，此系统分三个步骤进行工作:</p><p>1.把一个规划问题(以标准的STRIPS形式描述的)转化为一个规划图。</p><p>2.把第一步中生成的规划图转化成一个CNF wff。</p><p>3.运用最快的SAT引擎解决wff。</p><h5 id="基于模型检测的规划方法"><a href="#基于模型检测的规划方法" class="headerlink" title="基于模型检测的规划方法"></a>基于模型检测的规划方法</h5><p>模型检测(Model Checking)是当前计算机研究领域上的一个热点，它将一个系统模型跟逻辑需要进行比较，从而发现不一致性。传统上，这个思想用来硬件电路上的验证和网络协议的验证。近期，这个思想用在智能规划中，取得了令人瞩目的成就，产生了一系列功能较强的规划系统:MBP、MIPS 、TALPL ANNER、TLPI AN和UMOp。</p><p>命题公式可以转化为不同的范式，一 般情况下转化得到的范式有合取范式(CNF,Conjunctive Normal Form)和析取范式(DNF，Disjunctive Normal Form)。对于每个命题公式都有一个相应的逻辑范式来跟其相等价，但是这样的范式复杂度是以指数级增长的。为何要使用范式?其主要理由有两个: </p><p>1、当采用某种范式来描述命题公式的时候，相当一部分算法更加容易来设计。例</p><p>如:很多定理机器证明的算法基础–消解规则，它就采用合取范式来描述命题公式，假如不采用合取范式来描述，那么设计消解规则将是比较困难的。</p><p>2、当采用某种范式来描述命题公式的时候，相当一部分可计算问题解决起来的效率</p><p>更加高。例如:测试命题公式的有效性是一个co-NP 难题，但这个命题公式采用合取范式来描述时，那么这复杂度就是-一个多项式时间，只需要对每一个合取项进行检查是否对一个命题变量p都包含了p和→p。</p><p>但是对于一-些可计算问题来说，转化为一个普通的范式通常不是一个最好的解决方案。就如采用合取范式来测试命题公式的有效性，它的时间复杂度是多项式时间，但是这是由空间复杂度来换取的，它的空间复杂度为指数级。</p><p>近期在智能规划系统上，各位研究者也根据相应的设计采取了不同的范式，其中之一是两元判定图表BDD’511 (Binary Decision Diagrams)，采用BDD的主要原因是:采用BDD表达的两个谓词公式时，两个BDD范式逻辑相等，当且仅当这两个BDD范式是语法相等，即两个BDD范式逻辑相等，当且仅当这两个BDD范式是同一个BDD范式。然而,BDD范式空间复杂度也是没加限制的命题公式的指数级倍数，但是在BDD.上的操作通常可以是在多项式时间完成。</p><p>BDD表达式是基于三重布尔操作ifthen-else ite ( p,φ,,φ2 )定义为</p><p>(p^φ)v(-p^φ2)，p是一个命题。任何- -个布尔表达式都能采用这个布尔操作和其命题变量和常量(1: true，0: false)。它为布尔函数提供了一个有效地的、规范的表达方法，被广泛用于模型检测领域，特别是使用在协议验证方面。</p><h4 id="智能规划的应用"><a href="#智能规划的应用" class="headerlink" title="智能规划的应用"></a>智能规划的应用</h4><p>目前智能规划应用在自动系统中使得自动化系统灵活性、健壮性和适应性得到提高。主要应用研究领域有:机器人、智能企业和商业软件。</p><p>在IJCAI-01的智能规划讨论会上，会议主题是“资源约束规划”，目标是为实际应用上的规划研究学者提供一一个交流的平台。 会议.上的规划系统都是在计算机实际应用系统中得到广泛使用的规划系统，例如:美国宇航局的ASPEN规划系统、马里兰大学的CIRCA、.美国宇航局的EUROPA、华盛顿大学的LPSAT规划系统和爱丁堡大学的O-Plan规划系统等等。这次会议主要讨论内容有:混合规划系统、整合规划系统、资源约束上的推理技术、时序规划、智能规划和调度、优化目标规划和有关规划的模型、问题领域和实验结果。</p><h5 id="航空航天中的应用"><a href="#航空航天中的应用" class="headerlink" title="航空航天中的应用"></a>航空航天中的应用</h5><p>智能规划的一个重要应用领域是航天航空，有兴趣的读者可以参照《宇航学报》上的一篇综述《航天器自主运行技术的进展》[68], 这是宇航专业的文章，可是它大部分讲的是智能规划的一个重要应用领域是航天航空，有兴趣的读者可以参照《宇航学报》上的一篇综述《航天器自主运行技术的进展》[68], 这是宇航专业的文章，可是它大部分讲的是</p><h5 id="ASPEN"><a href="#ASPEN" class="headerlink" title="ASPEN"></a>ASPEN</h5><p>在航天航空应用中取得最好效果的是美国宇航局的ASPEN (Automated Scheduling andPlanning Environment)00规划系统。ASPEN获得了1999年美国宇航局的软件比赛优秀奖并旷泛用在进行外太空任务的宇航器上，包括Citizen Explorer、MARS-01 和DS-T 等宇航器目前对外也有其商业版本出售。<br>在宇航器中智能规划的应用主要是将较高层次的科学研究和工程操作指令转化为较低层次的宇航器执行指令。ASPEN结合了宇航器操作约束、飞行规范、 宇航器硬件模型、科学实验目标和操作过程来自动生成较低层次的宇航器操作序列。通过自动生成宇航器操作序列和结合了相关的领域知识APSEN使得宇航任务可以由一个小分队来控制，这样降低了开销。</p><p>ASPEN是一个基于面向对象的系统，提供了- -组可重用的软件部件，这些部件可以比较简单地应用在目前复杂的规划系统上，包括:<br>1、约束模型语言，可以令用户方便的定义应用领域。</p><p>2、约束管理系统，用来表示和维护宇航器的可操作性、资源约束和操作需要的条件。3、一组搜索策略，用来规划生成和修改，并满足“硬约束”。</p><p>4、一种语言来表示规划选择和优化这些选择。</p><p>5、 “软”的、实时的修正规划能力。</p><p>6、时序推理系统，用来表示和维护时序约束。<br>7、图形化规划和调度的界面。</p><p>这方面应用的-一个具体例子是哈勃空间望远镜(HST, Hubble Space Telescope)的修复,在修复过程中,地面人员不断得到关于HST能作什么、不能作什么的最新信息，然后对修复工作作出规划,从而使HST恢复了正常观测能力!</p><h5 id="机器人中的应用"><a href="#机器人中的应用" class="headerlink" title="机器人中的应用"></a>机器人中的应用</h5><p>规划在机器人中的应用主要有:环境的模型化描述、机器人能力的模型化描述、目标的模型化描述和实时的输入响应。机器人规划研究跟其它规划研究领域不一样，主要在于机器人处于有噪音的各类部分的环境模型中，它通过感应器和交流信道得到的信息都存在噪音，这样机器人就需要将感应和执行的整合来进行直接规划。</p><p>目前主要研究领域包括: 1、路径规划:指在机器人从一个开始的位置如何走到目标位置的控制机制并且要满足动态的约束。2、感知规划:主要是有关如何采集外部和内部信息的规划，例如:辨别物体确定机器人位置对环境的观察。3、任务规划:跟传统的规划问题相似，不过更加注重时间和资源的分配在动态的环境、不确定的或部分已知的状态知识的条件下进行规划。4、规划交流:多个机器人之间和人与机器人之间如何进行信息交换，包括询问信息和反馈信息两大部分。</p><p>智能规划在机器人学中具体的应用方向有:环境模型的描述，控制知识的表示，路径规划，任务规划，非结构环境下的规划，含有不确定性时的规划，协调操作(运动)规划，装配规划，基于传感信息的规划，任务协商与调度和制造(加工)系统中机器人的调度。</p><h5 id="在智能工厂中的应用"><a href="#在智能工厂中的应用" class="headerlink" title="在智能工厂中的应用"></a>在智能工厂中的应用</h5><p>智能规划是人工智能研究中应用性很强的–个研究领域.例如,在工厂作业调度规划问题中(Job shop scheduling)，就是要考虑在有限的加工资源(车床,刨床,钻床)的情况下，根据已知的工件的加工顺序要求对整个车间的生产作出安排,使得加工完所有工件所需的时间尽可能的少,每台机床的等待时间尽可能的短.这就使工厂在同样设备条件下，由于作业调度规划合理而增加了生产能力,从而给工厂带来了可观的经济效益.</p><p>智能规划在智能化工厂“中的应用”是指从生产设计到生成产品监测生产的一系列过程它不只包括单个企业，还可以处理多个企业之间的关系，例如:供应链和虚拟企业。主要采用资源约束的方法进行求解[72]。目前主要研究领域包括:</p><p>1、生产流程规划:在一个功能化的工厂中将-一个生产要求转变为一组详细的操作指令。许多基于知识工程的软件在这方面取得了较好的效果，先将现实生产流程转化为知识库中信息，然后再根据相应的生产要求来转化。</p><p>2、生产安排规划和调度:将生产安排用来迎合客户的需求按时交货，即我们通常说的ERP作业调度。</p><h5 id="商业中的应用"><a href="#商业中的应用" class="headerlink" title="商业中的应用"></a>商业中的应用</h5><p>1.网路信息集成</p><p>网络信息集成74的过程是根据领域本体的内容，从互联网上采集信息并将信息集成到领域本体中，网络信息集成的实质意义是为网络信息提供–种重新组织和理解的机制。目前研究主要集中在查询规划中。查询规划可以定义为:把对信息对象框架的查询转化成只对信息源作访问的操作序列。在规划的执行过程中有时需要将信息源返回的结果合并起来分析以作出下一步的规划。所以信息的合并是查询规划中的一个重要环节。我们把信息的合并定义为:合并两个残缺信息对象的框架，即将两个属性值对集结合成一一个 属性值对集。合并的依据是信息源之间的相关链接。目前查询规划已经扩展到生物信息查询上，较好的有在IBM公司的DiscoveryLink系统上的应用75]。</p><p>2.运输规划<br>网络信息集成74的过程是根据领域本体的内容，从互联网上采集信息并将信息集成到领域本体中，网络信息集成的实质意义是为网络信息提供–种重新组织和理解的机制。目前研究主要集中在查询规划中。查询规划可以定义为:把对信息对象框架的查询转化成只对信息源作访问的操作序列。在规划的执行过程中有时需要将信息源返回的结果合并起来分析以作出下一步的规划。所以信息的合并是查询规划中的一个重要环节。我们把信息的合并定义为:合并两个残缺信息对象的框架，即将两个属性值对集结合成一一个 属性值对集。合并的依据是信息源之间的相关链接。目前查询规划已经扩展到生物信息查询上，较好的有在IBM公司的DiscoveryLink系统上的应用75]。<br>在目前物流应用问题中根据动态的不断改变的运输要求而对一-队交通工具进行实时规划(行程调整和计划安排) [701。 这些交通工具可以是:在一个房子里边的移动机器人、在一个城市道路上的的士甚至是经典的电梯问题。然而在这个问题中存在着很多的制约条件来使得运输规划变得复杂，例如时间限制(Time window)、最终期限、运输能力、行程时间、资源优化，更多的是象交通状况、天气状况、车辆中途损坏等不可预测的事件。另外运输规划在突发事件的大规模运输调度中也有所应用73]，例如:短时间内的军事调度和部署。</p><p>另一个典型的工厂作业调度规划问题是考虑在有限辆的货运汽车的前提下，在不同的地点之间运送货物.规划的输出是一张车辆运转计划表,使得汽车尽可能地满载运输,空车运行情况尽可能地少,车辆闲置的情况尽可能地少,这当然也会给运输公司带来可观的效益.美国联帮太平洋铁路(Union Pacific Railroad, UPRR)有 31000 多英里的铁路，覆盖美国西部的24个州。手工编制部分调度计划需要几天时间，而且由于规划的资源利用率低造成很大浪费. Murphy等人1996 年1月为美国联帮太平洋铁路建立的铁路自动调度系统(Rail TrainScheduler, RTS), RTS能够产生好的,低费用的调度计划691.美国联帮太平洋铁路由于使用了这个调度系统，每年可节约资金50万美元。.</p><p>protege</p><p>可以自定义本体也可以使用URI进行获取本体。</p><p><a href="http://www.pizza.com/ontologies/pizza.owl" target="_blank" rel="noopener">http://www.pizza.com/ontologies/pizza.owl</a></p>]]></content>
      
      
      <categories>
          
          <category> 课题相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2020/04/30/java-wen-ti-ji-lu/"/>
      <url>/2020/04/30/java-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>java基础与概念:</p><p>1.什么是面向对象？</p><blockquote><p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个问题的步骤中的行为。面向对象技术是一种以对象为基础，以事件或消息来驱动对象执行处理的程序设计技术，它具有抽象性、封装性、继承性、多态性。</p></blockquote><p>什么是面向过程？</p><blockquote><p>面向过程是分析出解决问题所需要的步骤，然后把这些步骤一步一步实现，使用的时候一个一个一次调用即可。将函数与函数操作的数据进行分离，面向对象对于数据和数据的操作进行了封装。</p></blockquote><p>什么是多态？</p><blockquote><p>同一操作作用于不同的对象，可以有不同的解释，产生不同的结果，多态的前提是继承和方法的重写。<strong>实质是父类引用指向子类对象。</strong></p><p>使用多态:封装隐藏了实现的细节，使得代码模块化，继承可以扩展已经存在的类/模块，使得代码重用，多态增加代码的重用且一定程度解决软件模块之间的紧耦合，提高扩展性</p><p>多态的好处：提高程序复用性、提高可扩充性和可维护性</p></blockquote><p>什么是继承？</p><blockquote><p>描述的是事物之间的所属关系，通过继承可以使得事物之间形成一种关系体系</p><p>类的继承是指在一个现有的类的基础上构建一个新的类，构建出来的类称之为子类，现有的类称之为父类，子类会自动拥有父类除了私有的方法之外所有可继承的属性和方法</p><p>继承的好处：提高了代码的复用性，提高软件开发的效率；</p></blockquote><p>什么是封装？</p><blockquote><p>封装将类的某些信息隐藏在类的内部，不允许外部程序直接访问，只能通过该类提供的方法来实现对隐藏信息的操作和访问。</p></blockquote><p>小结：</p><blockquote><p>总结封装、继承、多态的作用：<br>1.封装：把对象的属性与方法的实现细节隐藏，仅对外提供一些公共的访问方式<br>2.继承：子类会自动拥有父类所有可继承的属性和方法<br>3.多态：配合继承与方法重写提高了代码的复用与扩展；如果没有方法重写，则多态同样没有意义</p></blockquote><p>java中的基本数据类型(4类8种)</p><table><thead><tr><th>四类</th><th>八种</th><th>字节数</th><th>数据表示范围</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td></td><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td></td><td>int</td><td>4</td><td>-2147486348~2147483648</td></tr><tr><td></td><td>long</td><td>8</td><td>-2^65~2^65-1</td></tr><tr><td>浮点数</td><td>float</td><td>4</td><td>-3.403E38~3.403E38</td></tr><tr><td></td><td>double</td><td>8</td><td>-1.798E308~1.798E308</td></tr><tr><td>字符型</td><td>char</td><td>2</td><td>表示一个字符,’a’</td></tr><tr><td>布尔型</td><td>boolean</td><td>1</td><td>false或者true</td></tr></tbody></table><p>如果使用long类型的数据必须在后缀添加L字符，小数不加后缀默认double类型</p><p>数据类型范围：</p><blockquote><p>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p><p>数据类型小的能够转换成数据类型大的，数据类型大的不能直接转换成类型小的数据</p></blockquote><p>常见的字符的Ascii编码：</p><blockquote><p> 数字<strong>0-9</strong>对应ASCII编码十进制为<strong>48-57</strong>, </p><p>字母<strong>a-z</strong>对应ASCII编码十进制为<strong>97-122</strong>，</p><p>字母<strong>A-Z</strong>对应ASCII编码十进制为<strong>65-90</strong></p></blockquote><p>访问修饰符：</p><table><thead><tr><th></th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>所有类</td><td>*</td><td></td><td></td><td></td></tr><tr><td>不同包的类的子类</td><td>*</td><td>*</td><td></td><td></td></tr><tr><td>同一包中</td><td>*</td><td>*</td><td>*</td><td></td></tr><tr><td>同一类中</td><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><p>常用类:</p><p>System类</p><blockquote><p>currentTimeMillis();方法，用于记录系统当前时间的毫秒值</p><p>exit(int status);终止正在运行的java程序</p><p>gc()用来运行jvm中垃圾回收器，完成内存中垃圾的清除</p><p>getProperty(String key)用来获取指定键中所记录的系统属性信息</p><p>arraycopy方法，用来实现将源数组部分元素复制到目标数组的指定位置</p><p>arraycopy(int[] a,int index1 ,int[] b,int index2,int num);分别表示a数组中index1位置的元素复制到b数组中index2位置开始的位置，复制num个元素</p></blockquote><p>Math类：</p><blockquote><p>1.ceil方法，结果为比参数值大的最小整数的double值;</p><p>例如：Math.ceil(3.3); //d1的值为 4.0；Math.ceil(-3.3); //d2的值为 -3.0</p><p>2.floor方法，结果为比参数值小的最大整数的double值</p><p>例如：Math.floor(3.2);结果为3.0；Math.floor(-3.3);结果为-4.0</p><p>3.pow方法，返回第一个参数的第二个参数次幂的值</p><p>例如：Math.pow(2.0,3.0);值为8.0</p><p>4.round方法：返回参数值四舍五入的结果</p><p>例如：Math.round(5.5);结果为6.0 Math.round(5.4)结果为5.0</p></blockquote><p>Arrays类：</p><blockquote><p>binarySearch(int[] a,int key);二分搜索法来对指定的数组获取指定的值</p><p>sort方法，用来对指定数组中的元素进行排序（元素值从小到大进行排序）</p></blockquote><p>BigInteger类：</p><blockquote><p>构造方法有：</p><p>BigInteget(byte[] val);</p><p>BigInteger(int signum,byte[] magnitude);</p><p>BigInteger(int bitLength,int Certainty,Random rnd);</p><p>BigInteger(int numBits,Random rnd);BigInteger(String val);</p><p>BigInteger(String val,int tadix)</p><p>a.add(BigInteger  b)；将两个大整数相加</p><p>a.subtract(BigInteger  b)；将两个大整数相减</p><p>a.multiply(BigInteger  b)；将两个大整数相乘</p><p>a.divide(BigInteger  b)；将两个大整数相除</p></blockquote><p>BigDecimal类</p><blockquote><p>常用的构造函数BigDecimal(String  num)</p><p>建议浮点数据以字符串形式给出,因为参数结果是可以预知的</p><p>除法需要设置精度与保留位数</p><p>bigDecimal.divide(BigDecimal bigDecimal2,int  scale,int roundModel);</p></blockquote><p>集合类(Collection集合、List集合、Set集合、Map集合)</p><p>Collection集合是一个接口，其实现有List集合和Set集合</p><p>List接口，是一个元素存取<strong>有序的、带有索引</strong>的集合，集合中可以存储<strong>重复</strong>的元素。</p><p>List接口实现的子类有ArrayList集合和LinkedList集合</p><p>​    ArrayList集合存储的数据结构是<strong>数组结构</strong>，元素增删慢，查找快</p><p>​    LinkedList集合存储数据的数据结构是<strong>链表</strong>，方便元素添加删除的集合</p><p>​    Vector集合：数据存储的结构是<strong>数组结构</strong>，Vector中提供一个独特的取出方式，就是枚举Enumeration，早期的迭代器</p><p>Set集合接口：setz中<strong>不能存放重复</strong>的元素，并且元素<strong>没有顺序</strong>，通过equals来判断元素是否重复</p><p>HashSet集合采用<strong>哈希表结构</strong>存储数据，保证元素唯一性的方式依赖于hashCode和equals方法。哈希表底层也是使用数组，数组也存放对象，而对象的位置比较特殊，当需要把这些对象存放在数组中时，会根据这些对象的特有数据结合相应的算法，计算这个对象在数组中的位置，然后把这个对象存放在对象数组中，称之为哈希表。</p><p><strong>使用hashCode来判断对象存储的位置，使用equals判断两个对象是否为同一个对象</strong></p><p>HashSet保证<strong>元素唯一</strong>,可是元素存放进去是<strong>没有顺序</strong>的，那么我们要保证有序可以使用HashSet的子类LinkedHashSet，它是<strong>链表和哈希表</strong>组合的一个数据存储结构。</p><p>Map接口：存储的元素是成对存在的，每个元素有键和值两部分组成，通过键找到对应的值。</p><p>map中不能包含重复的键，值可以重复，每个键只能对应一个值。常用的集合HashMap和LinkedHashMap集合。</p><p>HashMap&lt;K,V&gt;存储采用的是哈希表结构，元素存取顺序不保证一致，为了保证键的唯一不重复，需要重写键的hashCode和equals方法</p><p>LinkedHashMap：采用哈希表结构+链表结构，通过链表结构保证元素存取顺序一致，通过哈希表结构保证键的唯一、不重复。</p><p>Entry键值对对象：</p><p>Entry将键值对的对应关系封装成了对象，在遍历map时可以单独的获取kay或者value</p><p><strong>Map集合不能直接使用迭代器</strong>，将其转换成set集合然后使用迭代器遍历元素。</p><p>Collectiions集合工具类：常用的部分方法有：</p><p>Collections.sort(list); // 集合元素排序</p><p>Collections.shuffle(list);//  集合元素存储位置打乱</p><p><strong>接口与抽象类：</strong></p><p>1.抽象类：</p><blockquote><p>抽象类使用abstract修饰</p><p>抽象类不能使用new关键字来实例化对象</p><p>抽象类可以有抽象方法，抽象类也可以有具体的方法</p><p>抽象类中的抽象方法只有方法体</p></blockquote><p>2.接口：</p><blockquote><p>接口使用interface修饰</p><p>接口不能实例化</p><p>一个类只能继承一个抽象类，但是可以实现多个接口</p><p>接口中的方法为抽象方法，jdk1.8对接口进行增强，使用default关键字，可以使得接口中对方法实现</p></blockquote><p>异常(异常分类，如何使用，如何自定义异常)</p><p>IO（File类、字符流、字节流、文件上传与下载、读取excel，txt）</p>]]></content>
      
      
      <categories>
          
          <category> java基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习笔记</title>
      <link href="/2020/04/30/spring-shu-ji-yue-du/"/>
      <url>/2020/04/30/spring-shu-ji-yue-du/</url>
      
        <content type="html"><![CDATA[<p>Spring学习笔记</p><p>1.IOC的概念：全称是Inversion of  Contorl叫做控制反转，和依赖注入概念等同，思想是不需要自己去创建对象，让IOC创建好拿来。</p><p>主要是通过引入中间代理消除对象间复杂的耦合关系，并统一管理分散的复杂耦合关系。</p><p>IOC三种依赖注入方式:</p><table><thead><tr><th>方式</th><th>构造方法注入</th><th>Setter注入</th><th>接口注入</th></tr></thead><tbody><tr><td>好处</td><td>对象被构造后进入就绪状态，可以马上使用</td><td>当前对象只要为其依赖对象所对应的属性添加setter方法，就可以通过Setter将相应的依赖对象设置到被注入的对象中</td><td>被注入对象如果想要为其注入依赖对象，就必须实现某个接口，接口中提供注入方法</td></tr><tr><td>优点</td><td>构造后即进入就绪状态；</td><td>setter方法可以被继承，允许设置默认值</td><td>—</td></tr><tr><td>缺点</td><td>当依赖对象比较多时，构造方法参数比较长</td><td>对象构造后无法进入就绪状态</td><td>强制被注入对象实现不必要的接口，带有侵入性</td></tr></tbody></table><p>注：接口和接口方法不重要，重要的是接口声明方法的参数类型必须是“被注入的对象”所依赖的对象类型</p><p>2.IOC Service Provider职责是：</p><p>1.业务对象的构建管理：IOC Service Provider需要将对象的构建逻辑从客户端对象剥离</p><p>2.业务对象间的依赖绑定：IOC Service Provider通过结合之前构建和管理所有业务对象，以及各个业务间可以识别的依赖关系，将这些对象依赖的对象注入绑定，从而保证每个业务对象在使用的时候，可以处于就绪状态。</p><p>IOC Service Provider如何管理对象间的关系：</p><p>方式一：直接编码方式注册对象管理信息</p><p>方式二：配置文件的方式</p><p>方式三：元数据方式（即注解的方式）</p><p>3.IOC容器之BeanFactory</p><p>IOC Service Provider是一个可以有对象创建管理和依赖注入服务的一个容器，是Spring IOC容器的一部分，Spring Ioc还提供对象生命周期管理，线程管理，查找服务，AOP支持等</p><p>Spring提供了两种容器类型：BeanFactory和ApplicationContext</p><p><strong>BeanFactory：</strong>基础类型IOC容器，提供完整的IOC服务支持，如果没有特殊指定，默认采用延迟初始化策略（lazy-load）。</p><p><strong>ApplicationContext：</strong>在BeanFactory的基础上构建，是相对比较高级的容器实现，其拥有BeanFactory的所有支持，还提供了时间发布、国际化信息等。ApplicationContext间接继承BeanFactory，还实现了其他的接口。</p><p>BeanFactory的对象注册与依赖绑定方式：</p><p>方式一：直接编码</p><p>方式二：外部配置文件方式（properties配置和xml配置）</p><p>方式三：注解方式</p><p>spring相关的问题：</p><p>1.请用自己的语言描述springIOC、DI、MVC的基本执行原理。</p><blockquote><p>答：SpringIOC、DI、MVC主要执行分为三个阶段</p><p>配置阶段：主要完成web.xml和Annotation配置</p><p>初始化阶段：完成IOC容器的初始化、DI的自动注入和HandlerMapping的初始化</p><p>运行阶段：根据用户请求的URL调用对应的Method，将结果打印到浏览器</p></blockquote><p>2.Spring中的Bean是线程安全的吗？为什么？</p><blockquote><p>Spring中的Bean是用户自己写的类，该bean的线程是否安全与spring无关，因为Spring只承担了创建和管理bean的职责，并没有对Bean进行任何修改。</p></blockquote><p>3.使用自己的语言详细描述SpringIOC和DI的工作流程</p><blockquote><p>IOC流程：</p><p>a.读取配置文件</p><p>b.解析配置文件，并封装成BeanDefinition</p><p>c.把BeanDefinition对应的实例放入容器进行缓存</p><p>DI流程：</p><p>a.循环读取BeanDefinition的缓存信息</p><p>b.调用getBean()方法创建对象实例</p><p>c.将创建好的对象实例包装为BeanWarpper对象</p><p>d.将BeanWapper对象缓存到IOC容器</p><p>e.循环IOC容器进行注入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高并发</title>
      <link href="/2020/04/29/java-gao-bing-fa/"/>
      <url>/2020/04/29/java-gao-bing-fa/</url>
      
        <content type="html"><![CDATA[<p>java高并发</p><p>什么是进程？</p><blockquote><p>进程，是并发执行的程序在执行过程中<strong>分配和管理资源的基本单位</strong>，是一个动态概念，竟争计算机系统资源的基本单位。每一个进程都有一个自己的地址空 间，即进程空间或（虚空间）。进程空间的大小 只与处理机的位数有关，一个 16 位长处理机的进程空间大小为 216 ，而 32 位处理机的进程空间大小为 232 。进程至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。<strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在</strong></p></blockquote><p>什么是线程？</p><blockquote><p>线程，在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引进了。线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为<strong>轻权进程或轻量级进程</strong>，也是 CPU <strong>调度</strong>的一个基本单位。<strong>线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源</strong>。</p></blockquote><p>什么是协程？</p><blockquote><p>协程是一种<strong>用户态的轻量级线程</strong>，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则<strong>基本没有内核切换的开销</strong>，可以不加锁的访问全局变量，所以<strong>上下文的切换非常快</strong>。</p></blockquote><p>启动一个java程序</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>jps</td><td>显示系统内所有Hotspot虚拟机进程</td></tr><tr><td>jstat</td><td>用于收集Hotspot虚拟机各个方面的运行数据</td></tr><tr><td>jinfo</td><td>显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>生成虚拟机的内存转储快照</td></tr><tr><td>jstack</td><td>生成虚拟机的线程快照</td></tr><tr><td>jhat</td><td>用于分析heapdump文件，建立http/html服务器，使得用户在浏览器中访问</td></tr></tbody></table><blockquote><p>jps [options] [hostid]</p><p>参数有：</p><p>-p 只输出LVMID，省略主类的名称</p><p>-m  输出虚拟机进程启动时传递给主类main的函数参数</p><p>-l  输出主类的全名，如果进程执行的是jar包，输出jar路径</p><p>-v  输出虚拟机进程启动时jvm参数</p></blockquote><h5 id="java多线程与并发编程"><a href="#java多线程与并发编程" class="headerlink" title="java多线程与并发编程"></a>java多线程与并发编程</h5><h6 id="1-多线程的三大特性"><a href="#1-多线程的三大特性" class="headerlink" title="1.多线程的三大特性"></a>1.多线程的三大特性</h6><p><strong>原子性：</strong> java的内存模型保证了基本数据类型的操作具备原子性的，对于double和long类型的数据非原子操作，虚拟机提供了字节码指令monitorenter和moniterexit进行lock和unlock</p><p><strong>可见性：</strong>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。java内存模型是通过将工作内存中的变量值同步到主内存中，依赖于主内存作为媒介的方式实现可见性。Volatile关键字保证了线程之间的可见性。java中还能够保证可见性的有cynchronized(是同步快对一个变量unlock时，必须先把此变量同步到主内存中)和final关键字(在构造器中完成初始化后，构造器没有将this的引用传递出去，对于其他线程就可见final的值)</p><p><strong>有序性：</strong>java内，一个线程内部所有的操作都是有序的，如果在一个线程中观察另一个线程，所有的操作都是无序的。java中使用volatile和synchronized两个关键字来保证线程之间操作的有序性，Synochronized是一个变量在同一时刻只允许一条线程对其进行lock操作。</p><h6 id="2-java内存模型"><a href="#2-java内存模型" class="headerlink" title="2.java内存模型"></a>2.java内存模型</h6><p>可以参考另一篇文章：</p><h6 id="3-Volatile关键字"><a href="#3-Volatile关键字" class="headerlink" title="3.Volatile关键字"></a>3.Volatile关键字</h6><p>volatile与synchronized的区别：</p><blockquote><p>a.volatile轻量级，只能修饰变量，synchronized重量级，还可以修饰方法</p><p>b.volatile只能保证数据的可见性，不能够用来同步，因为多个线程并发访问volatile修饰的变量不会阻塞</p><p>c.synchronized不仅可以保证可见性，还保证原子性，因为只有获得了锁的线程才能进入临界区，从而保证临界区中的所有语句全部执行，多个线程之间争抢synchronized锁对象时，会出现阻塞。</p></blockquote><h6 id="4-ThrreadLocal"><a href="#4-ThrreadLocal" class="headerlink" title="4.ThrreadLocal"></a>4.ThrreadLocal</h6><p>提高一个线程的局部变量，访问某个线程拥有自己的局部变量</p><p>当使用threadlocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响到其他线程对应的副本。</p><p>ThreadLocal通过map集合，Map.put(“当前线程”，值);</p><h6 id="5-线程池"><a href="#5-线程池" class="headerlink" title="5.线程池"></a>5.线程池</h6><p>什么是线程池?</p><p>线程池是指在初始化一个多线程应用程序的过程中创建一个线程集合，然后需要执行新的任务时重用这些线程而不是新建一个线程。线程池的个数完全取决于可用内存数量和应用程序的需求。</p><p>线程池的作用：</p><blockquote><p>1.线程池改进了一个应用程序的响应时间，由于线程池中的线程已经准备好等待被分配任务，应用程序可以直接拿了使用而不用新建一个线程</p><p>2.线程为每个短生存周期任务创建一个完整的开销并可以在任务完成后回收资源</p><p>3.线程池根据当前在系统中运行的进程来进行优化线程时间片</p><p>4.线程池允许我们开启多个任务而不用为每个线程设置属性</p><p>5.线程池允许我们正在执行的任务的程序参数传递一个包含状态信息的对象</p><p>6.线程池可以用来解决处理一个特定的求情最大线程数量限制问题</p></blockquote><p>线程池的四种创建方式：</p><blockquote><p>Executors提供的四种线程池</p><p>1.newCachedThreadPool:创建一个可以缓存的线程池，如果线程池长度超过处理需要，可灵活回收空余线程</p><p>2.newFixedThreadPool:创建一个定长的线程池，可控制线程最大并发数，超出线程会在队列中等待</p><p>3.newScheduledThreadPool:创建一个定长的线程池，支持定时及周期任务执行</p><p>4.newSingleThreadExecutor:创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行。</p></blockquote><p>线程池使用时会用到的概念：</p><p>核心数——》任务队列——》最大线程数——》拒绝策略</p><p>个人理解该过程类似于银行业务，一开始有三个业务窗口，两个VIP窗口，顾客少的时候不用排队，再多的人时，安排叫号，使其在候选区域等候，当再多人员时，开放vip窗口办理业务，当人数过多时，选择一定的拒绝策略，让多余的人不用等候。</p><p>拒绝策略有四种：</p><p>1.AbortPolicy：抛出异常，RejectedExecutionException</p><p>2.DisCardPolicy：什么也不做，直接忽略</p><p>3.DiscardOldestPolicy：丢弃执行队列中最老的任务，尝试为当前提交的任务腾出位置</p><p>4.CallerRunsPolicy：直接由提交任务者执行这个任务</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门</title>
      <link href="/2020/04/29/netty-ru-men/"/>
      <url>/2020/04/29/netty-ru-men/</url>
      
        <content type="html"><![CDATA[<p>Netty入门</p><p>Netty是JBOSS提供的开源项目，github上的独立项目</p><p>Netty是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠的网络IO程序。Netty主要是针对TCP协议下，面向客户端高并发应用或Peer to Peer场景下的大量数据持续传输的应用，本质是NIO框架。</p><p>互联网行业在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高性能通信框架。</p><p>java支持3中网络编程模型I/O模式：BIO、NIO、AIO</p><p>java BIO同步并阻塞，服务器实现模式为一个连接一个线程，客户端有一个连接就有一个服务器线程进行处理，如果连接不做任何事产生不必要的开销（服务器监听与等待客户端发送数据产生的阻塞），应用场景：适用于连接数目较小且固定的架构，服务器资源要求较高</p><p>java NIO同步非阻塞，服务器实现模式为一个线程处理多个请求，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求就进行处理。连接数目较多，连接比较短，聊天服务器，弹幕系统，服务器通讯</p><p>java AIO异步非阻塞：AIO引入通道的概念，采用Proactor模式，有效的请求才启动线程，特点是先有操作系统完成后才通知服务器端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。适用于连接数目多且连接比较长的架构，例如相册服务器。</p><p>BIO连接流程：</p><p>1.服务器端启动ServerSocket</p><p>2.客户端启动Socket对服务器进行通信，默认情况下服务器需要对每个客户建立一个线程与之通信。</p><p>3.客户端发出请求后，先咨询是否有线程响应，没有则等待或被拒绝</p><p>4.服务器响应后，客户端等待请求结束后，再继续执行</p><p>Bio服务器端程序（使用线程池）</p><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> xing <span class="token operator">*</span> <span class="token annotation punctuation">@create</span> <span class="token number">2020</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">-</span>Multithreading<span class="token operator">-</span>study<span class="token operator">-</span>master <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//线程池机制</span>        <span class="token comment" spellcheck="true">//1.创建一个线程池</span>        <span class="token comment" spellcheck="true">//2.如果有客户端连接就创建一个线程，与之通信</span>        ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//监听，等待客户端的连接</span>            <span class="token keyword">final</span> Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接到一个客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//线程池监听到一个连接就与之通信</span>            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程Id"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"当前线程名"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过socket，获取输入流</span>            InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭socket的连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Bio的程序中会后两个阻塞的位置，第一个位置在于serverSocket.accept();，服务器端箭筒时阻塞，第二个位置在inputStream.read(bytes);，服务器端接受数据的阶段。</p><p>windows7安装telnet服务</p><p>1.点击控制面板——》程序——》打开或关闭windows功能，选择telnet服务器与telnet客户端进行勾选，点击确定。</p><p>2.设置，win+R，services.msc回车，将telnet设置为手动启动</p><p>3.输入命令telnet  ip    端口号  例如： telnet 127.0.0.1   6666</p><p>注：连接后如果不显示字符只显示光标，使用ctrl+]解决</p><p>java NIO，三大核心部分：Channel(通道)、Buffer(缓冲区)、Selector(选择器)</p><p>NIO面向通道，面向块的的编程，数据读取到稍后处理的缓冲区，需要时在缓冲区中前后移动。Bio使用流的方式处理数据，Nio使用快的方式处理数据，I/O的效率比流I/O高很多</p><p>nio三大核心的关系：</p><p>每个channel对应一个Buffer，Selector对应一个线程，一个线程对应多个Channel连接，selector进行切换，轮询channel由事件（Event）决定，Selector根据不同的事件，在各个通道上切换。Buffer是一个内存块，是一个数组，数据的读取写入是通过Buffer，BIO要么是输入流要么是输出流。NIO的buffer可以读也可以写，需要一个flip方法切换，channel是双向的，可以返回底层操作系统的情况。</p><p>缓冲区(Buffer)：缓冲区本质上是一个可以读写数据的内存块，可以理解成一个容器对象该对象提供了一组方法，可以使用内存块，缓冲区对象内置一些机制，能够跟踪和记录缓冲区的状态变化情况。常用的缓冲区：ByteBuffer、shortBuffer、CharBuffer、IntBuffer、LongBuffer、DoubleBuffer、FloatBuffer</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//buffer抽象类中的变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编辑</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置，下一个要被读或者写的索引，每次读写缓冲区都会改变</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//容量，缓冲区可容纳最大数据量</span><span class="token comment" spellcheck="true">/*常用方法：    public static ByteBuffer allocateDirect(int capacity);创建直接缓冲区    public static ByteBuffer allocate(int capacity);创建直接缓冲区    public abstract byte get();从当前位置position上get，get之后，position会自动+1    public abstract byte get(int index);从绝对位置get    public abstract ByteBuffer put(byte b);从当前位置上put，put后，position+1    public abstract ByteBuffer put(int index,byte b);从绝对位置上put*/</span></code></pre><p>通道(Channel)</p><p>通道类似于流，但其能够同时进行读写，而流只能读或者写；通道可以实现异步读写数据；通道可以从缓冲区读数据，也可以在缓冲区写数据</p><p>Channel是一个接口，常用的实现类有：FileChannel(文件的数据读写)、DatagramChannel()、ServletSocketChannel()和SocketChannel()</p><p>FileChannel类：</p><p>public int read(Buffer dst)从通道读取数据并放到缓冲区</p><p>public int write(ByteBuffer src) 把缓冲区的数据写到通道</p><p>public long transferFrom(ReadableByteChannel src,long position,long count);从目标通道复制数据到当前通道</p><p>public long transferTo(long position,long count,WriteableByteChannel target);把数据从当前通道复制给目标通道</p><p>记录linux的一个命令</p><blockquote><p>strace -ff -o out  /usr/java/jdk1.8.0_181-amd64/bin/java TestOldSocket</p></blockquote><p>Selector(多路复用器)：Selector能够检测多个注册的通道上是否有事件发生，可以同时并发处理多个客户端连接</p><p>Selector类：其子类SelectorImpl，selector与线程相关。</p><p>客户端连接后ServerSocketChannel会有SocketChannel，一个Selector可以注册多个SocketChannel，注册后返回SelectorKey，监听select()有事件发生时，通过SelectorKey能够通过方法channel()反向获取事件发生的channel,</p><p>SelectionKey API：</p><blockquote><p>public static final int OP_READ = 1;<br>public static final int OP_WRITE = 4;<br>public static final int OP_CONNECT = 8;<br>public static final int OP_ACCEPT = 16;</p></blockquote><p>ServletSocketChannel API：</p><p>服务器端监听客户端socket连接</p><blockquote><p>open()；得到一个ServlerSocketChannel通道</p><p>bind(SocketAddress local);设置服务器端口号</p><p>configBlocking(boolean block)；设置阻塞或非阻塞</p><p>accept();接受一个连接，返回代表这个连接的通道对象</p><p>register();注册一个选择器并设置监听事件。</p></blockquote><p>SocketChannel API</p><p>网络IO通道，具体负责进行读写操作，NIO把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。</p><p>群聊系统：</p><blockquote><p>需求：实现一个服务器和客户端之间的数据简单通讯，实现多人群聊。</p><p>服务器端可以监测用户上线，离线，并实现消息转发功能</p></blockquote><p>零拷贝(没有Cpu参与的拷贝)：</p><p>java中常用的零拷贝有mmap(内存映射)和sendFile。</p><p>java AIO（异步不阻塞的IO）常用的两种模式Readctor和Proactor</p><p>java中的NIO是Reactor模式，有效的请求才能够启动线程，适用于连接数较多且连接时间较长的应用。</p><table><thead><tr><th></th><th>BIO</th><th>NIO</th><th>AIO</th></tr></thead><tbody><tr><td>io模型</td><td>同步阻塞</td><td>同步非阻塞(多路复用)</td><td>异步非阻塞</td></tr><tr><td>编程难度</td><td>简单</td><td>复杂</td><td>复杂</td></tr><tr><td>可靠性</td><td>差</td><td>好</td><td>好</td></tr><tr><td>吞吐量</td><td>低</td><td>高</td><td>高</td></tr></tbody></table><p>Netty：异步的基于时间驱动的网络应用框架，可以快速开发高性能、高可靠的网络IO程序</p><p>原生的NIO存在的问题：API较为复杂，需要熟悉Selector、ServerSocketChannel、SocketChannel、ByteBuffer等，需要熟悉多线程编程以及网络编程。</p><p>优点：高性能、高吞吐量，延迟更低，减少资源消耗，最小化不必要的内存复制</p><p>Reactor解决传统IO的问题：Reactor称之为反应器模式、分发者模式、通知者模式</p><p>1.基于I/O复用模型，多了连接公用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个链接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始处理业务</p><p>2.基于线程池复用线程资源，不必为每个连接创建线程，将连接完成后的业务处理任务分配给其他线程进行处理，一个线程可以处理多个连接的业务。</p><p>Reactor是将客户端的多个请求交给服务处理器模式（ServiceHandler）又称事件驱动，服务器端程序处理传入的请求并将这些请求同步分派到响应的处理线程。</p><p>核心组成：Rector和Handlers</p><p>Rector在一个单独的线程，用于监听和分发时间</p><p>Handlers是一个事件处理器，用来在线程池中获取线程来处理事件</p><p>模式一:单Reactor单线程(一个线程能够处理多个客户端的消息)</p><p><strong>Reactor里有：Selector和dispatch</strong></p><p>模式二：单Reactor多线程</p><p>Reactor对象通过selector监控客户端请求事件，通过dispatcher进行分发，如果建立连接请求，则Acceptor通过accept处理连接请求，然后创建一个Handler对象，处理完连接后的各种事件。如果不是连接请求，reactor将分发调用连接对象的handler来处理，handler负责响应时间不进行处理，通过read读取数据后，将其发送给后面的worker线程池的某个线程处理，worker线程会分配独立线程完成业务并将结果返回给handler，handler收到响应通过send方法将结果进行返回。</p><p>模式三：主从Reactor多线程</p><p>Reactor主线程MainReactor对象通过select监听连接事件，通过Acceptor处理客户端的连接，将其他的数据请求分给SubReactor进行处理，SubReactor将连接的客户端加入一个队列，并创建handler进行各种事件处理，handler通过read读取数据，分发给后面的worker线程处理。</p><p>Netty模型(基于主从Reator模型)</p><p>BossGroup线程维护Selector，只关注Accept；当接收到Accept事件时，获取对应的Socketchannel，封装成NIOScoketChannel并注册到Worker的selector中，并维护</p><p><strong>Boss Group和WorkerGroup类型都是NioEventGroup</strong>，这是一个事件循环组，每一个事件循环都是一个NIOEventLoop，每个NioEventLoop都有一个Selector，用于监听绑定在其上的socket的网络通讯。Boss专门负责接收客户端的连接，Worker专门负责网络读写操作。</p><p>Boss  NioEventLoop循环的步骤有三步：</p><p>1.轮询accept事件</p><p>2.处理accept事件，与客户端建立连接，生成NioSocketChannel，并将其注册到某个worker NioEventLoop上的selector</p><p>3.处理任务队列的任务，即runAllTasks</p><p>Worker NioEventLoop循环执行的步骤：</p><p>1.轮询read，write事件</p><p>2.处理IO事件，即read，write事件，在对应NioSocketChannel处理</p><p>3.处理任务队列的任务，即runAllTasks</p><p>任务队列的三种使用场景：用户程序自定义普通任务、用户自定义定时任务、非当前Reactor线程调用Channel的各种方法。</p><blockquote><p>NioEventLoopGroup下包含多个NioEventLoop</p><p>每个NioEventLoop中包含有一个Selector，一个taskQueue</p><p>每个NioEventLoop的Selector上可以注册监听多个NioChannel</p><p>每个NioChannel只会绑定在唯一的NioEventLoop上</p><p>每个NioChannel都绑定有一个自己的ChannelPipline</p></blockquote><p>Future表示异步的执行结果，可以通过它提供的方法来检测是否完成。ChannelFuture是一个接口，可以对其添加监听器，当事件发生时监听器会得到通知。</p><p>Bootstrap、ServerBootStrap，一个netty应用通常是由bootstrap开始主要作用是配置整个Netty程序。</p><p>Future、ChannelFuture通过该类或接口实现监听事件</p><p>Channel：Netty的网络组建，能够用于执行网络I/O操作，能够获取网络连接通道状态、网络连接配置等信息。</p><p>NioSocketChannel，异步的客户端TCP Socket连接</p><p>NioServerSocketChannel，异步服务器端TCP Socket连接</p><p>NioDatagramChannel异步UDP连接</p><p>NioSctpChannel，异步的客户端sctp连接</p><p>NioSctpServerChannel，异步的Sctp服务器端连接</p><p>Selector：基于Selector对象实现I/O多路复用，通过Selector一个线程可以监听多个连接的Channel事件。</p><p>ChannelHandler是一个接口，处理O/I事件或拦截I/O操作。</p><blockquote><p>//通道就绪状态事件</p><p>channelActive(ChannelHandlerContext ctx)</p><p>//通道数据读取事件</p><p>channelRead(ChannelHandlerContext ctx, Object msg)</p><p>//异常处理事件</p><p>exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</p></blockquote><p>PipeLine和ChannelPipeline是一个handler集合，一个Piprline中有多个handler，一个Channel包含了一个ChannelPipeline，而ChannelPineline又维护了一个由ChannelHandlerContext组成的双向链表，并且每个ChannelHandlerContext中又关联着一个ChannelHandler。</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网通信</title>
      <link href="/2020/04/26/tcp-xie-yi-ma-shi-bing-jiang-jie/"/>
      <url>/2020/04/26/tcp-xie-yi-ma-shi-bing-jiang-jie/</url>
      
        <content type="html"><![CDATA[<p>互联网通信(后期自己对内容进行完善)</p><p>1.分层（主要是为了解耦）</p><pre class=" language-shell"><code class="language-shell">exec 9<> /dev/tcp/www.baidu.com/80#9表示文件描述符#<>：表示输入输出流#exec#/dev/tcp/www.baidu.com/80  在linux表示文件，linux一切皆文件（摄像头、显示器的等）echo -e "GET / HTTP/1.0\n" 1>& 9##  1>&  指令表示输出指向一个文件描述符cat 0<& 9</code></pre><p>传输控制层（UDP、TCP）</p><p>TCP面向<strong>连接的、可靠的</strong>传输协议（三次握手）</p><p>1.客户端发送SYN给服务器请求连接，其中约定数据包大小</p><p>2.服务器给客户端发送syn+ack(该ack=客户端seq+1)</p><p>3.客户端发送ack给服务器进行确认</p><p>当传输层建立连接后双方的操作系统开辟资源</p><p>为什么两次连接不可行？</p><blockquote><p>对于两次连接时：</p><p>客户端A给服务器B发送请求，由于网络时延导致A发送的消息在网络中过久，A重新发送数据给服务器B，B与A完成正常的数据交换后，延时的数据到达服务器，B等待A连接，A已经拿到资源，不回复服务器B会导致B一致处于监听状态。</p></blockquote><p>四次挥手</p><p>1.客户端发送fin给服务器请求连接，进入FIN_WAIT_1状态</p><p>2.服务器给客户端发送ack，Server进入LAST+ACK状态(不确认是否断开，只表示接收到消息)</p><p>3.服务器给客户端发送fin,Server进入LAST_ACK状态（服务器确认断开）</p><p>3.客户端发送ack给服务器进行确认，客户端进入TIME_WAIT状态，Server进入CLOSED状态</p><blockquote><p>#linux下抓包</p><p>yum  install  tcpdump</p><p>tcpdump   -nn  -i  eth0   port  80</p><p>curl  url     —&gt; 例如  curl   <a href="http://www.baidu.com:80" target="_blank" rel="noopener">www.baidu.com:80</a></p></blockquote><p>网络层（ip）</p><p>ip地址点分字节，ip地址与子网掩码进行按位与操作得到网络号（网关）</p><p>linux路由表：route -n</p><p>arp协议，主机获取网关的mac的地址进行广播，网关将自己的mac地址交给主机，主机进行数据与ip地址封装</p><blockquote><p>arp -d  删除的路由中的记录 &amp;&amp; curl url</p><p>tcpdump -nn -i eth0 port 80 or arp</p></blockquote><p>Http协议的一些基本概念：</p><p>HTTP超文本传输协议是一个基于请求与相应模式的，无状态的，应用层协议，常基于TCP的连接</p><p>http协议内容：请求行、请求头、空行、数据</p><p>客户端请求消息：请求方法，URL，协议版本为请求行，请求头部，头部字段名，值，请求数据</p><p>服务器端响应消息：状态行，消息报头，空行，响应正文</p><blockquote><p>URI：统一资源标识符    访问资源的命名机制，存放资源的主机名、资源的名称由路径决定</p><p> URL：统一资源定位符      URN：统一资源命名</p></blockquote><p>Http：的方法有：</p><blockquote><p>1.GET为获取资源数据get方法用于请求指定的页面信息，并返回请求消息的主体</p><p>2.POST为提交资源数据post方法用于向指定的资源提交数据</p><p>3.PUT为更新资源数据</p><p>4.DELETE为删除资源数据</p><p>5.HEAD为读取资源的元数据</p><p>6.OPTIONS为读取资源多支持的所有请求方法</p><p>7.TRACE为回显服务器收到额请求</p><p>8.CONNECT为保留将来使用</p></blockquote><p>多个socket对应一个进程：多路复用器：EPOLL</p><p>netty需要了解线程池相关知识</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bos项目的简单记录</title>
      <link href="/2020/04/22/bos-xiang-mu-ji-lu/"/>
      <url>/2020/04/22/bos-xiang-mu-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>BOS项目</p><p>1.数据库环境搭建：</p><blockquote><ol><li><p>net start mysql</p></li><li><p>mysql -uroot -p123</p></li><li><p>create database bos32 character set utf-8;</p></li><li><p>use bos32;</p><p>—-查看所有的用户，先使用root用户登录</p><p>select user,host from mysql.user;</p><p>—-创建当前数据库的专享用户xing</p></li><li><p>create user xing identified by ‘root123’;</p></li><li><p>grant all on bos32.* to xing;</p><p>—-重新登录</p><p>mysql -uxing -proot123</p></li></ol></blockquote><p>2.搭建项目环境</p><p>创建一个父工程bos-parent，maven项目，是一个pom文件格式</p><p>创建子工程bos-utils，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-domain，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-dao，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-service，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-web，是一个maven module，是一个war文件格式</p><p>对于web模块eclipse下会有红色的叉，这是由于创建的项目缺少WEB-INF文件，web模块右键，使用java EE  Tools工具，Generator Deployment…构建项目目录。</p><p>一个包裹其他模块的父工程是一个pom文件格式，其中有组件和模块的配置信息：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 通过属性定义指定jar的版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate.version</span><span class="token punctuation">></span></span>5.0.7.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts2.version</span><span class="token punctuation">></span></span>2.3.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts2.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro.version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- struts2 begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 排除传递的依赖 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-spring-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-convention-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- struts2 end --></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate end --></span>        <span class="token comment" spellcheck="true">&lt;!-- log start --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log end --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 加入servlet和jsp的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入pinyin4J的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.belerweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pinyin4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入json-lib的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入c3p0jar包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入ehcache的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入shiro框架的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入MySQL数据库驱动依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 引入tomcat插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/bos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-domain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-utils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>3.配置</p><p>第一步配置web.xml文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 配置过滤器，解决hibernate懒加载 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>openSessionInView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>openSessionInView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通过上下文参数指定spring文件位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置spring框架的监听器 默认寻找WebInfo下的spring配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置struts的过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>第二步配置struts.xml文件(文件存放在web模块的main中的resource目录下)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE struts PUBLIC    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"    "http://struts.apache.org/dtds/struts-2.3.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出信息，false输出struts的信息少 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constant</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts.devMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在struts-spring的整合包中已经进行的相关的设置        &lt;constant name="struts.objectFactory" value="spring"/>     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basicstruts2<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 需要进行权限控制的页面访问  没有指定默认执行struts中的ActionSupport中的execute方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_*_*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dispatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/WEB-INF/pages/{1}/{2}.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts</span><span class="token punctuation">></span></span></code></pre><p>第三步配置log4j.properties日志文件(一般的项目在src文件下，maven继承的项目放在web模块的main中resource目录下)</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">### direct log messages to stdout </span><span class="token comment" spellcheck="true">### 使用控制台记录日志信息，因此不会打印到文件中</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span><span class="token comment" spellcheck="true">### direct messages to file mylog.log ###</span><span class="token attr-name">log4j.appender.file</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.FileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">d:\\mylog.log</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span><span class="token comment" spellcheck="true">### set log levels - for more verbose logging change 'info' to 'debug' ###</span><span class="token comment" spellcheck="true">### fatal error warn info debug trace</span><span class="token comment" spellcheck="true">### (六个日志等级：致命错误、普通错误、警告、普通信息、调试信息、堆栈信息)</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">off, stdout(第一个参数设置日志的级别，off为关闭日志输出，第二个参数为日志的输出位置stdout输出到控制台，file输出到指定的文件中)</span></code></pre><p>第四步配置applicationContext.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context                        http://www.springframework.org/schema/context/spring-context.xsd                        http://www.springframework.org/schema/aop                        http://www.springframework.org/schema/aop/spring-aop.xsd                        http://www.springframework.org/schema/tx                         http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上面引入springxml中的约束，有context、aop、tx等，配置数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverUrl}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置LocalSessionFactionBean,Spring提供的用于整合Hibernate的工厂bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate5.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--嵌套配置时需要注意参数的设置是name和ref属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernateProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.dialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>org.hibernate.dialect.MySQL5Dialect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.hbm2ddl.auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.show_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.format_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置hibernate的映射文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappingLocations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath:com/itxing/bos/domain/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate5.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  使用注解开发，无需配置dao、service以及切面、切点等--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.bos<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 支持sprig注解        例如：@Controller、@Service、@Repository、        @Component、@AutoWired、@Resource     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>第五步创建一个项目的目录结构</p><p>​     每一个模块下建立相应的包文件结构，web层下一般放置拦截器、过滤器、监听器等；service层一般是接口和实现类；dao层是接口与实现类；domain放置的是POJO文件。</p><p>第六步将项目使用的资源文件复制到项目中</p><p>  复制静态页面到web目录下的webapp目录下</p><p>将项目进行关联,在web项目上点击run选择maven   install命令将各个模块组建起来，点击run on service在服务器上运行访问：<a href="http://localhost:8080/bos-web/login.jsp" target="_blank" rel="noopener">http://localhost:8080/bos-web/login.jsp</a> ,查看是否启动</p><p>使用svn管理代码：</p><p>1.创建一个新的文件夹作文仓库管理的位置，点击右键在此创建版本库。</p><p>2.更改conf文件夹下的svnserve.conf</p><pre class=" language-conf"><code class="language-conf">anon-access = noneauth-access = writepassword-db = passwdauthz-db = authz</code></pre><p>3.更改conf文件夹下的passwd文件(创建用户)</p><pre class=" language-conf"><code class="language-conf">[users]# harry = harryssecret# sally = sallyssecretxing = root123</code></pre><p>4.更改conf文件夹下的authz文件</p><pre class=" language-conf"><code class="language-conf">[aliases][groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&joe### 定义组，向组总添加人员信息、添加人员的权限信息，添加组的权限信息developgroup = xing[/]xing = rw@developgroup = rw</code></pre><p>在该仓库外的文件夹下进入cmd启动服务，使用命令</p><blockquote><p>svnserve  -d -r   当前的仓库路径</p></blockquote><p>如果在cmd命令行之下不能svn命令，先进行svn的修复工作，在对其进行svn命令的检查svn info</p><p>创建一个配置文件每次启动时点击.bat文件即可，使用svn对代码进行管理</p><p>前端页面使用jquery easyui</p><p>引入静态资源文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../themes/default/easyui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../themes/icon.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../demo.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../jquery-1.8.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../jquery.easyui.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>前端的编写</p><p>1.layout页面布局</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用div描述每个区域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星制作管理系统<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 北部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统菜单<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>西部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>东部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>南部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>2.accordion折叠面板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星管理系统2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统设置<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 制作accordion折叠面板            使用div表示每个面板             --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-accordion<span class="token punctuation">"</span></span> <span class="token attr-name">dataoptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>3.tabs选项卡面板</p><pre class=" language-html"><code class="language-html">s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星管理系统3.0<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统设置<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-accorfion<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板一<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-save<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板二<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-tabs<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 制作一个tabs选项卡面板 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板一<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closable:true<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板二<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>ztree插件</p><p>引入ztree的文件</p><p>使用标准json构建ztree</p><p>使用普通的json构建ztree</p><p>使用ajax异步请求获取数据</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle学习</title>
      <link href="/2020/04/15/guan-xi-xing-shu-ju-ku-zhi-oracle/"/>
      <url>/2020/04/15/guan-xi-xing-shu-ju-ku-zhi-oracle/</url>
      
        <content type="html"><![CDATA[<p>关系型数据库之Oracle</p><p>Oracle数据库是一个数据管理系统（RDBMS），提供开放的，全面的，近乎完整的信息管理，一个Oracle数据库由多个实例组成，实例操作数据库，任意时刻一个实例只能与一个数据库关联，一个数据库上只有一个实例对其进行操作。</p><p>Oracle数据库：是硬件上存放数据库的文件，文件组织在一起成为一个逻辑整体，成为Oracle数据库。</p><p>Oracle实例：位于物理内存里的数据结构，有一个共享的内存池和多个后台进程所组成，共享的内存池可以被所有进程访问。用户需通过实例获取数据库的数据，不能直接读取硬盘的信息。</p><p>表空间(users)与数据文件：表空间由多个数据文件组成；数据文件只能属于一个表空间。表空间为逻辑概念，数据文件为物理概念。</p><p>段存在于表空间中，段是区的集合；区是数据块的集合，数据块被映射到磁盘块</p><p>oracle命令练习</p><pre class=" language-oracle"><code class="language-oracle">----使用用户名为scott密码为tiger登录oracle数据库sqlplus scoitt/tiger----查看当前用户show user----查看表select * from tab;----降序排列表desc 表名----显示行大小show linesize----设置行大小set linesize----设置列宽col 列名 for a8(表示字符长度为8)----显示行大小col 列名 for 9999(表示设置数字为4位)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService学习</title>
      <link href="/2020/04/13/webservice-xue-xi/"/>
      <url>/2020/04/13/webservice-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="WebService学习"><a href="#WebService学习" class="headerlink" title="WebService学习"></a>WebService学习</h4><p><strong>注：</strong>(不会maven的可以先去学习maven配置和简单的命令)</p><h5 id="Webservice介绍"><a href="#Webservice介绍" class="headerlink" title="Webservice介绍"></a>Webservice介绍</h5><h5 id="apacheCXF"><a href="#apacheCXF" class="headerlink" title="apacheCXF"></a>apacheCXF</h5><h5 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h5><p>1.pox文件引用：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--项目依赖--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jaxws规范包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0shiyong.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jetty包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--插件的添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>2.编写服务器端(使用@WebService注解进行标注其是一个服务)</p><p>编写简单的服务接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * 使用注解@WebService    * 对外发布服务接口    * */</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口的实现类编写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">",Welcome to xingxinghome!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.在测试模块下测试服务端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.访问设置的地址显示如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultcode</span><span class="token punctuation">></span></span>soap:Server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultcode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultstring</span><span class="token punctuation">></span></span>No binding operation info while invoking unknown method with params unknown.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultstring</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span></code></pre><p>在其访问地址加上?wsdl就会显示出wsdl展示</p><blockquote><p><a href="http://localhost:8000/ws/hello?wsdl" target="_blank" rel="noopener">http://localhost:8000/ws/hello?wsdl</a></p></blockquote><p>显示结果如下：</p><p><img src="/medias/images/image-20200325092919279.png" alt="image-20200325092919279"></p><p>3.客户端的编写</p><p>客户端需要知道服务端是什么样子的接口，在客户端够构建与服务端一样的接口，不需要实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试连接服务端：(测试时，服务端需要启动)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//服务接口访问的地址</span>        <span class="token comment" spellcheck="true">//创建cxf代理工厂</span>        JaxWsProxyFactoryBean factory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">JaxWsProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置远程服务器端的地址</span>        factory<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置接口类型</span>        factory<span class="token punctuation">.</span><span class="token function">setServiceClass</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对接口生成代理对象$Proxy34jdk代理，$CGLIB123使用cglib代理</span>        HelloService helloService <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程访问服务端方法</span>        String content <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"jet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.控制台使用日志拦截器来进行soap请求的拦截</p><p>在发布服务的时候添加代码：首先在main路径下的resource文件夹中添加log4j的配置文件</p><pre class=" language-text"><code class="language-text"># Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLElog4j.rootCategory=INFO, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.Threshold=INFOlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout#log4j.appender.CONSOLE.layout.ConversionPattern=- %m%nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601}%-6r[%15.15t]&-5p %30.30c %x - %m\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppenderlog4j.appender.LOGFILE.File=axis.loglog4j.appender.LOGFILE.Append=truelog4j.appender.LOGFILE.Threshold=INFOlog4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加日志输入，输出连接器，观察soap请求，soap响应内容</span>        factor<span class="token punctuation">.</span><span class="token function">getInInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">.</span><span class="token function">getOutInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingOutInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>控制台有信息：其中有服务的名称，服务的参数，soap封装格式</p><blockquote><p>Payload: &lt;soap:Envelope xmlns:soap=”<a href="http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;" target="_blank" rel="noopener">http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</a><a href="soap:Body">soap:Body</a>&lt;ns2:sayHello xmlns:ns2=”<a href="http://service.itxing.com/&quot;&gt;" target="_blank" rel="noopener">http://service.itxing.com/&quot;&gt;</a><arg0>jet</arg0></ns2:sayHello></soap:Body></soap:Envelope></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java源码</title>
      <link href="/2020/04/13/java-yuan-ma-bi-ji/"/>
      <url>/2020/04/13/java-yuan-ma-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>java源码笔记</p><h5 id="注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的"><a href="#注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的" class="headerlink" title="注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的"></a>注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的</h5><p>1.ArrayList</p><blockquote><p>ArrayList是由长度可变的数组组成的，允许null值，与Vector相类似，<strong>该类的方法不同步</strong><br> size、empty、get、set、iterator等为常数时间，add方法是一个O(n)的时间复杂度<br> 与linkedList相比较常数因子比较低，有一个初始的容量，列表元素至少和数组一样，<br> 可自动扩容grow()</p></blockquote><p>2.继承与实现关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始大小10，用户可以手动指定</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//底层使用Object数组实现</span>    <span class="token comment" spellcheck="true">//底层的扩容函数，扩容为原来的1.5倍</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新数组的长度=旧数组的长度+旧数组长度右移一位（相当于除以2）</span>        <span class="token comment" spellcheck="true">//新数组长度是旧数组的1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM虚拟机学习</title>
      <link href="/2020/04/10/jvm-xu-ni-ji-xue-xi/"/>
      <url>/2020/04/10/jvm-xu-ni-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>关于该学习笔记参考网上的jvm课程以及一些文章的讲解</p><p><strong>JVM结构：</strong></p><p><img src="/medias/images/jvm.png" alt="JVM运行时数据区"></p><p>局部变量表存放了编译期可知的基本数据类型、对象引用和returnAddress类型，其所需的内存空间在编译期间完成分配，方法运行期间不会改变局部变量表的大小。</p><p>除了程序计数器之外，内存区域可能都会产生OutOfMemoryError异常，还可能抛出该异常的有直接内存，例如N I/O是一种基于通道和缓冲区的I/O方式，可以使用Native区域直接分配堆外内存。</p><p><strong>对象的创建：</strong></p><p>当遇到new对象时，虚拟机首先检查该指令的参数是否能够在常量池中定位到一个类的符号引用，并检查类的符号引用的类是否被加载、解析和初始化。</p><p>检查后为新生的对象分配大小固定的堆空间，分配的方式有“指针碰撞”和“空闲列表”，依据垃圾回收器是否带有压缩整理功能决定。例如：Serial和ParNew采用指针碰撞；CMS使用Mark-Sweep算法的收集器采用空闲列表。</p><p>频繁的对象创建导致内存空间分配出错，虚拟机采用两种解决方法，第一种是CAS失败重试的方式保证更新操作的原子性；另一种是把内存分存，又称本地线程分配缓冲(Thread Local Allocation Buffer,TLAB)为每个线程分配内存，此时的对象是一个半初始化的值，随后调用<init>方法，产生真正可用的对象</p><p><strong>对象的布局：</strong></p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%83%E5%B1%80.png" alt="对象的布局信息"></p><p><strong>Mark Word</strong>用于存储对象自身的运行时数据，有<strong>哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳。</strong></p><p>对象访问定位：</p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D.png" alt="对象使用句柄访问"></p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E5%AE%9A%E4%BD%8D2.png" alt="对象直接指针访问"></p><p>两种访问方式的特点</p><table><thead><tr><th align="left">使用句柄访问</th><th>使用直接指针访问</th></tr></thead><tbody><tr><td align="left">好处是reference中存储的是稳定的句柄地址，在对象移动时只改变句柄中实力数据指针，reference本身无需修改，垃圾收集器对象移动较多。</td><td>速度更快，节省了一次定位的时间开销，对象的访问在java中十分的频繁，Sun Hotspot使用该方式实现</td></tr></tbody></table><p><strong>JMM java的内存模型：</strong></p><p><img src="/medias/images/jmm.png" alt="JMM内存模型"></p><p>1、  Java的并发采用“共享内存”模型，线程之间通过读写内存的公共状态进行通讯。多个线程之间是不能通过直接传递数据交互的，它们之间交互只能通过共享变量实现。</p><p>2、 主要目的是定义程序中各个变量的访问规则。</p><p>3、 Java内存模型规定所有变量都存储在主内存中，每个线程还有自己的工作内存。</p><p>（1）  线程的工作内存中保存了被该线程使用到的变量的拷贝（从主内存中拷贝过来），线程对变量的所有操作都必须在工作内存中执行，而不能直接访问主内存中的变量。</p><p>（2） 不同线程之间无法直接访问对方工作内存的变量，线程间变量值的传递都要通过主内存来完成。</p><p>（3）主内存主要对应Java堆中实例数据部分。工作内存对应于虚拟机栈中部分区域。</p><p>4、Java线程之间的通信由内存模型JMM（Java Memory  Model）控制。</p><p>（1）JMM决定一个线程对变量的写入何时对另一个线程可见。</p><p>（2）线程之间共享变量存储在主内存中 </p><p>（3）每个线程有一个私有的本地内存，里面存储了读/写共享变量的副本。</p><p>（4）JMM通过控制每个线程的本地内存之间的交互，来为程序员提供内存可见性保证。</p><p>5、可见性、有序性(volatile)：</p><p>（1）当一个共享变量在多个本地内存中有副本时，如果一个本地内存修改了该变量的副本，其他变量应该能够看到修改后的值，此为可见性。</p><p>（2）保证线程的有序执行，这个为有序性。（保证线程安全） </p><p>6、内存间交互操作：</p><p>（1）lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</p><p>（2）unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p><p>（3）read（读取）：作用于主内存变量，把主内存的一个变量读取到工作内存中。</p><p>（4）load（载入）：作用于工作内存，把read操作读取到工作内存的变量载入到工作内存的变量副本中 </p><p>（5）use（使用）：作用于工作内存的变量，把工作内存中的变量值传递给一个执行引擎。（6）assign（赋值）：作用于工作内存的变量。把执行引擎接收到的值赋值给工作内存的变量。</p><p>（7）store（存储）：把工作内存的变量的值传递给主内存 </p><p>（8）write（写入）：把store操作的值入到主内存的变量中 </p><p>6.1、注意：（1）不允许read、load、store、write操作之一单独出现</p><p> （2）不允许一个线程丢弃assgin操作 </p><p>（3）不允许一个线程不经过assgin操作，就把工作内存中的值同步到主内存中 </p><p>（4）一个新的变量只能在主内存中生成 </p><p>（5）一个变量同一时刻只允许一条线程对其进行lock操作。但lock操作可以被同一条线程执行多次，只有执行相同次数的unlock操作，变量才会解锁 </p><p>（6）如果对一个变量进行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或者assgin操作初始化变量的值。</p><p>（7）如果一个变量没有被锁定，不允许对其执行unlock操作，也不允许unlock一个被其他线程锁定的变量 </p><p>（8）对一个变量执行unlock操作之前，需要将该变量同步回主内存中</p><p><strong>堆的内存划分：</strong></p><p><img src="/medias/images/heap.png" alt="java堆的内存结构"></p><p>Java堆的内存划分分别为年轻代、Old  Memory（老年代）、Perm（永久代）。其中在Jdk1.8中，永久代被移除，使用MetaSpace代替。</p><p>1、新生代：（1）使用复制清除算法（Copinng算法），原因是年轻代每次GC都要回收大部分对象。新生代里面分成一份较大的Eden空间和两份较小的Survivor空间。每次只使用Eden和其中一块Survivor空间，然后垃圾回收的时候，把存活对象放到未使用的Survivor（划分出from、to）空间中，清空Eden和刚才使用过的Survivor空间。（2）分为Eden、Survivor From、Survivor To，比例默认为8：1：1 （3）内存不足时发生Minor GC </p><p>2、老年代：（1）采用标记-整理算法（mark-compact），原因是老年代每次GC只会回收少部分对象。</p><p>3、Perm：用来存储类的元数据，也就是方法区。（1）Perm的废除：在jdk1.8中，Perm被替换成MetaSpace，<strong>MetaSpace存放在本地内存中</strong>。原因是永久代进场内存不够用，或者发生内存泄漏。（2）MetaSpace（元空间）：元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。</p><p>垃圾回收之前首先判断该对象能否被回收</p><p><strong>判断对象是否要回收的方法：可达性分析法</strong> </p><p>1、 可达性分析法：通过一系列“GC Roots”对象作为起点进行搜索，如果在“GC  Roots”和一个对象之间没有可达路径，则称该对象是不可达的。不可达对象不一定会成为可回收对象。进入DEAD状态的线程还可以恢复，GC不会回收它的内存。（把一些对象当做root对象，JVM认为root对象是不可回收的，并且root对象引用的对象也是不可回收的）</p><p> 2、 以下对象会被认为是<strong>root对象</strong>：</p><blockquote><p>JVM stack;native method stack;run-time constant pool;</p><p>static references in methodarea;Clazz</p></blockquote><p>（1） 虚拟机栈（栈帧中本地变量表）中引用的对象 （2） 方法区中静态属性引用的对象 （3） 方法区中常量引用的对象 （4） 本地方法栈中Native方法引用的对象 </p><p>对象的存活都与引用相关，java中的引用分为强引用、弱引用、软引用、虚引用。</p><p>强引用是程序代码中普遍的存在，只要强引用还在该对象不会被回收。</p><p>软引用是描述一些还有用但并非必需的对象在系统内存溢出前将会将这些对象列入垃圾回收的范围，SoftReference类实现软引用。（常用做缓存）</p><p>弱引用也用来描述非必需对象，被弱引用关联的对象只能生存到下一次垃圾收集发生之前（放置内存泄露）</p><p>虚引用最弱的引用不能够获取对象实例，该引用关联的对象被回收时收到一个系统的通知（管理堆外内存）</p><p>3、 对象被判定可被回收，需要经历两个阶段：（1） 第一个阶段是可达性分析，分析该对象是否可达 （2）  第二个阶段是当<strong>对象没有重写finalize()方法</strong>或者<strong>finalize()方法已经被调用过</strong>，虚拟机认为该对象不可以被救活，因此回收该对象。（finalize()方法在垃圾回收中的作用是，给该对象一次救活的机会） </p><p>4、 方法区中的垃圾回收：（1） 常量池中一些常量、符号引用没有被引用，则会被清理出常量池 （2） 无用的类：被判定为无用的类，会被清理出方法区。判定方法如下：A、 该类的所有实例被回收 B、 加载该类的ClassLoader被回收 C、 该类的Class对象没有被引用 (无法通过反射访问该类反射)</p><p>5、 finalize(): （1） GC垃圾回收要回收一个对象的时候，调用该对象的finalize()方法。然后在下一次垃圾回收的时候，才去回收这个对象的内存。（2）  可以在该方法里面，指定一些对象在释放前必须执行的操作。</p><p>常见的垃圾回收算法：</p><p><strong>1、Mark-Sweep（标记-清除算法）：</strong>（1）思想：标记清除算法分为两个阶段，标记阶段和清除阶段。标记阶段任务是标记出所有需要回收的对象，清除阶段就是清除被标记对象的空间。（2）优缺点：实现简单，容易产生内存碎片 </p><p><strong>2、Copying（复制清除算法）：</strong>（1）思想：将可用内存划分为大小相等的两块，每次只使用其中的一块。当进行垃圾回收的时候了，把其中存活对象全部复制到另外一块中，然后把已使用的内存空间一次清空掉。（2）优缺点：不容易产生内存碎片；可用内存空间少；存活对象多的话，效率低下。</p><p><strong>3、Mark-Compact（标记-整理算法）：</strong>（1）思想：先标记存活对象，然后把存活对象向一边移动，然后清理掉端边界以外的内存。（2）优缺点：不容易产生内存碎片；内存利用率高；存活对象多并且分散的时候，移动次数多，效率低下</p><p><strong>4.分代垃圾回收算法：</strong></p><p>因为新生代每次垃圾回收都要回收大部分对象，所以新生代采用Copying算法。（1）新生代里面分成一份较大的Eden空间和两份较小的Survivor空间。每次只使用Eden和其中一块Survivor空间，然后垃圾回收的时候，把存活对象放到未使用的Survivor（划分出from、to）空间中，清空Eden和刚才使用过的Survivor空间。（2） 由于老年代每次只回收少量的对象，因此采用mark-compact算法。（3） 在堆区外有一个永久代。对永久代的回收主要是无效的类和常量 GC使用时对程序的影响？垃圾回收会影响程序的性能，Java虚拟机必须要追踪运行程序中的有用对象，然后释放没用对象，这个过程消耗处理器时间。</p><p>几种不同的垃圾回收类型：</p><p>（1）Minor GC：从年轻代（包括Eden、Survivor区）回收内存。</p><p>（2）Major GC：清理整个老年代，当eden区内存不足时触发。</p><p>（3）Full GC：清理整个堆空间，包括年轻代和老年代。当老年代内存不足时触发</p><p>常用的垃圾收集器</p><p><strong>GC垃圾回收：</strong></p><p><img src="/medias/images/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="垃圾收集器"></p><p>内存分配和回收策略</p><p><strong>内存管理</strong>在于给<strong>对象分配内存</strong>和<strong>回收分配给对象的内存</strong></p><p>对象优先分配在Eden区域，大的对象直接进入老年代，例如数组对象；</p><p>长期存活的对象进入老年代，虚拟机给每个对象定义了一个对象年龄计数器（默认大于15岁进入老年代）。动态对象年龄判定，survivor区中相同年龄的所有的对象大于survivor区域的一半，比该年龄大的对象进入老年代；</p><p>空间分配担保MinorGC发生之前，需要确保老年代的最大可用连续空间是否大于新生代对象总空间，大于时直接Minor    GC；不大于的时候需要查看HandlePromotionFailure担保值，可担保时进行Minor GC否则进行Full GC。</p><p>简单的测试题（j++和++j）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输出的结果为10</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的结果为0</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           j <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字节码指令的比较</p><pre class=" language-text"><code class="language-text"> j++字节码(在if内部的指令是先进栈，再改变局部变量表中j的值，栈中的元素值不会受到影响，依旧是0) 0 iconst_0  将int类型数据0入栈 1 istore_1  将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始） 2 iconst_0  将int类型数据0入栈 3 istore_2  将栈顶int类型数值存入第三个局部变量表 4 iload_2    第三个局部变量进栈 5 bipush 10   将一个byte类型的常量值推送至栈顶 7 if_icmpge 21 (+14)  比较栈顶两int型数值大小，当结果大于等于0时跳转到21位置10 iload_1     第二个局部变量进栈11 iinc 1 by 1   指定int型变量增加指定值,局部变量的增加不会改变栈中元素的值，最后会被覆盖14 istore_1    将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始）15 iinc 2 by 1  指定int型变量增加指定值18 goto 4 (-14)  无条件跳转21 getstatic #2 <java/lang/System.out>24 iload_125 invokevirtual #3 <java/io/PrintStream.println>28 return++j字节码(在if内部的指令是先改变局部变量表中j的值，再将局部变量表中的值入栈，栈中元素的值会随着局部变量表的值更改，栈中的元素值不会受到影响，依旧是0)0 iconst_0 将int类型数据0入栈 1 istore_1  将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始） 2 iconst_0  将int类型数据0入栈 3 istore_2  将栈顶int类型数值存入第三个局部变量表 4 iload_2    第三个局部变量进栈 5 bipush 10   将一个byte类型的常量值推送至栈顶 7 if_icmpge 21 (+14)   比较栈顶两int型数值大小，当结果大于等于0时跳转到21位置10 iinc 1 by 1    指定int型变量增加指定值，先增加变量表中的值13 iload_1       第二个局部变量进栈14 istore_1    将栈顶int类型数值存入第二个局部变量表15 iinc 2 by 1   指定int型变量增加指定值18 goto 4 (-14)   无条件跳转21 getstatic #2 <java/lang/System.out>24 iload_125 invokevirtual #3 <java/io/PrintStream.println>28 return</code></pre><p>Class文件结构：</p><p>class文件是以8字节为基础单位的二进制流紧凑的排列在一起，中间无分割符，高于8位字节的数据项以Big-Endian(高位字节地址在最低位、最低位字节地址在最高位)存储。Class文件中只有两种伪数据结构：无符号数(u1、u2、u4、u8)和表(_info)。</p><p><img src="/medias/images/class%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B.png" alt="类的文件结构"></p><p><strong>魔数：</strong>class文件中的头4个字节为魔数，0xCAFEBABE</p><p><strong>主次版本号：</strong>第5，6字节存储的是class文件的版本号，第7,8字节存储的是主版本号。</p><p><strong>常量池：</strong>首先放置u2类型的常量池容量计数值，从1开始计数。常量池最要存放的是字面量(文本字符串，final常量等)和符号引用(类和接口的权限定名、字段的名称和描述符、方法的名称和描述符)</p><p><strong>访问标志：</strong>标识当前的类是Class还是接口；是否定义为Public；是否为abstract类型；如果是类的话，是否声明为final。</p><p><strong>类索引、父类索引、接口索引集合：</strong>由于java是单继承多实现，需要由标识，类索引与父类索引为u2的类型，接口是一组u2类型的数据集合，根据这三个数据项确定类的继承关系。</p><p><strong>字段表集合：</strong>用于描述接口或者类中声明的变量，字段作用域(public;private;protect)、实例变量或类变量(static)、可变性(final)、并发可见性(valitatle)、是否被序列化(transient)、字段数据类型(基本类型、对象、数组)、字段名称.</p><p><strong>方法表集合：</strong>对方法的描述，访问标志(access_flags)、名称索引(nane_index)、描述符索引(descriptor_index)、属性表集合(attributes)。</p><p><strong>属性表集合：</strong>class文件、字段表、方法表都可以携带自己的属性表集合，用于描述某些专有的信息。</p><p><strong>字节码指令：</strong></p><p>字节码的指令类型(后面学习时再完善字节码指令部分)</p><p>加载和存储指令、运算指令、类型转换指令、对象创建与访问指令、操作数栈管理指令、控制转移指令、方法调用和返回指令、异常处理指令、同步指令、公有设计和私有实现</p><p><strong>类加载机制：</strong></p><p>类的生命周期：加载、验证、准备、解析、初始化、使用和卸载，验证、准备、解析三个部分统称为连接（Linking）</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java算法</title>
      <link href="/2020/04/09/suan-fa-si-xiang-ji-lu/"/>
      <url>/2020/04/09/suan-fa-si-xiang-ji-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要的算法刷题以及算法思想记录在csdn中</p></blockquote><p>dijestla算法思想：<br>引入两个集合，<br>closelist和openlist，闭集合用来记录已经求出最短路径的顶点，开集合用阿里记录为求出最短路径的顶点。<br>集合1：记录源节点（A）到各个节点之间的距离；集合2记录节点对应上一级点（父节点）<br>1.将源节点A放入closelist，其余节点放入closelist，A不能到达的节点记为无穷大<br>2.从openlist中选出距离最短的点N，将顶点N加入closelist中，同时从openlist移除N<br>3.重新计算openlist中各个节点到起点A的距离<br>（重新计算openlist中节点的距离，是由于上一步中确定了N是求出最短路径的顶点，从而可以利用N更新其他顶点的距离，）<br>4.重复以上步骤，遍历所有的节点<br>Astar算法：在静态环境中求解最优路径的有效的直接搜索算法，算法采用启发式搜索，A<em>算法通过一个代价函数来确定搜索方向，从起点开始向周围扩展，通过代价函数计算得到周围每个节点的代价值，选择最小代价节点作为下一个扩展点，直到到达目标为止。<br>A</em>算法的代价函数f(n)=g(n)+h(n)<br>常见的估价函数：曼哈顿距离d12=|x1-x2|+|y1-y2|<br>欧式距离：p=sqrt((x2-x1)^2+(y2-y1)^2)</p>]]></content>
      
      
      <categories>
          
          <category> java算法记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java操作excel</title>
      <link href="/2020/04/07/java-cao-zuo-excel/"/>
      <url>/2020/04/07/java-cao-zuo-excel/</url>
      
        <content type="html"><![CDATA[<p>java操作excel</p><p>使用apache提供的工具POI操作Excel</p><p><strong>1.Maven的依赖</strong></p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml-schemas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>也可以在网上下载其jar包(个人使用3.9)</p><p>下载的有三个包：poi、poi-ooxml、poi-ooxml-schemas，三个包下载的版本必须一致</p><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoi39jar.htm" target="_blank" rel="noopener">poi的jar包</a></p><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoiooxml39jar.htm" target="_blank" rel="noopener">poi-ooxml的jar包</a></p><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoiooxmlschemas39jar.htm" target="_blank" rel="noopener">poi-ooxml-schemas的jar包</a></p><p>简单使用1,创建一个工作簿：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建一个工作簿</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个io流，通过io流将数据写入磁盘</span>            FileOutputStream fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的工作簿.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关流</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>简单使用2,创建一个sheet：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义新的工作簿</span>        wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第一个sheet页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义第一个sheet</span>        wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第二个sheet页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义第二个sheet</span>        FileOutputStream fileout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的sheet.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>简单使用3,创建cell,根据行创建多个列并写入数据：</p><pre class=" language-java"><code class="language-java">Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义新的工作簿</span>        Sheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第一个sheet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建行</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个列，根据行创建列</span>        Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第二列</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"字符串类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第三列</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第四列</span>        <span class="token comment" spellcheck="true">//使用流将创建的数据写到磁盘上</span>        FileOutputStream fileout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的cell.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>简单使用4，某一列数据使用日期类型，对其进行格式化输出：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个新的工作簿</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建第一个sheet页</span>        Sheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个行</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个单元格</span>        Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给第一列元素赋值</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给单元格设定值</span>        <span class="token comment" spellcheck="true">//row.createCell(1).setCellValue(new Date());</span>        <span class="token comment" spellcheck="true">//创建helper元素</span>        CreationHelper chelp <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getCreationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格样式</span>        CellStyle cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span>chelp<span class="token punctuation">.</span><span class="token function">createDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将单元格设置为自己设置的样式</span>        cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建第三列并设置样式，使用Calendar类进行设置样式</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的style.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简单使用5，读取excel文件内容：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件输入流</span>        FileInputStream filein <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java读取的文件.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用POIFSFileSystem类，传入数据流进行读取</span>        POIFSFileSystem fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POIFSFileSystem</span><span class="token punctuation">(</span>filein<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用poifs读取一个工作簿</span>        HSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>        HSSFSheet hsheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hsheet<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历工作簿中的行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>rowNum<span class="token operator">&lt;=</span>hsheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HSSFRow hsrow <span class="token operator">=</span> hsheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hsrow <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//遍历一行中的列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cellRow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cellRow<span class="token operator">&lt;</span>hsrow<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cellRow<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HSSFCell hscell <span class="token operator">=</span> hsrow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hscell <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                String ss <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>hscell<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ss<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将列中的不同的元素转换成String类型进行输出</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getValue</span><span class="token punctuation">(</span>HSSFCell hscell <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_BOOLEAN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用工具类进行数据抽取(功能与上边读取一致)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream filein <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java读取的文件.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用POIFSFileSystem类，传入数据流进行读取</span>        POIFSFileSystem fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POIFSFileSystem</span><span class="token punctuation">(</span>filein<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用poifs读取一个工作簿</span>        HSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelExtractor excel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelExtractor</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span>        excel<span class="token punctuation">.</span><span class="token function">setIncludeSheetNames</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>excel<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习</title>
      <link href="/2020/03/30/mysql-xiang-guan/"/>
      <url>/2020/03/30/mysql-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h4 id="mysql数据库创建表语句"><a href="#mysql数据库创建表语句" class="headerlink" title="mysql数据库创建表语句"></a>mysql数据库创建表语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--商品表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_info <span class="token punctuation">(</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>     product_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    product_icon <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--类目表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_category <span class="token punctuation">(</span>    category_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    category_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>category_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--类型唯一性</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uqe_category_type <span class="token punctuation">(</span>category_type<span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--订单表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_master <span class="token punctuation">(</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_openid <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    pay_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单主键</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单索引</span>    <span class="token keyword">KEY</span> idx_buyer_openid <span class="token punctuation">(</span>buyer_openid<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--订单明细表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_detial<span class="token punctuation">(</span>    detial_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_quantity   <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>detial_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> idx_order_id <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需求：创建一个薪资表，表中有员工的信息，查询某个员工薪资变化t以及员工编号emp_no</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建薪资表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--1、用COUNT()函数和GROUP BY语句可以统计同一emp_no值的记录条数</span><span class="token comment" spellcheck="true">--2、输出的涨幅次数为t，故用AS语句将COUNT(emp_no)的值转换为t</span><span class="token comment" spellcheck="true">--3、由于COUNT()函数不可用于WHERE语句中，故使用HAVING语句来限定t>15的条件</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> t <span class="token keyword">from</span> salaries <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">a</span> <span class="token keyword">where</span> t<span class="token operator">></span><span class="token number">15</span><span class="token comment" spellcheck="true">--对于distinct与group by的使用: 1、当对系统的性能高并数据量大时使用group by 2、当对系统的性能不高时使用数据量少时两者皆可 3、尽量使用group by</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> salaries  <span class="token keyword">where</span> to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span><span class="token keyword">group</span> <span class="token keyword">by</span> salary  <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">DESC</span></code></pre><p>having和where的使用场景</p><blockquote><p>WHERE语句在GROUP BY语句之前；SQL会在分组之前计算WHERE语句。</p><p>HAVING语句在GROUP BY语句之后；SQL会在分组之后计算HAVING语句。  </p></blockquote><h4 id="Mysql常见的问题"><a href="#Mysql常见的问题" class="headerlink" title="Mysql常见的问题"></a>Mysql常见的问题</h4><p>索引相当于一个字典，存放一个文件及在文件中的偏移量。索引存在的位置是存放在磁盘位置。基本概念：局部性原理(时间局部性和空间局部性)和磁盘预读(以页为单位)</p><p>1.mysql原子性和持久性怎么保证？</p><p>2.innode和myisam区别</p><blockquote><p>innodb存储引擎的数据文件和索引文件放在一个文件夹中，myisam分为不同的文件</p><p>innodb支持事务，myisam不支持</p><p>innodb支持表锁和行锁，而myisam支持表锁</p><p>innodb有外键，myisam没有外键</p></blockquote><p>3.索引分类：主键索引、唯一索引、普通索引和全文索引、组合索引。</p><p>主键索引：主键是一种唯一性索引，但它必须指定为PRIMARY_KEY，每个表只能有一个主键</p><p>唯一索引：索引列的所有值都只能出现一次，即必须唯一，值可以为空</p><p>普通索引：基本的索引类型，值可以为空，没有唯一性限制</p><p>全文索引：全文索引的类型为FULLTEXT，全文索引可以在varchar、char、text类型的列上创建</p><p>组合索引：多列值组成一个索引，专门用于组合搜索</p><p>4.innodb的底层数据结构（最左匹配、索引下推）</p><p>innodb的索引文件和数据文件存放在一起，b+树的叶子节点存放的是数据，是索引位置的那一行数据。</p><blockquote><p>innodb是通过B+Tree结构对主键创建索引，然后叶子节点存储记录，如果没有主键，那么会选择唯一键，如果没有唯一键，那么就会生成一个6位的row_id来作为主键</p><p>如果创建索引的键是其他字段，那么会在叶子节点中存储的是该记录的主键，然后通过主键索引找到对应的记录，叫做<strong>回表</strong>。</p></blockquote><p>索引覆盖：根据普通索引查找到维护的主键，再根据主键通过回表查询另一个b+树找到对应的数据；在进行一个查询是只查询主键，不需要回表</p><p>5.为什么使用b+树而不适用b树</p><p>数据结构的选取：</p><p>hash表：</p><p>不使用hash表的原因有，利用hash存储的话需要将所有的数据文件添加到内存，比较耗费内存空间；如果所有的查询都是等值查询，效率高，但是常用数据库为范围查询查找数据。</p><p>二叉搜索树和红黑树：</p><p>不使用该树无论是二叉树还是红黑树，都会因为树的深度过深而造成io次数变多，影响数据读取的效率。</p><p>b树多个分支，有一个度Degree，所有的键值分布在</p><p>b+树在叶子节点上增加了兄弟关系之间的连接。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2020/03/28/an-zhuang-docker/"/>
      <url>/2020/03/28/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>linux内核升级</p><p><strong>yum update -y</strong></p><p><strong>yum install docker -io lxc libcgroup* device-mapp* -y</strong></p><h3 id="安装第三方扩展源"><a href="#安装第三方扩展源" class="headerlink" title="安装第三方扩展源"></a>安装第三方扩展源</h3><blockquote><p>//安装第三方扩展源</p><p>yum install epel-release -y</p><p>//查看是否成功安装扩展源</p><p>ll /etc/yum.repos.d/|grep -w epel</p></blockquote><p>安装docker软件包</p><blockquote><p>yun install docker -y</p><p>yum list docker</p><p>rpm - qa|grep docker</p><p>systemctl start docker.service</p><p>#查看Docker进程</p><p>ps -ef|grep docker</p><p>#查看Docker版本信息</p><p>docker version</p></blockquote><p>1.安装centos7<br>使用阿里云镜像</p><blockquote><p><a href="https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</a></p></blockquote><p> 使用VMware11.0安装centos7<br> 1.设置网络为桥接模式，重启网络设置<strong>service network restart</strong></p><p> 2.查看ip地址：<strong>ip addr</strong><br> 3.查看Centos版本：使用<strong>uname -r</strong> (linux内核版本高于3.10)<br> 4.升级软件包及内核（小于3.10需要该操作）：<strong>yum update</strong><br> 5.安装docker命令：<strong>yum install docker</strong><br> 6.启动docker命令:<strong>systemctl start docker</strong><br> 7.将docker服务设为开机启动：<strong>systemctl    enable docker</strong><br> 8.查看docker版本： <strong>docker -v</strong></p><pre><code>&gt;设置开机启动：systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</code></pre><p>检索操作：<strong>docker search 关键字</strong><br>拉取信息：<strong>docker pull 镜像名</strong>：tag（tag可选择，多为软件的版本，默认最新版本）<br>列表：<strong>docker images</strong><br>删除 ：<strong>docker rmi inage-id</strong>（删除指定版本的镜像）</p><p>搭建环境：<br>安装mysql：<br><strong>docker search mysql；</strong><br><strong>docker pull mysql：latest</strong><br>错误的启动mysql：<br><strong>docker run –name mysql01 -d mysql</strong><br>启动的mysql不能够使用，查看错误日志使用命令docker logs mysql镜像的id<br>正确启动mysql的命令：<strong>docker run –name mysql01 -e MYSQL_ROOT_PASSWORD=root23 -d mysql</strong><br>以上命令在容器中启动不能被外网访问，需要做端口映射。</p><p>重启docker</p><p><strong>docker server restart</strong> </p><p>安装nginx镜像</p><p><strong>docker pull docker.io/nginx</strong></p><p>查看docker镜像</p><p><strong>docker  images</strong></p><p><strong>docker images|grep -i nginx</strong></p><p>运行nginx(使用ip+80端口进行访问)</p><p><strong>docker run -itd -p 80:80 docker.io/nginx</strong></p><p>部署redis：</p><p>1.搜索redis镜像</p><p>docker search redis</p><p>2.拉取redis镜像</p><p>docker pull redis:5.0</p><p>3.创建容器</p><p>docker run -id –name=C_redis -p 6379:6379 redis:5.0</p><p>4.使用外部机器连续redis</p><p>./redis-cli.exe  -h  ip(localhost)  -p  6379</p><h4 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h4><p>操作系统组成有：</p><p>进程调度子系统、进程通信子系统、内存管理子系统、设备管理子系统、文件管理子系统、网络管理子系统、作业控制子系统</p><p> linux文件系统由boot和rootfs两部分组成</p><p>bootfs：包含bootloader（引导加载程序）和kernel内核</p><p>rootfs：root文件系统，包含的就是典型的linux系统中的/dev、/proc、/bin、/etc等标准目录和文件</p><h4 id="docker制作镜像："><a href="#docker制作镜像：" class="headerlink" title="docker制作镜像："></a>docker制作镜像：</h4><p>1.容器转为镜像：</p><p>docker commit 容器id 镜像名称:版本号</p><p>将镜像转为压缩文件，可以用于传输</p><p>docker save -o 镜像的压缩文件  镜像名称:版本号</p><p>恢复镜像：</p><p>docker load -i 镜像的压缩文件</p><p>2.fockerfile将容器转为镜像</p><p>docker  build  -f  自定义的dockerfile  -t app</p><p>dockerfile发布springboot项目</p><p>1.定义父镜像</p><p>From java:8</p><p>2.定义作者信息：</p><p>MAINTAINER itxing <a href="mailto:&#x69;&#x74;&#x78;&#x69;&#x6e;&#x67;&#x7a;&#x61;&#105;&#x40;&#49;&#x36;&#x33;&#46;&#x63;&#111;&#109;">&#x69;&#x74;&#x78;&#x69;&#x6e;&#x67;&#x7a;&#x61;&#105;&#x40;&#49;&#x36;&#x33;&#46;&#x63;&#111;&#109;</a></p><p>3.添加jar</p><p>ADD 项目jar包 app.jar</p><p>4.启动jar</p><p>CMDjava -jar app.jar</p><p>5.docker启动自定义容器并且端口映射</p><p>docker run -id -p 9000:8080  自定义的项目名app</p><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><p>1.安装Docker Compose</p><p>curl -l <a href="https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname">https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname</a> -m’ -o /usr/local/bin/docker-compose</p><p>2.设置文件可执行权限</p><p>chmod +x /usr/local/bin/docker-compose</p><p>3.查看版本信息</p><p>docker-compose -version</p><p>4.卸载Docker Compose</p><p>rm /usr/local/bin/docker-compose</p><h4 id="Docker搭建私有仓库"><a href="#Docker搭建私有仓库" class="headerlink" title="Docker搭建私有仓库"></a>Docker搭建私有仓库</h4><p>1.拉取私有仓库连接</p><p>docker pull resistry</p><p>2.启动私有仓库</p><p>docker run -id –name=registry -p 5000:5000 registry</p><p>3.打开连接，浏览器中输入http://私有仓库服务器ip5000/v2/_catalog,看到{“repositories”:[]}表示私有仓库，搭建成功</p><p>4.修改damon.json</p><p>vim /etc/docker/damon.json</p><p>#在中间中添加key，保存退出，该步骤是让docker信任私有仓库，注意将所有私有的仓库服务器ip修改为自己私有仓库服务器的真实ip</p><p>{“insecure-registries”：[私有仓库服务器ip:5000]}</p><p>5.重启docker服务</p><p>systemctl   restart   docker</p><p>docker   start   registry</p><h4 id="将镜像上传至私有仓库"><a href="#将镜像上传至私有仓库" class="headerlink" title="将镜像上传至私有仓库"></a>将镜像上传至私有仓库</h4><p>1.标记镜像为私有仓库镜像</p><p>docker    tag    需要标签的docker镜像   私有仓库服务器ip:5000/centos:7</p><p>2.上传标记的镜像</p><p>docker push 私有仓库服务器ip：5000/标记好的docker镜像</p><p>3.删除当前的镜像</p><p>docker rmi 镜像名</p><p>4.从私有仓库拉取镜像</p><p>docker pull 镜像名</p><h4 id="容器和虚拟机的比较："><a href="#容器和虚拟机的比较：" class="headerlink" title="容器和虚拟机的比较："></a>容器和虚拟机的比较：</h4><p>相同点：容器和虚拟机都是进行相似的资源隔离和分配优势</p><p>不同点：传统虚拟机可以运行不同的操作系统，容器只能运行同一类型的操作系统</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题党--it星</title>
      <link href="/2020/03/26/hello-world/"/>
      <url>/2020/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2020/03/26/redis-xue-xi-jian-dan-ji-lu/"/>
      <url>/2020/03/26/redis-xue-xi-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>nosql (not only sql)非关系型数据库(需要多多练习使用)</p><p>Nosql数据库种类较多，但是都有一个特点是去点关系型数据库的关系特性。</p><p>互联网的</p><p><strong>三高：高并发、高扩展、高负载</strong></p><p>3V：<strong>海量(Volume)、多样(Variety)、实时(Velocity)</strong></p><p>验证或查看redis命令：</p><blockquote><p> ps  -ef|grep redis</p><p>netstat -antp | grep redis</p></blockquote><p>redis的配置文件中设定了数据库的个数，默认是16个（0-16-1个）</p><p>select 切换数据库</p><p>DBsize查看当前数据库的key的数量</p><p>linux下启动redis：</p><p>进入到redis安装目录(我的路径)：cd  /usr/local/redis/bin/</p><p>将会看到有很多相关的redis文件，启动并访问redis服务：</p><blockquote><p>./redis-server redis.conf</p><p>./redis-cli  -p  6379</p></blockquote><p><strong>redis的通用命令：</strong></p><blockquote><p>keys *</p><p>exists key的名字，判断某个key是否存在</p><p>move   key db  当前库被移除</p><p>expire key  秒值   给当点的key设置过期时间</p><p>ttl key 查看还有多少秒过期 -1表示永不过期 -2表示已经过期</p><p>type key 查看你的key是什么类型</p><p>dbsize  数据库的大小</p></blockquote><p>注:一般不会使用redis的长命令</p><p>例如：keys,flushall,flushdb,slow lua script,mutil/exec,operate big value</p><p><strong>redis的五大数据类型</strong></p><p>redis对象包括：数据类型、内部编码</p><table><thead><tr><th>redis的键Key</th><th>内部的编码</th></tr></thead><tbody><tr><td>String</td><td>raw、int、embstr</td></tr><tr><td>hash</td><td>hashtable、ziplist</td></tr><tr><td>list</td><td>linkedlist、ziplist</td></tr><tr><td>set</td><td>hashtable、insert</td></tr><tr><td>zset</td><td>skiplist、ziplist</td></tr></tbody></table><p><strong>1.redis的String 字符串</strong>：string是redis最基本的类型，一个key对应一个value，最大的value最多可以是512M。可以存图片或者序列化的对象(常用命令)</p><blockquote><p>set/get/del/append/strlen</p><p>Incr/decr/incrby/decrby</p><p>getrange/setrange：getrange key  start   end；setrange  key  start  end</p><p>setex(set with expire)键秒值/setnx(set if not exist)</p><p>mset/mget/msetnx(mget或mset是批次处理，1次mget时间= 网络时间+n次的命令时间)时间复杂度为O（N）</p><p>getset(先get再set)</p><p>append 在次机床叠加字符串</p></blockquote><p><strong>2.redis的Hash哈希</strong>：是一个键值对的集合，适用于存储对象(k,v模式，v是一个键值对,常用命令)</p><blockquote><p>hset/hget/hmset/hmget/hgetall/hdel  基本的添加与查询</p><p>hlen 查询长度</p><p>hexist key 在key里面的某个值的key</p><p>hkeys/hvals</p><p>hincrby/hincrbyfloat</p><p>hsetnx  如果存在不插入，不存在插入</p></blockquote><p><strong>3.redis的List列表</strong>：是一个简单的字符串列表</p><blockquote><p>lpush/rpush/lrange</p><p>lpop/rpop</p><p>lindex：按照索引下标获取元素</p><p>llen ：查看集合长度</p><p>lrem key  删除N个value</p><p>ltrim key 开始index   结束index：截取指定范围的值后在赋值给key</p><p>rpoplpush  源列表   目的列表</p><p>lset key index value</p><p>linsert key before/after 值1 值2</p></blockquote><p><strong>4.redis的Set集合</strong>：是一个无序无重复的集合(单值多value，常用命令)</p><blockquote><p>sadd/smembers/sismember</p><p>scard：获取集合里面的元素个数</p><p>srem key value ：删除集合中元素</p><p>srandmember key 某个整数</p><p>spop key ：随机出栈</p><p>smove key1 key2 在key1里某个值  作用是将key1中的某个值赋给key2</p><p>数学集合类：差集：sdiff  交集：sinter  并集：sunion</p></blockquote><p><strong>5.redis的Zset(Sorted set:有序集合)</strong>：有序的集合，不允许有重复的成员，每个元素都会有一个关联的double类型的分数，根据分数进行从小到大的排序</p><blockquote><ol><li>zadd/zrange</li></ol><p>注：zrange常与withscores联合使用</p><ol start="2"><li>zrangebyscore key 开始score 结束score</li></ol><p>注：zrangebyscore  key 开始scorre 结束score  (withscore 或者‘（’表示不包含或者limit返回限制)</p><p>例子1：zrangescore   zset01  60   (90   表示zset集合中分数大于等于60小于90的元素的键值对的键值</p><p>例子2：zrangescore   zset01  60   (90  withscores   表示zset集合中分数大于等于60小于90的元素整个键值对</p><p>例子3：zrangescore   zset01  60   (90  limit 2  2     表示zset集合中分数大于等于60小于90的元素键值从2位置查两个</p><ol start="3"><li>zcard/zcount key score区间/zrank key values值，作用是获取下标值/zscore key 对应值，获得分数</li><li>zrevrank key values 作用是逆序获取下标值</li><li>zrevrange</li><li>zrevrangebyscore key</li></ol></blockquote><p><a href="http://redisdoc.com/" target="_blank" rel="noopener">redis命令大全</a></p><p><strong>redis的配置文件redis.conf:</strong></p><p>Unitsd单位：对于大小写不敏感，GB gb  都一样。</p><p>INCLUDES包含：标准的模板，可以包含其他的配置文件，使用include进行引入</p><p>GENERAL：TCP-backlog=511（默认），其是一个连接队列。还包含redis日志，四个日志级别：debug、verbose、notice、waring</p><p> SNAPSHOTTING快照：</p><p>SECURITY安全：</p><p>   自己配置密码：config set requirepass “123456”</p><p>   登录时需验证：auth 123456</p><p>LIMITS限制：Maxclients、Maxmemory、Maxmemory-policy、Maxmemory-samples(默认5个样例)</p><blockquote><p>Maxmemory-policy缓存过期机制：</p><p>volatile-lru:使用LRU（最近最少使用淘汰）算法移除key，只针对于过期时间的键</p><p>allkeys-lru：使用LRU（最近最少使用淘汰）算法移除key</p><p>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</p><p>allkeys-random：移除随机的key</p><p>volatile-ttl:移除那些TTL（设置存活时间）值最小的key，即就是将要过期的key</p><p>noeviction：不进行移除，针对写操作（永不过期）</p></blockquote><p>APPEND ONLY MODE追加</p><p>Redis中的功能：</p><p>慢查询、pipeline、发布订阅、Bitmap、HyperLogLog、GEO</p><ul><li>1.慢查询：(慢查询默认配置:slowlog-max-len = 128和slowlog-log-slower-than = 10000)</li></ul><p>​     客户端请求的生命周期：客户端发送命令；排队；执行命令；返回结果。第三阶段慢执行称为慢查询，客户端超时可能不是慢查询的原因。</p><blockquote><p> 动态配置：config set slowlog-max-len = 1000</p><p>slowlog get[n]:获取慢查询队列</p><p>slowlog len :获取慢查询队列长度</p><p>slowlog reset:清空慢查询队列</p><p> slowlog-max-len默认10毫秒，通常设置1ms</p><p>slowlog-log-slower-than队列长度大多设置在1000</p></blockquote><ul><li><p>pipeline流水线：多次操作可以分批进行操作，例如10000次可以分为100*100</p></li><li><p>发布订阅(客户端与客户端之间的消息，类似于生产者消费者)</p></li></ul><blockquote><p> public channel  mrssage   发布消息</p><p>subscribe channel   订阅频道</p><p>psubscribe [pattern]  订阅模式</p></blockquote><ul><li>Bitmap(位图)</li></ul><blockquote><p>setbit key offset value    给位图指定索引设置值</p><p>getbit key offset     获取位图指定索引的值</p><p>bitcount  key  [start  end]   获取指定范围的值</p><p>bittop op destkey  key  [key…]</p></blockquote><ul><li>HyperLogLog(极小控件数据统计)</li></ul><blockquote><p>pfadd key element [emelent]</p><p> pfcount key [key]</p></blockquote><ul><li>GEO(redis3.2的功能)存储两个地理的经纬度，用于计算两地距离</li></ul><blockquote><p>geoadd key  精度 维度 标识</p><p>geopod key 标识 [标识]</p><p>geodist   key   标识1  标识2</p><p>georadius key  精度  维度  选项</p></blockquote><p><strong>Redis持久化：</strong></p><p><strong>1.RDB（Rdies DataBase）</strong>：在<strong>指定时间间隔内</strong>将数据集快照写入磁盘，<strong>Snapshot快照</strong>，恢复时将快照读到内存。Redis会<strong>单独创建一个子进程</strong>来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束，再用该<strong>临时文件替换上次持久化好的文件</strong>，整个过程中主进程不进行IO操作，这样确保了极高的性能。对于需要进行大规模数据的恢复，且对于数据恢复的完整性不敏感，那么RDB方式比AOF方式更加高效。(时间复杂度O(N))</p><p>Fork的作用是复制一个与当前进程一样的进程，新进程的所有数据数值都和原进程一致。</p><p>Rdb保存的是dump.rdb文件：</p><blockquote><p>命令save   秒值   改动次数   （同步）</p><p>bgsave (异步)</p><p>自动生成该文件</p><p>经常将配置文件中的save命令关掉，手动进行save</p><p>dbfilename dump-${port}.rdb</p></blockquote><p>如何触发Rdb快照：将备份的dump.rdb拷贝到redis启动的目录下进行启动</p><p><strong>2.AOF（Append Only File）</strong>：以日志的形式来记录每个写文件，是将redis执行的所有写过程指令记录下来(读不记录)，只允许追加文件但不可以改文件，redis启动之初会读取改文件重新构建数据，即redis将所有写指令从前到后执行一次恢复数据。</p><p>Aof保存的是appendonly.aof(如果开启aof默认加载改文件进行开启redis)：文件出现错误时，启动redis失败，可以使用命令进行自动修复，将不符合的语法进行剔除。</p><blockquote><p>redis-check-aof  –fix  appendonly.aof</p></blockquote><p>Rewrite：Aof采用文件追加方式，文件会越来越大，为了避免此情况，新增加重写机制，当aof文件大小超过所设定的阈值时，Redis就会启动Aof文件内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof。</p><p>重写（rewrite）原理：增长过大时，将fork出新的进程，将文件重写，遍历新进程内存中数据，每条记录有一条Set语句，重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写一个新的aof文件，与数据库快照类似。</p><p>重写触发机制：Redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大小等于64M</p><p>aof默认是时刻进行记录，保证数据完整，缺点是相同数据集的数据而言aof文件远大于rdb文件，恢复速度慢于rdb，Aof运行效率要慢于rdb。每秒同步策略效率较好，不同步效率与rdb相同。</p><p><strong>数据持久化选择：</strong></p><p>RDB持久化方式能够在指定时间间隔对数据进行快照存储；AOF持久化方式记录每次对服务器写的操作，当服务器重启的是时候会重新执行这些恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾</p><p>redis只做缓存时，可以不用持久化</p><p>同时开启两种持久化，redis优先加载aof来恢复原始数据，rdb用作后备用途，每15分钟进行一次备份即可（保留规则：save  900 1）</p><p>Redis事务：一组命令的集合，一起成功一起失败。一个事务中的所有命令被序列化，按顺序地串行执行而不会被其他命令插入，不允许加塞。</p><p>事务作用：一个队列中，一次性、顺序性、排他性的执行一系列命令</p><blockquote><p>事务开启命令：MULTI                       使用调用事务命令：EXEC</p><p>取消事务命令：DISCARD                取消watch命令对所有key的监视：UNWATCH</p><p>监视一个或多个key命令，事务执行前数据被改则事务被打断：WATCH</p></blockquote><p><strong>Redis对于事务是部分支持</strong></p><p><strong>执行事务、放弃事务、</strong></p><p><strong>全体连坐</strong>（事务中的某一条指令不可加入队列中，导致整个指令队列全部错误）、</p><p><strong>冤头债主</strong>（事务中的某一条指令有错误，但是能够加入队列，只有执行的时才会出错）、<strong>watch监控</strong>（悲观锁/乐观锁/CAS：check and set）</p><p>悲观锁：认为每次数据访问时一定会被别人修改，所以每次拿取数据时锁定整个表，别人想要操作数据时进入阻塞直到拿到锁，例如：关系型数据库中的行锁、表锁、读锁、写锁</p><p>乐观锁：认为每次拿取数据时，别人不会修改数据，相当于列锁，添加一个版本列</p><p>Redis的发布订阅：进程间的一种消息通信模式：发送者（Pub）发送消息，订阅者（sub）接受消息</p><blockquote><p>订阅频道(channel)：SUBSCRIBE c1 c2  c3</p><p>消息发布：PUBLISH c1  消息</p><p>订阅多个，通配符：PSUBSCRIBE  new*</p></blockquote><p><strong>Redis的复制（Master/Slaver）</strong>:即主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主（读写分离、容灾恢复）</p><blockquote><p>从库配置：slaveof 主库ip  主库端口</p><p>主机挂掉，从库上升为主库：slaveof  no  one</p></blockquote><p>从库配置操作，拷贝多个redis.conf文件；开启daemonize  yes；pid文件名字；指定端口；log文件名字；dump.rdb名字</p><p><strong>一主两仆</strong>：一个主机两个丛机，使用slaveof指向主机，只允许主机写数据，主机down掉，丛机等待主机复原，丛机down掉需要重新与主机建立连接，可以在配置文件中写就不需要每次手动连接</p><p>主从复制原理，Slave启动成功连接到master后会发送一个sync命令，Master接到命令启动后台的存盘进程，同时收集所有接收到的修改数据集的命令，在后台进程执行完毕之后，master将传送整个数据文件slave</p><p>全量复制：slave服务接收到数据库文件数据后将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改数据的命令依次传递给slave，完成同步，每次重新连接需要做依次全量复制</p><p><strong>常用的模式是哨兵模式(Sentinel)步骤:</strong></p><p>针对于主从复制的体系，主机挂机的情况下，从丛机中进行投票进行选举一个新的主机，步骤：</p><p>自定义配置文件，与redis.conf文件相同的路径建立一个sentinel.conf文件</p><p>配置哨兵：sentinel monitor 被监控数据库名字 (自己起一个名字)    127.0.0.1   6379   1</p><p>配置文件中的数字1表示主机挂掉后，票数多的成为新的主机</p><p>启动哨兵：Redis-sentonel   sentinel.conf</p><p>redis配置实例:</p><blockquote><p>功能包括：(<a href="http://gethub.com/sohutv/cachecloud" target="_blank" rel="noopener">http://gethub.com/sohutv/cachecloud</a>)</p><p>1.一键启动Redis。(Standalone、Sentinel、Cluster)</p><p>2.机器、应用、实例监控和报警</p><p>3.客户端：透明使用、性能上报</p><p>4.可视化运维：配置、扩容、Failover、机器/应用/实例上下线。</p></blockquote><p>redis配置参数：</p><p>daemonize:是否是守护进程（no|yes）</p><p>port：端口设置</p><p>logfile:日志文件</p><p>dir：redis工作目录</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j学习</title>
      <link href="/2020/03/25/neo4j-xue-xi-yu-dao-de-keng/"/>
      <url>/2020/03/25/neo4j-xue-xi-yu-dao-de-keng/</url>
      
        <content type="html"><![CDATA[<h4 id="neo4j下载与安装-windows环境下"><a href="#neo4j下载与安装-windows环境下" class="headerlink" title="neo4j下载与安装(windows环境下)"></a>neo4j下载与安装(windows环境下)</h4><p><a href="https://neo4j.com/" target="_blank" rel="noopener">neo4j官网</a></p><p>注：官网下载neo4j相当的慢。</p><p><a href="http://we-yun.com/index.php/blog/releases-56.html" target="_blank" rel="noopener">国内下载地址</a></p><h5 id="1-neo4j简单介绍"><a href="#1-neo4j简单介绍" class="headerlink" title="1.neo4j简单介绍"></a>1.neo4j简单介绍</h5><p>其是基于java语言编写的图形数据库。图是一组节点和连接这些节点的关系，图数据库也被称作图形数据库管理系统(GDBMS)。</p><h5 id="2-需要安装jdk环境"><a href="#2-需要安装jdk环境" class="headerlink" title="2.需要安装jdk环境"></a>2.需要安装jdk环境</h5><p>先使用java -version，查看自己的java环境是否配置好。</p><p><img src="/medias/images/image-20200324190457173.png" alt="image-20200324190457173"></p><h5 id="3-下载neo4j后解压，主要目录如下"><a href="#3-下载neo4j后解压，主要目录如下" class="headerlink" title="3.下载neo4j后解压，主要目录如下"></a>3.下载neo4j后解压，主要目录如下</h5><blockquote><p>Neo4j应用程序有如下主要的目录结构：</p><ul><li>bin目录：用于存储Neo4j的可执行程序；</li><li>conf目录：用于控制Neo4j启动的配置文件；</li><li>data目录：用于存储核心数据库文件；</li><li>plugins目录：用于存储Neo4j的插件；</li></ul></blockquote><h5 id="4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"><a href="#4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）" class="headerlink" title="4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"></a>4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）</h5><p>新建系统变量：将自己neo4j目录粘贴到变量值位置</p><p><img src="/medias/images/image-20200324190915553.png" alt="image-20200324190915553"></p><p><img src="/medias/images/image-20200324191226568.png" alt="image-20200324191226568"></p><p>最后将bin加入到path路径下：</p><p><img src="/medias/images/image-20200324191354386.png" alt="image-20200324191354386"></p><h5 id="5-测试安装是否成功"><a href="#5-测试安装是否成功" class="headerlink" title="5.测试安装是否成功"></a>5.测试安装是否成功</h5><h6 id="出现错误1"><a href="#出现错误1" class="headerlink" title="出现错误1:"></a>出现错误1:</h6><p><img src="/medias/images/image-20200324193244410.png" alt="image-20200324193244410"></p><p>如果出现这种情况，不能加载.psd1模块，这是由于相对路径配置的问题导致的，打开下面的文件：</p><p><img src="/medias/images/image-20200324193432628.png" alt="image-20200324193432628"></p><p>将路径改成自己的路径：</p><p><img src="/medias/images/image-20200324193542460.png" alt="image-20200324193542460"></p><h6 id="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"><a href="#出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境" class="headerlink" title="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"></a>出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境</h6><blockquote><p>Neo4j cannot be started using java version 1.8.0_221</p></blockquote><p>更换jdk启动neo4j，成功访问</p><p><img src="/medias/images/image-20200324193821721.png" alt="image-20200324193821721"></p><p><img src="/medias/images/image-20200324193840986.png" alt="image-20200324193840986"></p><h4 id="Neo4j简单的命令"><a href="#Neo4j简单的命令" class="headerlink" title="Neo4j简单的命令"></a>Neo4j简单的命令</h4><h5 id="后期需要去学习一些Cypher语法"><a href="#后期需要去学习一些Cypher语法" class="headerlink" title="后期需要去学习一些Cypher语法"></a>后期需要去学习一些Cypher语法</h5><p>1.删除数据库中之前的图，创建一个空白的环境进行操作</p><blockquote><p>MATCH (n) DETACH DELETE n</p></blockquote><p><em>MATCH</em> 是匹配操作，小括号()代表一个节点node，括号里面的n为标识符</p><p>2.创建一个人物节点：</p><blockquote><p>CREATE (n:Person {name:’John’}) RETURN n</p></blockquote><p>_CREATE_是创建操作，Person是标签，代表节点的类型。花括号{}代表节点属性。该语句表示创建一个标签为Person的节点，该节点具有一个name属性值，值为john</p><p>3.创建更多人物节点</p><blockquote><p>CREATE (n:Person {name:’Sally’}) RETURN n</p><p>CREATE (n:Person {name:’Steve’}) RETURN n</p><p>Create(n:Person{name:’Xing’})RETURN n</p></blockquote><p>4.创建地区节点</p><blockquote><p>CREATE(n:Location{city:’Miami’,state:’FL’})</p><p>CREATE(n:Location{city:’SHANXI’,state:’MA’})</p><p>CREATE(n:Location{city:’SHANGHAI’,state:’ME’})</p></blockquote><p>节点类型为Location，属性包括city和state</p><p>5.创建关系</p><blockquote><p>MATCH   (a:Person {name:’Liz’}),</p><p>​                (b:Person {name:’Mike’})</p><p>MERGE   (a)-&gt;[:FRIENDS]-&gt;(b)</p></blockquote><p>方括号<code>[]</code>即为关系，<code>FRIENDS</code>为关系的类型。注意这里的箭头<code>--&gt;</code>是有方向的，表示是从a到b的关系。</p><p>6.关系也可以增加属性</p><blockquote><p>MATCH (a:Person {name:’Shawn’}),<br>      (b:Person {name:’Sally’})<br>MERGE (a)-[:FRIENDS {since:2001}]-&gt;(b)</p></blockquote><p>在关系中，同样的使用花括号{}来增加关系的属性，这里给FRIENDS关系增加了since属性，属性值为2001，表示他们建立朋友关系的时间。</p><p>7.增加更多的关系</p><blockquote><p>MATCH (a:Person {name:’Shawn’}), (b:Person {name:’John’}) MERGE (a)-[:FRIENDS {since:2012}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Person {name:’Shawn’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Sally’}), (b:Person {name:’Steve’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Liz’}), (b:Person {name:’John’}) MERGE (a)-[:MARRIED {since:1998}]-&gt;(b)</p></blockquote><p>8.建立不同类型节点之间的关系-人物和地点的关系</p><blockquote><p>MATCH (a:Person {name:’John’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1978}]-&gt;(b)</p></blockquote><p>这里的关系是BORN_IN，表示出生地，同样有一个属性，表示出生年份。 </p><p>9.同样建立更多人的出生地</p><blockquote><p>MATCH (a:Person {name:’Liz’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1981}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Location {city:’San Francisco’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Shawn’}), (b:Location {city:’Miami’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Steve’}), (b:Location {city:’Lynn’}) MERGE (a)-[:BORN_IN {year:1970}]-&gt;(b)</p></blockquote><p>10.至此，知识图谱的数据已经插入完毕，可以开始做查询了。我们查询下所有在Boston出生的人物</p><blockquote><p>MATCH (a:Person)-[:BORN_IN]-&gt;(b:Location {city:’Boston’}) RETURN a,b</p></blockquote><p><img src="/medias/images/image-20200324211750318.png" alt="image-20200324211750318"></p><p>11.查询所有对外有关系的节点</p><blockquote><p>MATCH (a)–&gt;() RETURN a</p></blockquote><p><img src="/medias/images/image-20200324211806411.png" alt="image-20200324211806411"></p><p>12.查询所有有关系的节点</p><blockquote><p>MATCH (a)–() RETURN a</p></blockquote><p><img src="/medias/images/image-20200324211913095.png" alt="image-20200324211913095"></p><p>13.查询所有对外有关系的节点，以及关系类型</p><blockquote><p>MATCH (a)-[r]-&gt;() RETURN a.name, type(r)</p></blockquote><p>14.查询所有有结婚关系的节点</p><blockquote><p>MATCH (n)-[:MARRIED]-() RETURN n</p></blockquote><p>15.创建节点的时候就建好关系</p><blockquote><p>CREATE (a:Person {name:’Todd’})-[r:FRIENDS]-&gt;(b:Person {name:’Carlos’})</p></blockquote><p>16.查找某人的朋友的朋友</p><blockquote><p>MATCH (a:Person {name:’Mike’})-[r1:FRIENDS]-()-[r2:FRIENDS]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName</p></blockquote><p>17.增加/修改节点的属性</p><blockquote><p>MATCH (a:Person {name:’Liz’}) SET a.age=34<br>MATCH (a:Person {name:’Shawn’}) SET a.age=32<br>MATCH (a:Person {name:’John’}) SET a.age=44<br>MATCH (a:Person {name:’Mike’}) SET a.age=25</p></blockquote><p>18.删除节点的属性</p><blockquote><p>MATCH (a:Person {name:’Mike’}) SET a.test=’test’<br>MATCH (a:Person {name:’Mike’}) REMOVE a.test</p></blockquote><p>19.删除节点</p><blockquote><p>MATCH (a:Location {city:’Portland’}) DELETE a</p></blockquote><p>20.删除有关系的节点</p><blockquote><p>MATCH (a:Person {name:’Todd’})-[rel]-(b:Person) DELETE a,b,rel</p></blockquote><h5 id="简单总结："><a href="#简单总结：" class="headerlink" title="简单总结："></a>简单总结：</h5><p>一开始学习图数据库不是很好理解，不像关系型数据库那样使用习惯了。图数据库是一个趋势，无论是在搜索还是在推荐系统中都被广泛使用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlServer学习</title>
      <link href="/2020/03/10/sqlserver-shi-yong-de-jian-dan-ji-lu/"/>
      <url>/2020/03/10/sqlserver-shi-yong-de-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="记录项目中的业务处理-环境：sqlserver2012、vs2017"><a href="#记录项目中的业务处理-环境：sqlserver2012、vs2017" class="headerlink" title="记录项目中的业务处理(环境：sqlserver2012、vs2017)"></a>记录项目中的业务处理(环境：sqlserver2012、vs2017)</h3><h3 id="使用sql语句将数据转换成相应的格式"><a href="#使用sql语句将数据转换成相应的格式" class="headerlink" title="使用sql语句将数据转换成相应的格式"></a>使用sql语句将数据转换成相应的格式</h3><blockquote><p>1.使用cast函数,不能转换日期类型</p><p> cast(表达式 as 数据类型)</p></blockquote><pre class=" language-mssql"><code class="language-mssql">> select CAST(PLAN_LENGTH AS FLOAT) '长度' from [dbo].[CTS_PROJECTPLAN_DETAIL]</code></pre><blockquote><p>2.使用Convert函数通用</p><p>Convert(数据类型，表达式)</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">FLOAT</span> <span class="token punctuation">,</span>PLAN_LENGTH<span class="token punctuation">)</span> <span class="token string">'长度'</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>CTS_PROJECTPLAN_DETAIL<span class="token punctuation">]</span></code></pre></blockquote><h4 id="除法时遇到分母为0时的处理"><a href="#除法时遇到分母为0时的处理" class="headerlink" title="除法时遇到分母为0时的处理"></a>除法时遇到分母为0时的处理</h4><p>简单的示范：</p><pre class=" language-declaremssql"><code class="language-declaremssql">--定义变量并且设置分母为0，这样一定会出现错误declare @a int;declare @b int;set @a = 10;set @b = 0;select @a/@b--1.可以使用case语句进行判断操作,当分母为0时将其转换成1select case @b when 0 then 1 else @a/@b --2.使用函数nullif，该函数--nullif(express1,express2),如果express1==express2时，直接为null，将表达式2设置为0，遇到0时直接为nulldeclare @a int;declare @b int;set @a=10set @b=5select @a/nullif(@b,0)--当然最后的需要并不会是null值，可以使用isnull函数进行控制--isnull(express1,express2),如果e1为null时，返回e2declare @a int;declare @b int;set @a=10set @b=5select isnull(@a/nullif(@b,0),1)</code></pre><h4 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h4><blockquote><p>将两列数据位varchar类型的数据进行类型转换并进行除法运算</p><p>自己编写的语句是：</p><p>select</p><p>isnull(Convert(float,ziduan1)/nullif(Convert(float,字段2),0),1 ) ‘新列名’</p><p>from 表名</p><p>–简单的解释就是，两列char类型的数据进行float转换后进行除法，进行除数为0判断</p></blockquote><h4 id="查询数据库中的数据进行数据监视"><a href="#查询数据库中的数据进行数据监视" class="headerlink" title="查询数据库中的数据进行数据监视"></a>查询数据库中的数据进行数据监视</h4><p>要求：能够查出每周、每月、每年的工作量</p><blockquote><p>每日统计:<br>select 日期时间=convert(char(10), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(10), 日期时间, 120)</p><p>每周统计:<br>select 日期时间=datepart(week, 日期时间), 数量=sum(数量)<br>from T<br>where year(日期时间)=year(getdate())<br>group by datepart(week, 日期时间)</p><p>每月统计:<br>select 日期时间=convert(char(7), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(7), 日期时间, 120) </p></blockquote><p>直接进行更改，查询项目工作量的表中的workload列数据，按照周、月、日进行分组统计</p><pre class=" language-mssql"><code class="language-mssql">select 周计划=datepart(week,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where year([YEARMONTH])=year(getdate())group by datepart(week, [YEARMONTH])select 月计划=datepart(MONTH,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where month([YEARMONTH])=month(getdate())group by datepart(MONTH, [YEARMONTH])select 日期时间=convert(varchar(20), [YEARMONTH], 120), 数量=sum([WORKLOAD])from [CTS_PROJECTPLAN_WORKLOAD]group by convert(varchar(20), [YEARMONTH], 120) </code></pre><h4 id="存储过程-基于sqlserver2012进行记录"><a href="#存储过程-基于sqlserver2012进行记录" class="headerlink" title="存储过程(基于sqlserver2012进行记录)"></a>存储过程(基于sqlserver2012进行记录)</h4><p>项目中要求的数据进行拼接过于多，因此使用存储过程，自己也对存储过程进行简单的学习。</p><blockquote><p>存储过程的概念：</p><p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。在数据量特别庞大的情况下利用存储过程能达到倍速的效率提升。</p></blockquote><pre class=" language-mssql"><code class="language-mssql">--情况1不带参数的存储过程create proc sp_nameasbegin    print 'helloworld'end--执行语句exec sp_name--删除当前的存储过程drop proc sp_name--2.带参数的存储过程create proc sp_name    @name nvarchar(50),    @author nvarchar(50)as begin    select * from Books where title = @name and Author = @authorend--执行带有参数的存储过程exec sp_name 'C# Primer 习题解答（第5版）','蒋爱军，李师贤，梅晓勇  著'exec sp_name @name = 'C# Primer 习题解答（第5版）' , @author = '蒋爱军，李师贤，梅晓勇  著'--3.带有默认值的存储过程create proc sp_name    @patt nvarchar(50) = '1046002111',    @repla nvarchar(50)as begin    select * from Articel_Words where [WordPattern] = @patt and [ReplaceWord] = @replaend--对参数进行更改exec sp_name @patt = 'newvalue'--4.带有输出参数的存储过程create proc usp_output@bookname nvarchar(50),@recordCount int output --关键字代表输出参数asbegin    select * from hero where bookname=@bookname    --把查询的记录条数赋值给变量@recordCount    set @recordCount = (select count(*) from hero where bookname=@bookname)end --调用带有参数的存储过程，需要定义变量，并把变量传递declare @num intexec usp_output @bookname='书剑恩仇录',@recordCount=@num outputselect @num as 记录条数--5.存储过程实现分页create proc usp_fenye@pagesize int=3, --每页记录的条数@index int=1,    --当前查看第几页的内容@recordcount int output, --总的条数@pagecount int output --总的页数asbegin    --分页    select        t.id,        t.bookname,        t.hero    from (select *,rn=row_number() over(order by id asc) from hero) as t    where t.rn between (@index-1) * @pagesize + 1 and @pagesize * @index    --计算总的条数    set @recordcount =( select count(*) from hero)    --计算总的页数    set @pagecount=ceiling(@recordcount * 1.0 / @pagesize)  --ceiling向上取整end--执行存储过程declare @tiaoshu intdeclare @yeshu intexec usp_fenye @pagesize=5,@index =3,@recordcount=@tiaoshu output,@pagecount=@yeshu outputselect @tiaoshu as 总的条数select @yeshu as 总的页数</code></pre><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><blockquote><p>drop produre sp_name</p><p>注意的是，存储过程中不能够删除另一个存储过程，只能够调用另一存储过程</p><p>每个不同的数据库具体实现不同</p><p>sqlserver使用：drop proc 存储过程名</p></blockquote><h4 id="其余的命令"><a href="#其余的命令" class="headerlink" title="其余的命令"></a>其余的命令</h4><blockquote><ol><li>show procedure status</li></ol><p>显示数据库中所有存储的存储过程基本信息</p><ol start="2"><li>show create procedure  sp_name </li><li>exec sp_name </li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题党--it星</title>
      <link href="/2020/01/14/gan-xie-xiang-yu/"/>
      <url>/2020/01/14/gan-xie-xiang-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎进入it星的博客"><a href="#欢迎进入it星的博客" class="headerlink" title="欢迎进入it星的博客"></a>欢迎进入it星的博客</h1><p>@(测试工具)[版权声明|不许抄袭]<br><strong>标题一：新建博客</strong><br>_ <strong>小标题</strong> ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>致看官的一封信：</strong></p><p>​    首先感谢您的浏览，本人的阶段性的学习记录都在该微博上公布，如果有与您方向一致的地方请您做出相应的批评与建议，本人的邮箱是itcing@.com,可以随时进行交流。</p><p>   本人从2018年九月开始结束计算机编程，由于个人原因好贪玩，导致学业并不是也别突出，因此准备将自己的技术栈进行填充，深入学习一些计算机的相关知识，随后将自己的学习记录放在本博客中，由于大部分的笔记是需要进行更新与重新设计，因此提交的时间不确定。</p><p>   希望看我博客的人越来越好看，感谢相遇，感谢网络。</p><p>​              此致</p><p>​       敬礼</p><p>​                       博客作者：it星</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录#文章分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客#文章标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
