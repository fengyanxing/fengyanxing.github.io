<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sqlserver使用的简单记录</title>
      <link href="/2020/03/23/sqlserver-shi-yong-de-jian-dan-ji-lu/"/>
      <url>/2020/03/23/sqlserver-shi-yong-de-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="记录项目中的业务处理-环境：sqlserver2012、vs2017"><a href="#记录项目中的业务处理-环境：sqlserver2012、vs2017" class="headerlink" title="记录项目中的业务处理(环境：sqlserver2012、vs2017)"></a>记录项目中的业务处理(环境：sqlserver2012、vs2017)</h3><h3 id="使用sql语句将数据转换成相应的格式"><a href="#使用sql语句将数据转换成相应的格式" class="headerlink" title="使用sql语句将数据转换成相应的格式"></a>使用sql语句将数据转换成相应的格式</h3><blockquote><p>1.使用cast函数,不能转换日期类型</p><p> cast(表达式 as 数据类型)</p></blockquote><pre class=" language-mssql"><code class="language-mssql">> select CAST(PLAN_LENGTH AS FLOAT) '长度' from [dbo].[CTS_PROJECTPLAN_DETAIL]</code></pre><blockquote><p>2.使用Convert函数通用</p><p>Convert(数据类型，表达式)</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">FLOAT</span> <span class="token punctuation">,</span>PLAN_LENGTH<span class="token punctuation">)</span> <span class="token string">'长度'</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>CTS_PROJECTPLAN_DETAIL<span class="token punctuation">]</span></code></pre></blockquote><h4 id="除法时遇到分母为0时的处理"><a href="#除法时遇到分母为0时的处理" class="headerlink" title="除法时遇到分母为0时的处理"></a>除法时遇到分母为0时的处理</h4><p>简单的示范：</p><pre class=" language-declaremssql"><code class="language-declaremssql">--定义变量并且设置分母为0，这样一定会出现错误declare @a int;declare @b int;set @a = 10;set @b = 0;select @a/@b--1.可以使用case语句进行判断操作,当分母为0时将其转换成1select case @b when 0 then 1 else @a/@b --2.使用函数nullif，该函数--nullif(express1,express2),如果express1==express2时，直接为null，将表达式2设置为0，遇到0时直接为nulldeclare @a int;declare @b int;set @a=10set @b=5select @a/nullif(@b,0)--当然最后的需要并不会是null值，可以使用isnull函数进行控制--isnull(express1,express2),如果e1为null时，返回e2declare @a int;declare @b int;set @a=10set @b=5select isnull(@a/nullif(@b,0),1)</code></pre><h4 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h4><blockquote><p>将两列数据位varchar类型的数据进行类型转换并进行除法运算</p><p>自己编写的语句是：</p><p>select</p><p>isnull(Convert(float,ziduan1)/nullif(Convert(float,字段2),0),1 ) ‘新列名’</p><p>from 表名</p><p>–简单的解释就是，两列char类型的数据进行float转换后进行除法，进行除数为0判断</p></blockquote><h4 id="查询数据库中的数据进行数据监视"><a href="#查询数据库中的数据进行数据监视" class="headerlink" title="查询数据库中的数据进行数据监视"></a>查询数据库中的数据进行数据监视</h4><p>要求：能够查出每周、每月、每年的工作量</p><blockquote><p>每日统计:<br>select 日期时间=convert(char(10), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(10), 日期时间, 120)</p><p>每周统计:<br>select 日期时间=datepart(week, 日期时间), 数量=sum(数量)<br>from T<br>where year(日期时间)=year(getdate())<br>group by datepart(week, 日期时间)</p><p>每月统计:<br>select 日期时间=convert(char(7), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(7), 日期时间, 120) </p></blockquote><p>直接进行更改，查询项目工作量的表中的workload列数据，按照周、月、日进行分组统计</p><pre class=" language-mssql"><code class="language-mssql">select 周计划=datepart(week,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where year([YEARMONTH])=year(getdate())group by datepart(week, [YEARMONTH])select 月计划=datepart(MONTH,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where month([YEARMONTH])=month(getdate())group by datepart(MONTH, [YEARMONTH])select 日期时间=convert(varchar(20), [YEARMONTH], 120), 数量=sum([WORKLOAD])from [CTS_PROJECTPLAN_WORKLOAD]group by convert(varchar(20), [YEARMONTH], 120) </code></pre><h4 id="存储过程-基于sqlserver2012进行记录"><a href="#存储过程-基于sqlserver2012进行记录" class="headerlink" title="存储过程(基于sqlserver2012进行记录)"></a>存储过程(基于sqlserver2012进行记录)</h4><p>项目中要求的数据进行拼接过于多，因此使用存储过程，自己也对存储过程进行简单的学习。</p><blockquote><p>存储过程的概念：</p><p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。在数据量特别庞大的情况下利用存储过程能达到倍速的效率提升。</p></blockquote><pre class=" language-mssql"><code class="language-mssql">--情况1不带参数的存储过程create proc sp_nameasbegin    print 'helloworld'end--执行语句exec sp_name--删除当前的存储过程drop proc sp_name--2.带参数的存储过程create proc sp_name    @name nvarchar(50),    @author nvarchar(50)as begin    select * from Books where title = @name and Author = @authorend--执行带有参数的存储过程exec sp_name 'C# Primer 习题解答（第5版）','蒋爱军，李师贤，梅晓勇  著'exec sp_name @name = 'C# Primer 习题解答（第5版）' , @author = '蒋爱军，李师贤，梅晓勇  著'--3.带有默认值的存储过程create proc sp_name    @patt nvarchar(50) = '1046002111',    @repla nvarchar(50)as begin    select * from Articel_Words where [WordPattern] = @patt and [ReplaceWord] = @replaend--对参数进行更改exec sp_name @patt = 'newvalue'--4.带有输出参数的存储过程create proc usp_output@bookname nvarchar(50),@recordCount int output --关键字代表输出参数asbegin    select * from hero where bookname=@bookname    --把查询的记录条数赋值给变量@recordCount    set @recordCount = (select count(*) from hero where bookname=@bookname)end --调用带有参数的存储过程，需要定义变量，并把变量传递declare @num intexec usp_output @bookname='书剑恩仇录',@recordCount=@num outputselect @num as 记录条数--5.存储过程实现分页create proc usp_fenye@pagesize int=3, --每页记录的条数@index int=1,    --当前查看第几页的内容@recordcount int output, --总的条数@pagecount int output --总的页数asbegin    --分页    select        t.id,        t.bookname,        t.hero    from (select *,rn=row_number() over(order by id asc) from hero) as t    where t.rn between (@index-1) * @pagesize + 1 and @pagesize * @index    --计算总的条数    set @recordcount =( select count(*) from hero)    --计算总的页数    set @pagecount=ceiling(@recordcount * 1.0 / @pagesize)  --ceiling向上取整end--执行存储过程declare @tiaoshu intdeclare @yeshu intexec usp_fenye @pagesize=5,@index =3,@recordcount=@tiaoshu output,@pagecount=@yeshu outputselect @tiaoshu as 总的条数select @yeshu as 总的页数</code></pre><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><blockquote><p>drop produre sp_name</p><p>注意的是，存储过程中不能够删除另一个存储过程，只能够调用另一存储过程</p><p>每个不同的数据库具体实现不同</p><p>sqlserver使用：drop proc 存储过程名</p></blockquote><h4 id="其余的命令"><a href="#其余的命令" class="headerlink" title="其余的命令"></a>其余的命令</h4><blockquote><ol><li>show procedure status</li></ol><p>显示数据库中所有存储的存储过程基本信息</p><ol start="2"><li>show create procedure  sp_name </li><li>exec sp_name </li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法思想记录</title>
      <link href="/2020/03/19/suan-fa-si-xiang-ji-lu/"/>
      <url>/2020/03/19/suan-fa-si-xiang-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>dijestla算法思想：<br>引入两个集合，<br>closelist和openlist，闭集合用来记录已经求出最短路径的顶点，开集合用阿里记录为求出最短路径的顶点。<br>集合1：记录源节点（A）到各个节点之间的距离；集合2记录节点对应上一级点（父节点）<br>1.将源节点A放入closelist，其余节点放入closelist，A不能到达的节点记为无穷大<br>2.从openlist中选出距离最短的点N，将顶点N加入closelist中，同时从openlist移除N<br>3.重新计算openlist中各个节点到起点A的距离<br>（重新计算openlist中节点的距离，是由于上一步中确定了N是求出最短路径的顶点，从而可以利用N更新其他顶点的距离，）<br>4.重复以上步骤，遍历所有的节点<br>Astar算法：在静态环境中求解最优路径的有效的直接搜索算法，算法采用启发式搜索，A<em>算法通过一个代价函数来确定搜索方向，从起点开始向周围扩展，通过代价函数计算得到周围每个节点的代价值，选择最小代价节点作为下一个扩展点，直到到达目标为止。<br>A</em>算法的代价函数f(n)=g(n)+h(n)<br>常见的估价函数：曼哈顿距离d12=|x1-x2|+|y1-y2|<br>欧式距离：p=sqrt((x2-x1)^2+(y2-y1)^2)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-sql</title>
      <link href="/2020/03/03/docker-sql/"/>
      <url>/2020/03/03/docker-sql/</url>
      
        <content type="html"><![CDATA[<p>搭建环境：<br>安装mysql：<br>docker search mysql；<br>docker pull mysql：latest<br>错误的启动mysql：<br>docker run –name mysql01 -d mysql<br>启动的mysql不能够使用，查看错误日志使用命令docker logs mysql镜像的id<br>正确启动mysql的命令：docker run –name mysql01 -e MYSQL_ROOT_PASSWORD=root23 -d mysql<br>以上命令在容器中启动不能被外网访问，需要做端口映射。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Docker</title>
      <link href="/2020/03/02/an-zhuang-docker/"/>
      <url>/2020/03/02/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>1.安装centos7<br>使用阿里云镜像</p><blockquote><p><a href="https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</a></p></blockquote><p> 使用VMware11.0安装centos7<br> 1.设置网络为桥接模式，重启网络设置<br> service network restart<br> 2.查看ip地址：ip addr<br> 3.查看Centos版本：使用uname -r (linux内核版本高于3.10)<br> 4.升级软件包及内核（小于3.10需要该操作）：yum update<br> 5.安装docker命令：yum install docker<br> 6.启动docker命令:systemctl start docker<br> 7.将docker服务设为开机启动：systemctl    enable docker<br> 8.查看docker版本： docker -v</p><pre><code>&gt;设置开机启动：systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</code></pre><p>检索操作：docker search 关键字<br>拉取信息：docker pull 镜像名：tag（tag可选择，多为软件的版本，默认最新版本）<br>列表：docker images<br>删除 ：docker rmi inage-id（删除指定版本的镜像）<br>下载镜像：<br>docker pull mysql</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用马克记录笔记</title>
      <link href="/2020/02/27/shi-yong-ma-ke-ji-lu-bi-ji/"/>
      <url>/2020/02/27/shi-yong-ma-ke-ji-lu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="使用马克记录笔记"><a href="#使用马克记录笔记" class="headerlink" title="使用马克记录笔记"></a>使用马克记录笔记</h1><p>@(我的笔记)[不许抄袭|挺好使用的]<br><strong>maven配置：</strong></p><blockquote><p>在maven的setting.xml中配置jdk1.8编译环境：</p></blockquote><pre><code> &lt;profile&gt;      &lt;id&gt;jdk18&lt;/id&gt;      &lt;activation&gt;          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;          &lt;jdk&gt;1.8&lt;/jdk&gt;      &lt;/activation&gt;      &lt;properties&gt;          &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;          &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;          &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;      &lt;/properties&gt;   &lt;/profile&gt; </code></pre><h2 id="Spring-Boot-的简单使用"><a href="#Spring-Boot-的简单使用" class="headerlink" title="Spring Boot 的简单使用"></a>Spring Boot 的简单使用</h2><p>一个功能：<br>浏览器发送hello请求， 服务器接受请求并处理，响应Hello World字符串：</p><h3 id="1-创建一个maven工程"><a href="#1-创建一个maven工程" class="headerlink" title="1.创建一个maven工程"></a>1.创建一个maven工程</h3><h4 id="导入spring-boot相关的依赖"><a href="#导入spring-boot相关的依赖" class="headerlink" title="导入spring boot相关的依赖"></a>导入spring boot相关的依赖</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="编写主程序，启动spring-boot应用"><a href="#编写主程序，启动spring-boot应用" class="headerlink" title="编写主程序，启动spring boot应用"></a>编写主程序，启动spring boot应用</h4><p>使用注解@SpringBootApplication，该注解用来标注一个主程序类，说明是一个springboot应用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="编写相关的业务逻辑"><a href="#编写相关的业务逻辑" class="headerlink" title="编写相关的业务逻辑"></a>编写相关的业务逻辑</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="直接运行主程序的main方法，访问本地的8080端口，输入-hello会调用Controller层的方法。"><a href="#直接运行主程序的main方法，访问本地的8080端口，输入-hello会调用Controller层的方法。" class="headerlink" title="直接运行主程序的main方法，访问本地的8080端口，输入/hello会调用Controller层的方法。"></a>直接运行主程序的main方法，访问本地的8080端口，输入/hello会调用Controller层的方法。</h4><h4 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h4><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--导入maven插件对项目进行打包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>导入插件，使用插件对项目进行打包，生成jar文件使用java -jar 文件来进行运行，使得项目能够运行。</p><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><h4 id="pom-xml文件："><a href="#pom-xml文件：" class="headerlink" title="pom.xml文件："></a>pom.xml文件：</h4><p>1.父项目</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--父项目的配置文件中的父项目，其管理spring boot 应用中的所有依赖版本（版本仲裁）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>2.导入依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-starter-web:<br>spring-boot-starter:spring-boot场景启动器，能够导入web模块启动相关依赖的组件<br>Spring boot将所有的功能场景抽取出来，作成一个个starters（启动器），需要什么样的场景导入什么样的启动器。</p><h4 id="2-主程序类，主入口类"><a href="#2-主程序类，主入口类" class="headerlink" title="2.主程序类，主入口类"></a>2.主程序类，主入口类</h4><p>需要使用@SpringBootApplication注解:该注解标注的类是springboot的主配置类，springboot使用该类的main方法来启动springboot应用。<br>注解1.@SpringBootConfiguration:配置注解<br>注解2.@EnableAutoConfiguration开启自动配置功能的注解<br>注解3.@AutoConfigurationPackage:自动配置包，能够将主配置类所在的包中所有的组件扫描到spring容器中<br>注解4.@Import给容器中导入组件，将所有需要导入的组件以全类名的方式进行返回，并且将这些组件导入到容器中。<br>spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入容器中，自动配置类会生效，之前spring等框架手动配置的，自动配置类会进行配置。</p><h3 id="使用Spring-initializer-快速创建spring-boot项目"><a href="#使用Spring-initializer-快速创建spring-boot项目" class="headerlink" title="使用Spring initializer 快速创建spring boot项目"></a>使用Spring initializer 快速创建spring boot项目</h3><p>idea支持使用spring项目创建向导快速创建一个Spring Boot项目，选择自己需要的模块<br>resources文件夹中目录结构：<br>  static:保存所有的静态资源：js css images<br>  templates:保存所有的模板页面，可以使用模板引擎<br>   application.properties:SpringBoot应用的配置文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标题党--卑微星</title>
      <link href="/2020/01/14/huan-ying-jin-ru-xing-xing-de-bo-ke/"/>
      <url>/2020/01/14/huan-ying-jin-ru-xing-xing-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎进入星星的博客"><a href="#欢迎进入星星的博客" class="headerlink" title="欢迎进入星星的博客"></a>欢迎进入星星的博客</h1><p>@(测试工具)[版权声明|不许抄袭]<br><strong>标题一：新建博客</strong><br>_ <strong>小标题</strong> ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>###公式测试：<br>$\Gamma(n)=(n-1)!\quad\forall n\in\mathbb N$</p>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录#文章分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客#文章标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/14/hello-world/"/>
      <url>/2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
