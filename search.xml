<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web学习的简单记录</title>
      <link href="/2020/04/01/web-xue-xi-de-jian-dan-ji-lu/"/>
      <url>/2020/04/01/web-xue-xi-de-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h4 id="Web学习的简单记录"><a href="#Web学习的简单记录" class="headerlink" title="Web学习的简单记录"></a>Web学习的简单记录</h4><h5 id="一、Html简单记录"><a href="#一、Html简单记录" class="headerlink" title="一、Html简单记录"></a>一、Html简单记录</h5><h6 id="1-html简单介绍"><a href="#1-html简单介绍" class="headerlink" title="1.html简单介绍"></a>1.html简单介绍</h6><blockquote><p>HTML:超文本标记语言，标记语言不是编程语言，是用一组标签对内容进行描述的语言<br>HTML语法和规范：所有的html文件都要以.htm或者.html结尾<br>html文件由头文件<head><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head>和体部分<body></body>组成<br>html标签都是有开始标签和结束标签组成，其忽略大小写一般用小写</p></blockquote><h6 id="2-html简单规则"><a href="#2-html简单规则" class="headerlink" title="2.html简单规则"></a>2.html简单规则</h6><blockquote><p>①标签不能交叉嵌套</p><p>②标签必须正确关闭(闭合)</p><p>③属性必须有值，属性值必须加引号</p><p>④注释不能嵌套</p></blockquote><h6 id="3-html标签"><a href="#3-html标签" class="headerlink" title="3.html标签"></a>3.html标签</h6><blockquote><p>标题标签：<hn></hn></p><p>水平标签：<hr/></p><p>段落标签：<p></p></p><p>字体标签：<font color="#00ee00" size="5"></font></p><p>表单标签：所有需要提交到服务器端的表单必须使用<form></form>括起来</p><p>特殊字符：&lt;    ———&gt;   &amp;lt、&gt;  ———&gt;   &amp;gt 、空格   ———&gt;  &amp;nbsp </p></blockquote><blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--超链接标签：&lt;a href="" >&lt;/a>href属性设置连接地址target属性设置哪个目标进行跳转_self  跳转到另一个页面，不打开新的地址，默认_blank  跳转到另一个页面，打开新的地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--列表标签   无序列表ul  有序列表ol        ul是无需列表            type属性可以修改        li是列表项--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>赵四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>刘能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>小沈阳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>宋小宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--图片标签        显示一张美女照片        img属性，显示照片           src属性可以设置图片的路径           width:设置图片宽度           height:设置图片高度           border:设置边框           alt:当图片不存在时，替换的文字或路径        相对路径：从工程中开始算        绝对路径：盘符/目录/文件名--></span><span class="token comment" spellcheck="true">&lt;!--        table 标签是表格标签            border 设置表格标签            width 设置表格宽度            height 设置表格高度            align 设置表格相对于页面的对齐方式            cellspacing 设置单元格间距        tr     是行标签        th    是表头标签        td  是单元格标签            align 设置单元格文本对齐方式        b 是加粗标签--></span><span class="token comment" spellcheck="true">&lt;!--ifarme标签可以在页面上开辟一个小区域显示一个单独的页面      ifarme和a标签组合使用的步骤:          1 在iframe标签中使用name属性定义一个名称          2 在a标签的target属性上设置iframe的name的属性值--></span></code></pre></blockquote><h6 id="4-向服务器提交的内容必须都包含在form标签中"><a href="#4-向服务器提交的内容必须都包含在form标签中" class="headerlink" title="4.向服务器提交的内容必须都包含在form标签中"></a>4.向服务器提交的内容必须都包含在form标签中</h6><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--        form标签就是表单            input type=text     是文件输入框  value设置默认显示内容            input type=password 是密码输入框  value设置默认显示内容            input type=radio    是单选框    name属性可以对其进行分组   checked="checked"表示默认选中            input type=checkbox 是复选框   checked="checked"表示默认选中            input type=reset    是重置按钮      value属性修改按钮上的文本            input type=submit   是提交按钮      value属性修改按钮上的文本            input type=button   是按钮          value属性修改按钮上的文本            input type=file     是文件上传域            input type=hidden   是隐藏域    当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）            select 标签是下拉列表框            option 标签是下拉列表框中的选项 selected="selected"设置默认选中            textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）                rows 属性设置可以显示几行的高度                cols 属性设置每行可以显示几个字符宽度--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>&lt;input type="radio" name="" value="" checked=""/ ><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token punctuation">></span></span>菜单2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>在选择中selected=“selected”为默认的选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--        form标签是表单标签            action属性设置提交的服务器地址            method属性设置提交的方式GET(默认值)或POST        表单提交的时候，数据没有发送给服务器的三种情况：            1、表单项没有name属性值            2、单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器            3、表单项不在提交的form标签中        GET请求的特点是：            1、浏览器地址栏中的地址是：action属性[+?+请求参数]                请求参数的格式是：name=value&amp;name=value            2、不安全            3、它有数据长度的限制        POST请求的特点是：            1、浏览器地址栏中只有action属性值            2、相对于GET请求要安全            3、理论上没有数据长度的限制--></span> <span class="token comment" spellcheck="true">&lt;!--DIV相关技术：DIV是一个块级元素（单独显示一行）。它单独使用没有任何意义必须结合css    使用，它主要应用于页面的布局。    span她是一个html标签，一个内联元素（显示一行）。它单独使用没有任何意义，必须结合css    使用。它主要用于对括起来的内容进行式的修饰            div标签       默认独占一行            span标签      它的长度是封装数据的长度            p段落标签     默认会在段落的上方或下方各空出一行来（如果已有就不再空）--></span></code></pre><h5 id="二、CSS层叠样式表"><a href="#二、CSS层叠样式表" class="headerlink" title="二、CSS层叠样式表"></a>二、CSS层叠样式表</h5><h6 id="1-css技术介绍："><a href="#1-css技术介绍：" class="headerlink" title="1.css技术介绍："></a>1.css技术介绍：</h6><p>Cascading Style Sheet指的是层叠样式表，样式由html元素显示，样式通常存储在样式表中，把样式添加在html中，用于解决内容与表现分离的问题</p><h6 id="2-css中的常用选择器"><a href="#2-css中的常用选择器" class="headerlink" title="2.css中的常用选择器"></a>2.css中的常用选择器</h6><blockquote><p>常见的选择器：<br>1.元素选择器</p><style>div{属性名1：属性值1；属性名2：属性值2；属性名3：属性值3；}</style><p>在实体中：</p><div>....</div><p>2.类选择器</p><style>.div2{属性名1：属性值1；属性名2：属性值2；属性名3：属性值3；}</style><p>在实体中：</p><div class="div2">.....</div><p>3.id选择器—唯一性</p><style>#div3{属性名1：属性值1；属性名2：属性值2；属性名3：属性值3；}</style><p>在实体中：</p><div id="div3">...</div><p>4.层级选择器</p><style>div p{font-size:30px;color:green;}</style><p>在实体中：</p><div><p>......</p></div><p>5.属性选择器</p><style>input[type='text']{background-color:red;}input[type='password']{background-color:blue;}</style><p>在实体中</p><body>用户名：<input type="text" name="username"/><br/>密码：<input type="password" name="password"/></body></blockquote><h6 id="3-css的引入方式"><a href="#3-css的引入方式" class="headerlink" title="3.css的引入方式"></a>3.css的引入方式</h6><blockquote><p>css引入的方式：<br>1.行内引入<div style="color:red;font-size:100px;"> 内容</div><br>2.内部引入方式</p><style typle="text/css">div{color:red;font-size:100px;}</style><p>style代表了设置样式<br>3.外部引入：使用地址引入</p></blockquote><h5 id="三、javascript"><a href="#三、javascript" class="headerlink" title="三、javascript"></a>三、javascript</h5><h6 id="1-js简单介绍"><a href="#1-js简单介绍" class="headerlink" title="1.js简单介绍"></a>1.js简单介绍</h6><p>javascript被设计用来向html页面添加交互行为，其是一种脚本语言（是一种轻量级语言）。<br>javascript是一种解释型语言，是基于对象和事件的脚本语言，主要应用在客户端，由浏览器来执行js代码。可以与用户执行信息交互，具有安全性，不允许访问本地硬盘。</p><p><strong>java与javascript的区别：无关</strong></p><blockquote><p>javascript包含有：<strong>DOM、BOM、ECMAscript</strong>(DOM:js操作操作网页，BOM:js操作浏览器)<br>ECMAscript：它是整个javascript的核心，包含（基本语法、变量、关键字、保留字、数据类型、语句、函数）<br>ECMAscript:有<strong>五种原始的类型</strong>：undefined、null、boolean、number、string</p></blockquote><h6 id="2-js的使用"><a href="#2-js的使用" class="headerlink" title="2.js的使用"></a>2.js的使用</h6><blockquote><p>javascript数据类型分为<strong>原始数据类型和引用数据类型</strong><br>原始：String（字符串）、number（数字）、boolean（布尔）、<br>null（空对象，只有一个值null）、undefined（未定义，只有一个值undefined）、Object（对象类型）、函数类型：function<br>引用数据类型：Arrey 、Boolean、 Date、 Math、 Number、 String 、ReqExp<br>语句（if-else、while、do-while、for、switch、continue、break）</p></blockquote><h6 id="3-js中遵循的一些原则："><a href="#3-js中遵循的一些原则：" class="headerlink" title="3.js中遵循的一些原则："></a>3.js中遵循的一些原则：</h6><blockquote><p>js中的特殊值：<br>undefined：未定义，所有js变量为赋予初始值<br>null  空值<br>NAN   不合法的值</p><p>js中的<strong>全等于和等于</strong><br>等于==  简单的字面比较<br>全等于===  都比较，比较字面值和值类型<br><strong>js逻辑运算</strong><br>且   &amp;&amp;<br> 当表达式为真的时候,返回最后一个表达式的值<br> 当表达式中有一个为假的值时候，返回第一个为假的表达式的值<br>或   ||<br> 当表达式全为假，返回最后一个表达式的值<br> 只要有一个表达式为真，就会把第一个为真的表达式的值返回<br>非   |<br>在js中所有变量都可以为一个boolean类型的变量去使用，<br>0，null，undefined，“”空串可以认为是false</p></blockquote><h6 id="4-js中函数的定义、对象的定义、事件的介绍："><a href="#4-js中函数的定义、对象的定义、事件的介绍：" class="headerlink" title="4.js中函数的定义、对象的定义、事件的介绍："></a>4.js中函数的定义、对象的定义、事件的介绍：</h6><blockquote><p><strong>函数定义</strong></p><pre><code>1.  function 函数名（形式参数）{      函数体；      return 结果；#可有可无}</code></pre><ol start="2"><li><p>var 函数名 = function(){<br> 函数体；<br> return  返回值；<br>}</p><p>js中函数不允许重载，后面的会替换前面的函数，不允许方法重名<br>函数的arguments隐形参数，是一个可变长参数，操作该变量相当于数组操作</p><p><strong>js中定义对象</strong><br>Object形式的自定义对象<br> var 变量名 = new Object();<br> 变量名.属性名 = 值；<br> 变量名.函数名=function(){}<br>{}花括号形式的自定义对象<br> var 变量名={</p><pre><code> 属性名：值， 属性名：值， 函数名：function（）{}</code></pre><p> }；<br><strong>js中的事件：</strong><br>onload 加载事件  页面加载完成后，常用于做页面js代码初始化事件<br>onclick单击事件  常用于按钮点击后响应操作<br>onblur失去焦点事件  常用于输入框失去焦点后验证其输入内容是否合法<br>onchange 内容发生改变事件  常用于下拉列表和输入框内容发生改变后操作<br>onsubmit 表单提交事件  常用于表单提交前，验证所有表单项是否合法<br>事件注册分为静态注册和动态注册</p></li></ol></blockquote><h6 id="5-js中获取Document对象"><a href="#5-js中获取Document对象" class="headerlink" title="5.js中获取Document对象"></a>5.js中获取Document对象</h6><p>DOM（Document Object Model）：文档对象模型，包含（整个html页面的内容）</p><blockquote><p>Document对象方法介绍：</p><ol><li>document.getElementById(elementId)通过标签id属性查找标签dom对象，elementId是标签的id属性</li><li>document.getElementsByName(elementName)通过标签的name属性查找标签dom对象，elementName标签的name属性值</li><li>document.getElementByTagName(tagname)通过标签名查找dom对象，tagname是标签名</li><li>document.createElement(tagName)方法，通过给定的标签名，创建一个标签对象，tagName是要创建的标签名<br><strong>BOM：浏览器对象模型，（整个浏览器相关内容）</strong><br>1.window：alert（）；prompt（）；setInterval（）；clearInterval（）；setTimeout（）；clearTimeout（）<pre><code>history：go（参数）；back（）；forward（）location：href属性</code></pre>2.事件：<pre><code>onsubmit（）此事件写在form标签中，必须有返回值    onload（）此事件只能写一次并且放到body标签中其他事件需要放到需要操作的元素位置（onclick、onfocus、onblur）</code></pre>3.获取元素：<pre><code>document.getElementById（“id”）</code></pre>4.获取元素里面的值：<pre><code>document.getElementById（“id”）.value</code></pre>5.向页面输出：<pre><code>弹窗：alert（）；想浏览器写入内容：document.writer（内容）；想页面指定位置写入内容：innerHTML</code></pre></li></ol></blockquote><h6 id="6-正则表达式简单入门"><a href="#6-正则表达式简单入门" class="headerlink" title="6.正则表达式简单入门"></a>6.正则表达式简单入门</h6><blockquote><p>//格式1：var patt = new RegExp(“e”);<br>//格式2：var patt = /e/;<br>//格式1与格式2等价，表示要求字符串中是否包含小写字母</p><p>var prep = /[a-z]/;<br>var bigstr = /\w/;<br>// 至少包含一个a   /a+/    有零个或者多个a   /a*/</p><p>//表示要求字符串包含一个或零个a  /a?/<br>//表示连续的n个a  /a{n}/—&gt;例如3个a/a{3}/  至少有3个a最多有5个a  /a{3,5}/<br>//表示匹配一a结尾的字符串 a$<br>//^尖括号表示以a打头，/^a/<br>//从头到尾全部匹配/^a{3,5}$/<br>//数字字母下划线，字符串长度为3到5位/^\w{3,5}$/</p></blockquote><h5 id="四、Jquery（学习的不够，暂时不进行记录）"><a href="#四、Jquery（学习的不够，暂时不进行记录）" class="headerlink" title="四、Jquery（学习的不够，暂时不进行记录）"></a>四、Jquery（学习的不够，暂时不进行记录）</h5><h5 id="五、servlet"><a href="#五、servlet" class="headerlink" title="五、servlet"></a>五、servlet</h5><h6 id="1-servlet简单介绍"><a href="#1-servlet简单介绍" class="headerlink" title="1.servlet简单介绍"></a>1.servlet简单介绍</h6><blockquote><p>servlet  运行在服务器端的java小程序，用来处理客户端请求、响应给浏览器的动态资源。<br>但是servlet的实质就是java代码，通过java的API动态的向客户端输出内容</p></blockquote><h6 id="2-servlet规范-接口"><a href="#2-servlet规范-接口" class="headerlink" title="2.servlet规范/接口"></a>2.servlet规范/接口</h6><blockquote><p>  实现步骤：1）创建类实现Servlet接口；2）覆盖尚未实现的方法–service方法  3）在web.xml进行servlet的配置<br>  开发中经常继承HTTPservelet<br>  实现步骤：1）创建类继承HttpServlet类 2）覆盖doGet和doPost   3）在web.xml中进行servlet的配置</p><p>  实现Servlet接口需要实现的方法：</p><p>  init（ServlerConfig config）方法：初始化，在servlet对象创建的时候执行<br>       参数ServlerConfig代表是该servlet对象的配置信息<br>  service（ServletRequest request，ServletRespose respose）方法：每次请求（刷新页面）都会执行<br>       参数ServletRequest代表请求 认为ServletRequest内部封装的是http请求信息；<br>       参数ServletResponse代表响应 认为要封装的是响应信息<br>  destroy方法：servlet销毁时执行</p></blockquote><h6 id="3-servlet生命周期"><a href="#3-servlet生命周期" class="headerlink" title="3.servlet生命周期"></a>3.servlet生命周期</h6><blockquote><p>默认在<strong>第一次访问servlet时创建servlet对象</strong>，会调用init方法<br>servlet销毁：<br><strong>服务器关闭时servlet销毁</strong>，会调用destory方法<br><strong>每次访问</strong>（刷新页面）必然执行的方法有：<br>service（ServletRequest req，ServletResponse res）方法;</p></blockquote><p>4.servlet的request与response</p><blockquote><p><strong>request</strong>：获取请求行（getMethod（）；getContextPath）、<br>   获取请求头(getHeader(name);),<br>   获取请求体(getParameter()/getParameterMap())<br>     转发和域对象（request.getRequestDispatcher(url).forward();setAttribute();getAttribute()）<br><strong>response</strong>:设置响应行：setStatus()<br>      设置响应头：setHeader(name,value)<br>     设置响应体：getWriter();write();getOutputStream().write()</p></blockquote><h5 id="六、xml可扩展标记语言"><a href="#六、xml可扩展标记语言" class="headerlink" title="六、xml可扩展标记语言"></a>六、xml可扩展标记语言</h5><h6 id="1-DTD约束"><a href="#1-DTD约束" class="headerlink" title="1.DTD约束"></a>1.DTD约束</h6><blockquote><p>DTD约束（为了使得用户书写时规范一些）： Document Type Definition，文档定义类型<br>DTD引入方式：<br>    1.内部嵌入（当前xml有效）：<!DOCTYPE web-app[...写入语法......]><br>        <web-app></web-app><br>    2.本地DTD:<!DOCTYPE web-app SYSTEM="文件名.dtd"><br>        <web-app></web-app><br>    3.网络DTD:<!DOCTYPE web-app     PUBLIC="url路径/文件名.dtd"><br>        <web-app></web-app></p></blockquote><h6 id="2-Schema约束："><a href="#2-Schema约束：" class="headerlink" title="2.Schema约束："></a>2.Schema约束：</h6><blockquote><p>新的xml约束，比DTD强大许多，Schema是cml文档以xsd为扩展名，功能强大，支持命名空间<br>约束文档 1.引入w3c预定义的名称空间：xmlns=“<a href="http://www.w3c.org/2001/XMLSchema”" target="_blank" rel="noopener">http://www.w3c.org/2001/XMLSchema”</a><br>2.自定义一个命名空间：targeName=“路径url”<br>3.定义元素和属性<br>4.引入w3c的实例文档：xmlns=“<a href="http://www.w3c.org/2001/XMLSchema-instance”" target="_blank" rel="noopener">http://www.w3c.org/2001/XMLSchema-instance”</a><br>5.引入自定义名称空间：xmlns=“<a href="http://url”" target="_blank" rel="noopener">http://url”</a><br>6.引入文档所在位置：xsi：文档名=“文档路径url”</p></blockquote><h6 id="3-xml解析"><a href="#3-xml解析" class="headerlink" title="3.xml解析"></a>3.xml解析</h6><blockquote><p>1.DOM解析：将文档一次性加载到内存形成树形结构进行解析。文档很大时容易内存溢出<br>2.SAX解析：时间驱动方式解析，边读取边解析。不便于增删操作。<br>3.PULL：android内置的xml解析方式，类似于sax</p><p><strong>解析器：</strong>JAXP（sun公司支持DOM和SAX）、JDom、<br>   jsoup（一种处理HTML的解析包）、dom4j（比较常用的解析开发包，hibernate底层采用）</p><p><strong>常用的API以及方法：</strong><br>   1.SaxReader对象:read()方法执行xml文档<br>   2.Document对象：getRootElement（）获得根元素<br>   3.Element对象：elements()获取指定名称的所有子元素;element()获取第一个元素;getName();<br>   attributeValue()获取指定属性名的属性值;elementText()获取指定名称子元素的文本值;<br>   getText()获得当前元素文本内容</p><p>步骤：1.获取解析器；2.获取document文档对象；3.获取根元素；<br>   4.获取元素下的子元素；5.遍历子元素；6.判断元素是否为servlet元素使用equals()方法</p></blockquote><h6 id="4-反射"><a href="#4-反射" class="headerlink" title="4.反射"></a>4.反射</h6><blockquote><p>动态获取指定类以及类中的内容（成员），并运行其内容（不能new对象，智能获取类全名获取信息）<br>获取Class的三种方式：<br>    1.通过对象的getClass（）方法对应的字节码文件<br>    2.每个类型具备一个class静态属性，通过该属性可获取该类的字节码文件对象<br>    3.class.forName（“全类名”）；通过获取类名并作为参数传递，提高扩展性（JDBC也使用）<br>通常使用第三种方法获取，在使用class.newInstance（）；指定类中默认的空参构造函数完成初始化</p></blockquote><h5 id="七、jsp"><a href="#七、jsp" class="headerlink" title="七、jsp"></a>七、jsp</h5><h6 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h6><blockquote><p>servlet技术：相当于在java代码中嵌入html，擅长java代码<br>jsp技术：相当于在html中嵌入java代码，擅长页面</p></blockquote><h6 id="1-jsp脚本"><a href="#1-jsp脚本" class="headerlink" title="1.jsp脚本"></a>1.jsp脚本</h6><blockquote><p>1） &lt;%java代码%&gt;：这种形式被翻译到service方法的内部<br>2)&lt;%=java变量表达式%&gt;：这种java代码被翻译成service方法内部out.print（）<br>3）&lt;%！java代码%&gt;：这种会被翻译成servlet的成员内容</p></blockquote><h6 id="2-jsp注释"><a href="#2-jsp注释" class="headerlink" title="2.jsp注释"></a>2.jsp注释</h6><blockquote><p>1）Html的注释<!--注释-->：这种形式的注释可见范围：jsp源码、翻译后的servlet、页面显示的html源码<br>2）java注释:单行注释//；多行注释/**/：这种形式的注释可见范围：可见范围jsp源码，翻译后的servlet<br>3）jsp注释:&lt;%–注释–%&gt;：可见范围：jsp源码<br>jsp本质就是servlet，执行过程：第一次访问—&gt;helloServlet.jsp—-&gt;helloServlet_jsp.java—-&gt;编译运行</p></blockquote><h6 id="3-jsp指令（三大指令）"><a href="#3-jsp指令（三大指令）" class="headerlink" title="3.jsp指令（三大指令）"></a>3.jsp指令（三大指令）</h6><blockquote><p>1）<strong>page指令</strong>（jsp上边显示的几行）：<br>    &lt;%@page 属性名1=‘属性值1’ 属性名二=‘属性值2’ …%&gt;<br>    常用属性：语言language：；文本类型contentType；文件编码pageEncoding；<br>        脚本中直接使用session对象：设置属性session=true;<br>        继承(不能随意继承，不经常使用)extends=””;<br>        导包import=”包名”;产生错误后页面跳转位置errorPage=”跳转页面”<br>    若是404找不到文件错误在web.xml里设置全局的错误页面：<br><error-page><br><error-code>404</error-code><br><location>跳转页面路径</location><br></error-page><br>2）<strong>include指令：</strong>&lt;%@ include file=”另一个页面”%&gt;<br>3）<strong>taglib指令：</strong>引入标签库，格式：&lt;%@taglib uri=”标签库地址” prefix=”前缀”%&gt;</p></blockquote><h6 id="4-jsp九大内置对象"><a href="#4-jsp九大内置对象" class="headerlink" title="4.jsp九大内置对象"></a>4.jsp九大内置对象</h6><blockquote><p>1.out：页面输出；request：得到用户请求；  response：用于服务器响应</p><p>2.page:指当前页面转换后的Servlet类的实例；  pageContext:jsp页面容器application：所有用户的共享信息；</p><ol start="3"><li>session:用来保存用户的信息 ; config:服务器配置，可以取得初始化参数； exception:表示jsp页面所发生异常；<br>out缓冲区默认为8kb；out缓冲区的数据会被放置在response缓冲区</li></ol></blockquote><h6 id="5-jsp四大域"><a href="#5-jsp四大域" class="headerlink" title="5.jsp四大域"></a>5.jsp四大域</h6><blockquote><p>page域：当前jsp页面范围<br>   request域：一次请求<br>   session域：一次会话<br>   application域：整个web应用</p></blockquote><h6 id="6-jsp标签"><a href="#6-jsp标签" class="headerlink" title="6.jsp标签"></a>6.jsp标签</h6><blockquote><p>页面包含：&lt;jsp:include page=”被包含的页面”/&gt;<br>    静态包含：&lt;%@include file=”被包含的页面”%&gt;;<br>    动态包含：&lt;jsp:include page=”被包含的页面”&gt;<br>静态将两个页面合成一个页面，然后形成java文件，在进行编译执行<br>动态包含是将两个页面分开，各自形成java文件，随后进行各自的编译，包含的页面执行时需要被包含页面的信息，被包含的页面进行在进行执行</p></blockquote><h6 id="7-EL技术"><a href="#7-EL技术" class="headerlink" title="7.EL技术"></a>7.EL技术</h6><blockquote><p>EL表达式：减少jsp脚本编写，EL目的是要替代jsp页面中脚本的编写<br>    EL从域中取数据，格式：${EL表达式}<br>    例如：EL获取pageContext域中的值${pageContextScope.key}<br>          EL获取request域中的值${requestScope.name}<br>          EL获取session域中的值${sessionScope.name}<br>          EL获取application域中的值${applicationScope.name}</p></blockquote><h6 id="8-el内置对象有11个"><a href="#8-el内置对象有11个" class="headerlink" title="8.el内置对象有11个"></a>8.el内置对象有11个</h6><blockquote><p>pageScope、requestScope、sessionScope、applicationScope、<br>param、paramValues、（接收参数）<br>header、HeaderValues、（获取请求头）<br>cookie、（web开发中的cookie）<br>initParam、（获取全局初始化参数）<br>pageContext （web开发中的pageContext）</p><p>例如：使用el表达式在jsp页面中可以获取项目名${pageContext.request.contextpath}</p></blockquote><h6 id="9-jstl（jsp-Standard-Tag-Library）："><a href="#9-jstl（jsp-Standard-Tag-Library）：" class="headerlink" title="9.jstl（jsp Standard Tag Library）："></a>9.jstl（jsp Standard Tag Library）：</h6><p>jsp标注标签库，可以嵌入在jsp页面中使用标签的形式完成业务逻辑等功能。</p><blockquote><p>&lt;%@taglib uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> prefix=”c” %&gt;<br>五个字库：Core、I18N、SQL、XML、Functions，最长用的是core库<br>jstl标签库导入：使用jsp的taglib指令<br>if标签：&lt;c:if test=””&gt;</c:if><br>foreach标签：    &lt;c:forEach items=”${list}” var=”str”&gt;<br>       ${str }<br/><br>       </c:forEach></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis学习简单记录</title>
      <link href="/2020/03/31/redis-xue-xi-jian-dan-ji-lu/"/>
      <url>/2020/03/31/redis-xue-xi-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>nosql (not only sql)非关系型数据库</p><p>Nosql数据库种类较多，但是都有一个特点是去点关系型数据库的关系特性。</p><p>互联网的</p><p><strong>三高：高并发、高扩展、高负载</strong></p><p>3V：<strong>海量(Volume)、多样(Variety)、实时(Velocity)</strong></p><p>redis的配置文件中设定了数据库的个数，默认是16个（0-16-1个）</p><p>select 切换数据库</p><p>DBsize查看当前数据库的key的数量</p><p>linux下启动redis：</p><p>进入到redis安装目录(我的路径)：cd  /usr/local/redis/bin/</p><p>将会看到有很多相关的redis文件，启动并访问redis服务：</p><blockquote><p>./redis-server redis.conf</p><p>./redis-cli  -p  6379</p></blockquote><p><strong>redis的键：</strong></p><blockquote><p>keys *</p><p>exists key的名字，判断某个key是否存在</p><p>move   key db  当前库被移除</p><p>expire key  秒值   给当点的key设置过期时间</p><p>ttl key 查看还有多少秒过期 -1表示永不过期 -2表示已经过期</p><p>type key 查看你的key是什么类型</p></blockquote><p><strong>redis的五大数据类型</strong></p><p><strong>1.redis的String 字符串</strong>：string是redis最基本的类型，一个key对应一个value，最大的value最多可以是512M。可以存图片或者序列化的对象(常用命令)</p><blockquote><p>set/get/del/append/strlen</p><p>Incr/decr/incrby/decrby</p><p>getrange/setrange</p><p>setex(set with expire)键秒值/setnx(set if not exist)</p><p>mset/mget/msetnx</p><p>getset(先get再set)</p></blockquote><p><strong>2.redis的Hash哈希</strong>：是一个键值对的集合，适用于存储对象(k,v模式，v是一个键值对,常用命令)</p><blockquote><p>hset/hget/hmset/hmget/hgetall/hdel  基本的添加与查询</p><p>hlen 查询长度</p><p>hexist key 在key里面的某个值的key</p><p>hkeys/hvals</p><p>hincrby/hincrbyfloat</p><p>hsetnx  如果存在不插入，不存在插入</p></blockquote><p><strong>3.redis的List列表</strong>：是一个简单的字符串列表</p><blockquote><p>lpush/rpush/lrange</p><p>lpop/rpop</p><p>lindex：按照索引下标获取元素</p><p>llen ：查看集合长度</p><p>lrem key  删除N个value</p><p>ltrim key 开始index   结束index：截取指定范围的值后在赋值给key</p><p>rpoplpush  源列表   目的列表</p><p>lset key index value</p><p>linsert key before/after 值1 值2</p></blockquote><p><strong>4.redis的Set集合</strong>：是一个无序无重复的集合(单值多value，常用命令)</p><blockquote><p>sadd/smembers/sismember</p><p>scard：获取集合里面的元素个数</p><p>srem key value ：删除集合中元素</p><p>srandmember key 某个整数</p><p>spop key ：随机出栈</p><p>smove key1 key2 在key1里某个值  作用是将key1中的某个值赋给key2</p><p>数学集合类：差集：sdiff  交集：sinter  并集：sunion</p></blockquote><p><strong>5.redis的Zset(Sorted set:有序集合)</strong>：有序的集合，不允许有重复的成员，每个元素都会有一个关联的double类型的分数，根据分数进行从小到大的排序</p><blockquote><ol><li>zadd/zrange</li></ol><p>注：zrange常与withscores联合使用</p><ol start="2"><li>zrangebyscore key 开始score 结束score</li></ol><p>注：zrangebyscore  key 开始scorre 结束score  (withscore 或者‘（’表示不包含或者limit返回限制)</p><p>例子1：zrangescore   zset01  60   (90   表示zset集合中分数大于等于60小于90的元素的键值对的键值</p><p>例子2：zrangescore   zset01  60   (90  withscores   表示zset集合中分数大于等于60小于90的元素整个键值对</p><p>例子3：zrangescore   zset01  60   (90  limit 2  2     表示zset集合中分数大于等于60小于90的元素键值从2位置查两个</p><ol start="3"><li>zcard/zcount key score区间/zrank key values值，作用是获取下标值/zscore key 对应值，获得分数</li><li>zrevrank key values 作用是逆序获取下标值</li><li>zrevrange</li><li>zrevrangebyscore key</li></ol></blockquote><p><a href="http://redisdoc.com/" target="_blank" rel="noopener">redis命令大全</a></p><p><strong>redis的配置文件redis.conf:</strong></p><p>Unitsd单位：对于大小写不敏感，GB gb  都一样。</p><p>INCLUDES包含：标准的模板，可以包含其他的配置文件，使用include进行引入</p><p>GENERAL：TCP-backlog=511（默认），其是一个连接队列。还包含redis日志，四个日志级别：debug、verbose、notice、waring</p><p> SNAPSHOTTING快照：</p><p>SECURITY安全：</p><p>   自己配置密码：config set requirepass “123456”</p><p>   登录时需验证：auth 123456</p><p>LIMITS限制：Maxclients、Maxmemory、Maxmemory-policy、Maxmemory-samples(默认5个样例)</p><blockquote><p>Maxmemory-policy缓存过期机制：</p><p>volatile-lru:使用LRU（最近最少使用淘汰）算法移除key，只针对于过期时间的键</p><p>allkeys-lru：使用LRU（最近最少使用淘汰）算法移除key</p><p>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</p><p>allkeys-random：移除随机的key</p><p>volatile-ttl:移除那些TTL（设置存活时间）值最小的key，即就是将要过期的key</p><p>noeviction：不进行移除，针对写操作（永不过期）</p></blockquote><p>APPEND ONLY MODE追加</p><p>常见的配置redis.conf</p><p><strong>Redis持久化：</strong></p><p><strong>1.RDB（Rdies DataBase）</strong>：在<strong>指定时间间隔内</strong>将数据集快照写入磁盘，<strong>Snapshot快照</strong>，恢复时将快照读到内存。Redis会<strong>单独创建一个子进程</strong>来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束，再用该<strong>临时文件替换上次持久化好的文件</strong>，整个过程中主进程不进行IO操作，这样确保了极高的性能。对于需要进行大规模数据的恢复，且对于数据恢复的完整性不敏感，那么RDB方式比AOF方式更加高效。</p><p>Fork的作用是复制一个与当前进程一样的进程，新进程的所有数据数值都和原进程一致。</p><p>Rdb保存的是dump.rdb文件：命令save   秒值   改动次数   </p><p>如何触发Rdb快照：将备份的dump.rdb拷贝到redis启动的目录下进行启动</p><p><strong>2.AOF（Append Only File）</strong>：以日志的形式来记录每个写文件，是将redis执行的所有写过程指令记录下来(读不记录)，只允许追加文件但不可以改文件，redis启动之初会读取改文件重新构建数据，即redis将所有写指令从前到后执行一次恢复数据。</p><p>Aof保存的是appendonly.aof(如果开启aof默认加载改文件进行开启redis)：文件出现错误时，启动redis失败，可以使用命令进行自动修复，将不符合的语法进行剔除。</p><blockquote><p>redis-check-aof  –fix  appendonly.aof</p></blockquote><p>Rewrite：Aof采用文件追加方式，文件会越来越大，为了避免此情况，新增加重写机制，当aof文件大小超过所设定的阈值时，Redis就会启动Aof文件内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof。</p><p>重写（rewrite）原理：增长过大时，将fork出新的进程，将文件重写，遍历新进程内存中数据，每条记录有一条Set语句，重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写一个新的aof文件，与数据库快照类似。</p><p>重写触发机制：Redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大小等于64M</p><p>aof默认是时刻进行记录，保证数据完整，缺点是相同数据集的数据而言aof文件远大于rdb文件，恢复速度慢于rdb，Aof运行效率要慢于rdb。每秒同步策略效率较好，不同步效率与rdb相同。</p><p><strong>数据持久化选择：</strong></p><p>RDB持久化方式能够在指定时间间隔对数据进行快照存储；AOF持久化方式记录每次对服务器写的操作，当服务器重启的是时候会重新执行这些恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾</p><p>redis只做缓存时，可以不用持久化</p><p>同时开启两种持久化，redis优先加载aof来恢复原始数据，rdb用作后备用途，每15分钟进行一次备份即可（保留规则：save  900 1）</p><p>Redis事务：一组命令的集合，一起成功一起失败。一个事务中的所有命令被序列化，按顺序地串行执行而不会被其他命令插入，不允许加塞。</p><p>事务作用：一个队列中，一次性、顺序性、排他性的执行一系列命令</p><blockquote><p>事务开启命令：MULTI                       使用调用事务命令：EXEC</p><p>取消事务命令：DISCARD                取消watch命令对所有key的监视：UNWATCH</p><p>监视一个或多个key命令，事务执行前数据被改则事务被打断：WATCH</p></blockquote><p><strong>Redis对于事务是部分支持</strong></p><p><strong>执行事务、放弃事务、</strong></p><p><strong>全体连坐</strong>（事务中的某一条指令不可加入队列中，导致整个指令队列全部错误）、</p><p><strong>冤头债主</strong>（事务中的某一条指令有错误，但是能够加入队列，只有执行的时才会出错）、<strong>watch监控</strong>（悲观锁/乐观锁/CAS：check and set）</p><p>悲观锁：认为每次数据访问时一定会被别人修改，所以每次拿取数据时锁定整个表，别人想要操作数据时进入阻塞直到拿到锁，例如：关系型数据库中的行锁、表锁、读锁、写锁</p><p>乐观锁：认为每次拿取数据时，别人不会修改数据，相当于列锁，添加一个版本列</p><p>Redis的发布订阅：进程间的一种消息通信模式：发送者（Pub）发送消息，订阅者（sub）接受消息</p><blockquote><p>订阅频道(channel)：SUBSCRIBE c1 c2  c3</p><p>消息发布：PUBLISH c1  消息</p><p>订阅多个，通配符：PSUBSCRIBE  new*</p></blockquote><p><strong>Redis的复制（Master/Slaver）</strong>:即主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主（读写分离、容灾恢复）</p><blockquote><p>从库配置：slaveof 主库ip  主库端口</p><p>主机挂掉，从库上升为主库：slaveof  no  one</p></blockquote><p>从库配置操作，拷贝多个redis.conf文件；开启daemonize  yes；pid文件名字；指定端口；log文件名字；dump.rdb名字</p><p><strong>一主两仆</strong>：一个主机两个丛机，使用slaveof指向主机，只允许主机写数据，主机down掉，丛机等待主机复原，丛机down掉需要重新与主机建立连接，可以在配置文件中写就不需要每次手动连接</p><p>主从复制原理，Slave启动成功连接到master后会发送一个sync命令，Master接到命令启动后台的存盘进程，同时收集所有接收到的修改数据集的命令，在后台进程执行完毕之后，master将传送整个数据文件slave</p><p>全量复制：slave服务接收到数据库文件数据后将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改数据的命令依次传递给slave，完成同步，每次重新连接需要做依次全量复制</p><p><strong>常用的模式是哨兵模式(Sentinel)步骤:</strong></p><p>针对于主从复制的体系，主机挂机的情况下，从丛机中进行投票进行选举一个新的主机，步骤：</p><p>自定义配置文件，与redis.conf文件相同的路径建立一个sentinel.conf文件</p><p>配置哨兵：sentinel monitor 被监控数据库名字 (自己起一个名字)    127.0.0.1   6379   1</p><p>配置文件中的数字1表示主机挂掉后，票数多的成为新的主机</p><p>启动哨兵：Redis-sentonel   sentinel.conf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql语句简单记录</title>
      <link href="/2020/03/27/sql-yu-ju-jian-dan-ji-lu/"/>
      <url>/2020/03/27/sql-yu-ju-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h4 id="mysql数据库创建表语句"><a href="#mysql数据库创建表语句" class="headerlink" title="mysql数据库创建表语句"></a>mysql数据库创建表语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--商品表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_info <span class="token punctuation">(</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>     product_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    product_icon <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--类目表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_category <span class="token punctuation">(</span>    category_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    category_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>category_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--类型唯一性</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uqe_category_type <span class="token punctuation">(</span>category_type<span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--订单表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_master <span class="token punctuation">(</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_openid <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    pay_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单主键</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单索引</span>    <span class="token keyword">KEY</span> idx_buyer_openid <span class="token punctuation">(</span>buyer_openid<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--订单明细表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_detial<span class="token punctuation">(</span>    detial_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_quantity   <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>detial_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> idx_order_id <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebService学习</title>
      <link href="/2020/03/25/webservice-xue-xi/"/>
      <url>/2020/03/25/webservice-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="WebService学习"><a href="#WebService学习" class="headerlink" title="WebService学习"></a>WebService学习</h4><p><strong>注：</strong>(不会maven的可以先去学习maven配置和简单的命令)</p><h5 id="Webservice介绍"><a href="#Webservice介绍" class="headerlink" title="Webservice介绍"></a>Webservice介绍</h5><h5 id="apacheCXF"><a href="#apacheCXF" class="headerlink" title="apacheCXF"></a>apacheCXF</h5><h5 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h5><p>1.pox文件引用：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--项目依赖--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jaxws规范包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0shiyong.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jetty包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--插件的添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>2.编写服务器端(使用@WebService注解进行标注其是一个服务)</p><p>编写简单的服务接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * 使用注解@WebService    * 对外发布服务接口    * */</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口的实现类编写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">",Welcome to xingxinghome!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.在测试模块下测试服务端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.访问设置的地址显示如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultcode</span><span class="token punctuation">></span></span>soap:Server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultcode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultstring</span><span class="token punctuation">></span></span>No binding operation info while invoking unknown method with params unknown.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultstring</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span></code></pre><p>在其访问地址加上?wsdl就会显示出wsdl展示</p><blockquote><p><a href="http://localhost:8000/ws/hello?wsdl" target="_blank" rel="noopener">http://localhost:8000/ws/hello?wsdl</a></p></blockquote><p>显示结果如下：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200325092919279.png" alt="image-20200325092919279"></p><p>3.客户端的编写</p><p>客户端需要知道服务端是什么样子的接口，在客户端够构建与服务端一样的接口，不需要实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试连接服务端：(测试时，服务端需要启动)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//服务接口访问的地址</span>        <span class="token comment" spellcheck="true">//创建cxf代理工厂</span>        JaxWsProxyFactoryBean factory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">JaxWsProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置远程服务器端的地址</span>        factory<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置接口类型</span>        factory<span class="token punctuation">.</span><span class="token function">setServiceClass</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对接口生成代理对象$Proxy34jdk代理，$CGLIB123使用cglib代理</span>        HelloService helloService <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程访问服务端方法</span>        String content <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"jet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.控制台使用日志拦截器来进行soap请求的拦截</p><p>在发布服务的时候添加代码：首先在main路径下的resource文件夹中添加log4j的配置文件</p><pre class=" language-text"><code class="language-text"># Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLElog4j.rootCategory=INFO, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.Threshold=INFOlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout#log4j.appender.CONSOLE.layout.ConversionPattern=- %m%nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601}%-6r[%15.15t]&-5p %30.30c %x - %m\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppenderlog4j.appender.LOGFILE.File=axis.loglog4j.appender.LOGFILE.Append=truelog4j.appender.LOGFILE.Threshold=INFOlog4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加日志输入，输出连接器，观察soap请求，soap响应内容</span>        factor<span class="token punctuation">.</span><span class="token function">getInInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">.</span><span class="token function">getOutInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingOutInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>控制台有信息：其中有服务的名称，服务的参数，soap封装格式</p><blockquote><p>Payload: &lt;soap:Envelope xmlns:soap=”<a href="http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;" target="_blank" rel="noopener">http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</a><a href="soap:Body">soap:Body</a>&lt;ns2:sayHello xmlns:ns2=”<a href="http://service.itxing.com/&quot;&gt;" target="_blank" rel="noopener">http://service.itxing.com/&quot;&gt;</a><arg0>jet</arg0></ns2:sayHello></soap:Body></soap:Envelope></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>neo4j学习（遇到的坑）</title>
      <link href="/2020/03/24/neo4j-xue-xi-yu-dao-de-keng/"/>
      <url>/2020/03/24/neo4j-xue-xi-yu-dao-de-keng/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h4 id="neo4下载与安装-windows环境下"><a href="#neo4下载与安装-windows环境下" class="headerlink" title="neo4下载与安装(windows环境下)"></a>neo4下载与安装(windows环境下)</h4><p><a href="https://neo4j.com/" target="_blank" rel="noopener">neo4j官网</a></p><p>注：官网下载neo4j相当的慢。</p><p><a href="http://we-yun.com/index.php/blog/releases-56.html" target="_blank" rel="noopener">国内下载地址</a></p><h5 id="1-neo4j简单介绍"><a href="#1-neo4j简单介绍" class="headerlink" title="1.neo4j简单介绍"></a>1.neo4j简单介绍</h5><p>其是基于java语言编写的图形数据库。图是一组节点和连接这些节点的关系，图数据库也被称作图形数据库管理系统(GDBMS)。</p><h5 id="2-需要安装jdk环境"><a href="#2-需要安装jdk环境" class="headerlink" title="2.需要安装jdk环境"></a>2.需要安装jdk环境</h5><p>先使用java -version，查看自己的java环境是否配置好。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324190457173.png" alt="image-20200324190457173"></p><h5 id="3-下载neo4j后解压，主要目录如下"><a href="#3-下载neo4j后解压，主要目录如下" class="headerlink" title="3.下载neo4j后解压，主要目录如下"></a>3.下载neo4j后解压，主要目录如下</h5><blockquote><p>Neo4j应用程序有如下主要的目录结构：</p><ul><li>bin目录：用于存储Neo4j的可执行程序；</li><li>conf目录：用于控制Neo4j启动的配置文件；</li><li>data目录：用于存储核心数据库文件；</li><li>plugins目录：用于存储Neo4j的插件；</li></ul></blockquote><h5 id="4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"><a href="#4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）" class="headerlink" title="4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"></a>4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）</h5><p>新建系统变量：将自己neo4j目录粘贴到变量值位置</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324190915553.png" alt="image-20200324190915553"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324191226568.png" alt="image-20200324191226568"></p><p>最后将bin加入到path路径下：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324191354386.png" alt="image-20200324191354386"></p><h5 id="5-测试安装是否成功"><a href="#5-测试安装是否成功" class="headerlink" title="5.测试安装是否成功"></a>5.测试安装是否成功</h5><h6 id="出现错误1"><a href="#出现错误1" class="headerlink" title="出现错误1:"></a>出现错误1:</h6><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324193244410.png" alt="image-20200324193244410"></p><p>如果出现这种情况，不能加载.psd1模块，这是由于相对路径配置的问题导致的，打开下面的文件：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324193432628.png" alt="image-20200324193432628"></p><p>将路径改成自己的路径：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324193542460.png" alt="image-20200324193542460"></p><h6 id="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"><a href="#出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境" class="headerlink" title="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"></a>出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境</h6><blockquote><p>Neo4j cannot be started using java version 1.8.0_221</p></blockquote><p>更换jdk启动neo4j，成功访问</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324193821721.png" alt="image-20200324193821721"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324193840986.png" alt="image-20200324193840986"></p><h4 id="Neo4j简单的命令"><a href="#Neo4j简单的命令" class="headerlink" title="Neo4j简单的命令"></a>Neo4j简单的命令</h4><h5 id="后期需要去学习一些Cypher语法"><a href="#后期需要去学习一些Cypher语法" class="headerlink" title="后期需要去学习一些Cypher语法"></a>后期需要去学习一些Cypher语法</h5><p>1.删除数据库中之前的图，创建一个空白的环境进行操作</p><blockquote><p>MATCH (n) DETACH DELETE n</p></blockquote><p><em>MATCH</em> 是匹配操作，小括号()代表一个节点node，括号里面的n为标识符</p><p>2.创建一个人物节点：</p><blockquote><p>CREATE (n:Person {name:’John’}) RETURN n</p></blockquote><p>_CREATE_是创建操作，Person是标签，代表节点的类型。花括号{}代表节点属性。该语句表示创建一个标签为Person的节点，该节点具有一个name属性值，值为john</p><p>3.创建更多人物节点</p><blockquote><p>CREATE (n:Person {name:’Sally’}) RETURN n</p><p>CREATE (n:Person {name:’Steve’}) RETURN n</p><p>Create(n:Person{name:’Xing’})RETURN n</p></blockquote><p>4.创建地区节点</p><blockquote><p>CREATE(n:Location{city:’Miami’,state:’FL’})</p><p>CREATE(n:Location{city:’SHANXI’,state:’MA’})</p><p>CREATE(n:Location{city:’SHANGHAI’,state:’ME’})</p></blockquote><p>节点类型为Location，属性包括city和state</p><p>5.创建关系</p><blockquote><p>MATCH   (a:Person {name:’Liz’}),</p><p>​                (b:Person {name:’Mike’})</p><p>MERGE   (a)-&gt;[:FRIENDS]-&gt;(b)</p></blockquote><p>方括号<code>[]</code>即为关系，<code>FRIENDS</code>为关系的类型。注意这里的箭头<code>--&gt;</code>是有方向的，表示是从a到b的关系。</p><p>6.关系也可以增加属性</p><blockquote><p>MATCH (a:Person {name:’Shawn’}),<br>      (b:Person {name:’Sally’})<br>MERGE (a)-[:FRIENDS {since:2001}]-&gt;(b)</p></blockquote><p>在关系中，同样的使用花括号{}来增加关系的属性，这里给FRIENDS关系增加了since属性，属性值为2001，表示他们建立朋友关系的时间。</p><p>7.增加更多的关系</p><blockquote><p>MATCH (a:Person {name:’Shawn’}), (b:Person {name:’John’}) MERGE (a)-[:FRIENDS {since:2012}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Person {name:’Shawn’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Sally’}), (b:Person {name:’Steve’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Liz’}), (b:Person {name:’John’}) MERGE (a)-[:MARRIED {since:1998}]-&gt;(b)</p></blockquote><p>8.建立不同类型节点之间的关系-人物和地点的关系</p><blockquote><p>MATCH (a:Person {name:’John’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1978}]-&gt;(b)</p></blockquote><p>这里的关系是BORN_IN，表示出生地，同样有一个属性，表示出生年份。 </p><p>9.同样建立更多人的出生地</p><blockquote><p>MATCH (a:Person {name:’Liz’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1981}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Location {city:’San Francisco’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Shawn’}), (b:Location {city:’Miami’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Steve’}), (b:Location {city:’Lynn’}) MERGE (a)-[:BORN_IN {year:1970}]-&gt;(b)</p></blockquote><p>10.至此，知识图谱的数据已经插入完毕，可以开始做查询了。我们查询下所有在Boston出生的人物</p><blockquote><p>MATCH (a:Person)-[:BORN_IN]-&gt;(b:Location {city:’Boston’}) RETURN a,b</p></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324211750318.png" alt="image-20200324211750318"></p><p>11.查询所有对外有关系的节点</p><blockquote><p>MATCH (a)–&gt;() RETURN a</p></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324211806411.png" alt="image-20200324211806411"></p><p>12.查询所有有关系的节点</p><blockquote><p>MATCH (a)–() RETURN a</p></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200324211913095.png" alt="image-20200324211913095"></p><p>13.查询所有对外有关系的节点，以及关系类型</p><blockquote><p>MATCH (a)-[r]-&gt;() RETURN a.name, type(r)</p></blockquote><p>14.查询所有有结婚关系的节点</p><blockquote><p>MATCH (n)-[:MARRIED]-() RETURN n</p></blockquote><p>15.创建节点的时候就建好关系</p><blockquote><p>CREATE (a:Person {name:’Todd’})-[r:FRIENDS]-&gt;(b:Person {name:’Carlos’})</p></blockquote><p>16.查找某人的朋友的朋友</p><blockquote><p>MATCH (a:Person {name:’Mike’})-[r1:FRIENDS]-()-[r2:FRIENDS]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName</p></blockquote><p>17.增加/修改节点的属性</p><blockquote><p>MATCH (a:Person {name:’Liz’}) SET a.age=34<br>MATCH (a:Person {name:’Shawn’}) SET a.age=32<br>MATCH (a:Person {name:’John’}) SET a.age=44<br>MATCH (a:Person {name:’Mike’}) SET a.age=25</p></blockquote><p>18.删除节点的属性</p><blockquote><p>MATCH (a:Person {name:’Mike’}) SET a.test=’test’<br>MATCH (a:Person {name:’Mike’}) REMOVE a.test</p></blockquote><p>19.删除节点</p><blockquote><p>MATCH (a:Location {city:’Portland’}) DELETE a</p></blockquote><p>20.删除有关系的节点</p><blockquote><p>MATCH (a:Person {name:’Todd’})-[rel]-(b:Person) DELETE a,b,rel</p></blockquote><h5 id="简单总结："><a href="#简单总结：" class="headerlink" title="简单总结："></a>简单总结：</h5><p>一开始学习图数据库不是很好理解，不像关系型数据库那样使用习惯了。图数据库是一个趋势，无论是在搜索还是在推荐系统中都被广泛使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlserver使用的简单记录</title>
      <link href="/2020/03/23/sqlserver-shi-yong-de-jian-dan-ji-lu/"/>
      <url>/2020/03/23/sqlserver-shi-yong-de-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="记录项目中的业务处理-环境：sqlserver2012、vs2017"><a href="#记录项目中的业务处理-环境：sqlserver2012、vs2017" class="headerlink" title="记录项目中的业务处理(环境：sqlserver2012、vs2017)"></a>记录项目中的业务处理(环境：sqlserver2012、vs2017)</h3><h3 id="使用sql语句将数据转换成相应的格式"><a href="#使用sql语句将数据转换成相应的格式" class="headerlink" title="使用sql语句将数据转换成相应的格式"></a>使用sql语句将数据转换成相应的格式</h3><blockquote><p>1.使用cast函数,不能转换日期类型</p><p> cast(表达式 as 数据类型)</p></blockquote><pre class=" language-mssql"><code class="language-mssql">> select CAST(PLAN_LENGTH AS FLOAT) '长度' from [dbo].[CTS_PROJECTPLAN_DETAIL]</code></pre><blockquote><p>2.使用Convert函数通用</p><p>Convert(数据类型，表达式)</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">FLOAT</span> <span class="token punctuation">,</span>PLAN_LENGTH<span class="token punctuation">)</span> <span class="token string">'长度'</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>CTS_PROJECTPLAN_DETAIL<span class="token punctuation">]</span></code></pre></blockquote><h4 id="除法时遇到分母为0时的处理"><a href="#除法时遇到分母为0时的处理" class="headerlink" title="除法时遇到分母为0时的处理"></a>除法时遇到分母为0时的处理</h4><p>简单的示范：</p><pre class=" language-declaremssql"><code class="language-declaremssql">--定义变量并且设置分母为0，这样一定会出现错误declare @a int;declare @b int;set @a = 10;set @b = 0;select @a/@b--1.可以使用case语句进行判断操作,当分母为0时将其转换成1select case @b when 0 then 1 else @a/@b --2.使用函数nullif，该函数--nullif(express1,express2),如果express1==express2时，直接为null，将表达式2设置为0，遇到0时直接为nulldeclare @a int;declare @b int;set @a=10set @b=5select @a/nullif(@b,0)--当然最后的需要并不会是null值，可以使用isnull函数进行控制--isnull(express1,express2),如果e1为null时，返回e2declare @a int;declare @b int;set @a=10set @b=5select isnull(@a/nullif(@b,0),1)</code></pre><h4 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h4><blockquote><p>将两列数据位varchar类型的数据进行类型转换并进行除法运算</p><p>自己编写的语句是：</p><p>select</p><p>isnull(Convert(float,ziduan1)/nullif(Convert(float,字段2),0),1 ) ‘新列名’</p><p>from 表名</p><p>–简单的解释就是，两列char类型的数据进行float转换后进行除法，进行除数为0判断</p></blockquote><h4 id="查询数据库中的数据进行数据监视"><a href="#查询数据库中的数据进行数据监视" class="headerlink" title="查询数据库中的数据进行数据监视"></a>查询数据库中的数据进行数据监视</h4><p>要求：能够查出每周、每月、每年的工作量</p><blockquote><p>每日统计:<br>select 日期时间=convert(char(10), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(10), 日期时间, 120)</p><p>每周统计:<br>select 日期时间=datepart(week, 日期时间), 数量=sum(数量)<br>from T<br>where year(日期时间)=year(getdate())<br>group by datepart(week, 日期时间)</p><p>每月统计:<br>select 日期时间=convert(char(7), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(7), 日期时间, 120) </p></blockquote><p>直接进行更改，查询项目工作量的表中的workload列数据，按照周、月、日进行分组统计</p><pre class=" language-mssql"><code class="language-mssql">select 周计划=datepart(week,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where year([YEARMONTH])=year(getdate())group by datepart(week, [YEARMONTH])select 月计划=datepart(MONTH,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where month([YEARMONTH])=month(getdate())group by datepart(MONTH, [YEARMONTH])select 日期时间=convert(varchar(20), [YEARMONTH], 120), 数量=sum([WORKLOAD])from [CTS_PROJECTPLAN_WORKLOAD]group by convert(varchar(20), [YEARMONTH], 120) </code></pre><h4 id="存储过程-基于sqlserver2012进行记录"><a href="#存储过程-基于sqlserver2012进行记录" class="headerlink" title="存储过程(基于sqlserver2012进行记录)"></a>存储过程(基于sqlserver2012进行记录)</h4><p>项目中要求的数据进行拼接过于多，因此使用存储过程，自己也对存储过程进行简单的学习。</p><blockquote><p>存储过程的概念：</p><p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。在数据量特别庞大的情况下利用存储过程能达到倍速的效率提升。</p></blockquote><pre class=" language-mssql"><code class="language-mssql">--情况1不带参数的存储过程create proc sp_nameasbegin    print 'helloworld'end--执行语句exec sp_name--删除当前的存储过程drop proc sp_name--2.带参数的存储过程create proc sp_name    @name nvarchar(50),    @author nvarchar(50)as begin    select * from Books where title = @name and Author = @authorend--执行带有参数的存储过程exec sp_name 'C# Primer 习题解答（第5版）','蒋爱军，李师贤，梅晓勇  著'exec sp_name @name = 'C# Primer 习题解答（第5版）' , @author = '蒋爱军，李师贤，梅晓勇  著'--3.带有默认值的存储过程create proc sp_name    @patt nvarchar(50) = '1046002111',    @repla nvarchar(50)as begin    select * from Articel_Words where [WordPattern] = @patt and [ReplaceWord] = @replaend--对参数进行更改exec sp_name @patt = 'newvalue'--4.带有输出参数的存储过程create proc usp_output@bookname nvarchar(50),@recordCount int output --关键字代表输出参数asbegin    select * from hero where bookname=@bookname    --把查询的记录条数赋值给变量@recordCount    set @recordCount = (select count(*) from hero where bookname=@bookname)end --调用带有参数的存储过程，需要定义变量，并把变量传递declare @num intexec usp_output @bookname='书剑恩仇录',@recordCount=@num outputselect @num as 记录条数--5.存储过程实现分页create proc usp_fenye@pagesize int=3, --每页记录的条数@index int=1,    --当前查看第几页的内容@recordcount int output, --总的条数@pagecount int output --总的页数asbegin    --分页    select        t.id,        t.bookname,        t.hero    from (select *,rn=row_number() over(order by id asc) from hero) as t    where t.rn between (@index-1) * @pagesize + 1 and @pagesize * @index    --计算总的条数    set @recordcount =( select count(*) from hero)    --计算总的页数    set @pagecount=ceiling(@recordcount * 1.0 / @pagesize)  --ceiling向上取整end--执行存储过程declare @tiaoshu intdeclare @yeshu intexec usp_fenye @pagesize=5,@index =3,@recordcount=@tiaoshu output,@pagecount=@yeshu outputselect @tiaoshu as 总的条数select @yeshu as 总的页数</code></pre><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><blockquote><p>drop produre sp_name</p><p>注意的是，存储过程中不能够删除另一个存储过程，只能够调用另一存储过程</p><p>每个不同的数据库具体实现不同</p><p>sqlserver使用：drop proc 存储过程名</p></blockquote><h4 id="其余的命令"><a href="#其余的命令" class="headerlink" title="其余的命令"></a>其余的命令</h4><blockquote><ol><li>show procedure status</li></ol><p>显示数据库中所有存储的存储过程基本信息</p><ol start="2"><li>show create procedure  sp_name </li><li>exec sp_name </li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法思想记录</title>
      <link href="/2020/03/19/suan-fa-si-xiang-ji-lu/"/>
      <url>/2020/03/19/suan-fa-si-xiang-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>dijestla算法思想：<br>引入两个集合，<br>closelist和openlist，闭集合用来记录已经求出最短路径的顶点，开集合用阿里记录为求出最短路径的顶点。<br>集合1：记录源节点（A）到各个节点之间的距离；集合2记录节点对应上一级点（父节点）<br>1.将源节点A放入closelist，其余节点放入closelist，A不能到达的节点记为无穷大<br>2.从openlist中选出距离最短的点N，将顶点N加入closelist中，同时从openlist移除N<br>3.重新计算openlist中各个节点到起点A的距离<br>（重新计算openlist中节点的距离，是由于上一步中确定了N是求出最短路径的顶点，从而可以利用N更新其他顶点的距离，）<br>4.重复以上步骤，遍历所有的节点<br>Astar算法：在静态环境中求解最优路径的有效的直接搜索算法，算法采用启发式搜索，A<em>算法通过一个代价函数来确定搜索方向，从起点开始向周围扩展，通过代价函数计算得到周围每个节点的代价值，选择最小代价节点作为下一个扩展点，直到到达目标为止。<br>A</em>算法的代价函数f(n)=g(n)+h(n)<br>常见的估价函数：曼哈顿距离d12=|x1-x2|+|y1-y2|<br>欧式距离：p=sqrt((x2-x1)^2+(y2-y1)^2)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Docker</title>
      <link href="/2020/03/02/an-zhuang-docker/"/>
      <url>/2020/03/02/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>linux内核升级</p><p><strong>yum update -y</strong></p><p><strong>yum install docker -io lxc libcgroup* device-mapp* -y</strong></p><h3 id="安装第三方扩展源"><a href="#安装第三方扩展源" class="headerlink" title="安装第三方扩展源"></a>安装第三方扩展源</h3><blockquote><p>//安装第三方扩展源</p><p>yum install epel-release -y</p><p>//查看是否成功安装扩展源</p><p>ll /etc/yum.repos.d/|grep -w epel</p></blockquote><p>安装docker软件包</p><blockquote><p>yun install docker -y</p><p>yum list docker</p><p>rpm - qa|grep docker</p><p>systemctl start docker.service</p><p>#查看Docker进程</p><p>ps -ef|grep docker</p><p>#查看Docker版本信息</p><p>docker version</p></blockquote><p>1.安装centos7<br>使用阿里云镜像</p><blockquote><p><a href="https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</a></p></blockquote><p> 使用VMware11.0安装centos7<br> 1.设置网络为桥接模式，重启网络设置<strong>service network restart</strong></p><p> 2.查看ip地址：<strong>ip addr</strong><br> 3.查看Centos版本：使用<strong>uname -r</strong> (linux内核版本高于3.10)<br> 4.升级软件包及内核（小于3.10需要该操作）：<strong>yum update</strong><br> 5.安装docker命令：<strong>yum install docker</strong><br> 6.启动docker命令:<strong>systemctl start docker</strong><br> 7.将docker服务设为开机启动：<strong>systemctl    enable docker</strong><br> 8.查看docker版本： <strong>docker -v</strong></p><pre><code>&gt;设置开机启动：systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</code></pre><p>检索操作：<strong>docker search 关键字</strong><br>拉取信息：<strong>docker pull 镜像名</strong>：tag（tag可选择，多为软件的版本，默认最新版本）<br>列表：<strong>docker images</strong><br>删除 ：<strong>docker rmi inage-id</strong>（删除指定版本的镜像）</p><p>搭建环境：<br>安装mysql：<br><strong>docker search mysql；</strong><br><strong>docker pull mysql：latest</strong><br>错误的启动mysql：<br><strong>docker run –name mysql01 -d mysql</strong><br>启动的mysql不能够使用，查看错误日志使用命令docker logs mysql镜像的id<br>正确启动mysql的命令：<strong>docker run –name mysql01 -e MYSQL_ROOT_PASSWORD=root23 -d mysql</strong><br>以上命令在容器中启动不能被外网访问，需要做端口映射。</p><p>重启docker</p><p><strong>docker server restart</strong> </p><p>安装nginx镜像</p><p><strong>docker pull docker.io/nginx</strong></p><p>查看docker镜像</p><p><strong>docker  images</strong></p><p><strong>docker images|grep -i nginx</strong></p><p>运行nginx(使用ip+80端口进行访问)</p><p><strong>docker run -itd -p 80:80 docker.io/nginx</strong></p><p>部署redis：</p><p>1.搜索redis镜像</p><p>docker search redis</p><p>2.拉取redis镜像</p><p>docker pull redis:5.0</p><p>3.创建容器</p><p>docker run -id –name=C_redis -p 6379:6379 redis:5.0</p><p>4.使用外部机器连续redis</p><p>./redis-cli.exe  -h  ip(localhost)  -p  6379</p><h4 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h4><p>操作系统组成有：</p><p>进程调度子系统、进程通信子系统、内存管理子系统、设备管理子系统、文件管理子系统、网络管理子系统、作业控制子系统</p><p> linux文件系统由boot和rootfs两部分组成</p><p>bootfs：包含bootloader（引导加载程序）和kernel内核</p><p>rootfs：root文件系统，包含的就是典型的linux系统中的/dev、/proc、/bin、/etc等标准目录和文件</p><h4 id="docker制作镜像："><a href="#docker制作镜像：" class="headerlink" title="docker制作镜像："></a>docker制作镜像：</h4><p>1.容器转为镜像：</p><p>docker commit 容器id 镜像名称:版本号</p><p>将镜像转为压缩文件，可以用于传输</p><p>docker save -o 镜像的压缩文件  镜像名称:版本号</p><p>恢复镜像：</p><p>docker load -i 镜像的压缩文件</p><p>2.fockerfile将容器转为镜像</p><p>docker  build  -f  自定义的dockerfile  -t app</p><p>dockerfile发布springboot项目</p><p>1.定义父镜像</p><p>From java:8</p><p>2.定义作者信息：</p><p>MAINTAINER itxing <a href="mailto:&#105;&#116;&#120;&#105;&#110;&#x67;&#122;&#97;&#x69;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#105;&#116;&#120;&#105;&#110;&#x67;&#122;&#97;&#x69;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a></p><p>3.添加jar</p><p>ADD 项目jar包 app.jar</p><p>4.启动jar</p><p>CMDjava -jar app.jar</p><p>5.docker启动自定义容器并且端口映射</p><p>docker run -id -p 9000:8080  自定义的项目名app</p><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><p>1.安装Docker Compose</p><p>curl -l <a href="https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname" target="_blank" rel="noopener">https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname</a> -m’ -o /usr/local/bin/docker-compose</p><p>2.设置文件可执行权限</p><p>chmod +x /usr/local/bin/docker-compose</p><p>3.查看版本信息</p><p>docker-compose -version</p><p>4.卸载Docker Compose</p><p>rm /usr/local/bin/docker-compose</p><h4 id="Docker搭建私有仓库"><a href="#Docker搭建私有仓库" class="headerlink" title="Docker搭建私有仓库"></a>Docker搭建私有仓库</h4><p>1.拉取私有仓库连接</p><p>docker pull resistry</p><p>2.启动私有仓库</p><p>docker run -id –name=registry -p 5000:5000 registry</p><p>3.打开连接，浏览器中输入http://私有仓库服务器ip5000/v2/_catalog,看到{“repositories”:[]}表示私有仓库，搭建成功</p><p>4.修改damon.json</p><p>vim /etc/docker/damon.json</p><p>#在中间中添加key，保存退出，该步骤是让docker信任私有仓库，注意将所有私有的仓库服务器ip修改为自己私有仓库服务器的真实ip</p><p>{“insecure-registries”：[私有仓库服务器ip:5000]}</p><p>5.重启docker服务</p><p>systemctl   restart   docker</p><p>docker   start   registry</p><h4 id="将镜像上传至私有仓库"><a href="#将镜像上传至私有仓库" class="headerlink" title="将镜像上传至私有仓库"></a>将镜像上传至私有仓库</h4><p>1.标记镜像为私有仓库镜像</p><p>docker    tag    需要标签的docker镜像   私有仓库服务器ip:5000/centos:7</p><p>2.上传标记的镜像</p><p>docker push 私有仓库服务器ip：5000/标记好的docker镜像</p><p>3.删除当前的镜像</p><p>docker rmi 镜像名</p><p>4.从私有仓库拉取镜像</p><p>docker pull 镜像名</p><h4 id="容器和虚拟机的比较："><a href="#容器和虚拟机的比较：" class="headerlink" title="容器和虚拟机的比较："></a>容器和虚拟机的比较：</h4><p>相同点：容器和虚拟机都是进行相似的资源隔离和分配优势</p><p>不同点：传统虚拟机可以运行不同的操作系统，容器只能运行同一类型的操作系统</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用马克记录笔记</title>
      <link href="/2020/02/27/shi-yong-ma-ke-ji-lu-bi-ji/"/>
      <url>/2020/02/27/shi-yong-ma-ke-ji-lu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="使用马克记录笔记"><a href="#使用马克记录笔记" class="headerlink" title="使用马克记录笔记"></a>使用马克记录笔记</h1><p>@(我的笔记)[不许抄袭|挺好使用的]<br><strong>maven配置：</strong></p><blockquote><p>在maven的setting.xml中配置jdk1.8编译环境：</p></blockquote><pre><code> &lt;profile&gt;      &lt;id&gt;jdk18&lt;/id&gt;      &lt;activation&gt;          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;          &lt;jdk&gt;1.8&lt;/jdk&gt;      &lt;/activation&gt;      &lt;properties&gt;          &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;          &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;          &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;      &lt;/properties&gt;   &lt;/profile&gt; </code></pre><h2 id="Spring-Boot-的简单使用"><a href="#Spring-Boot-的简单使用" class="headerlink" title="Spring Boot 的简单使用"></a>Spring Boot 的简单使用</h2><p>一个功能：<br>浏览器发送hello请求， 服务器接受请求并处理，响应Hello World字符串：</p><h3 id="1-创建一个maven工程"><a href="#1-创建一个maven工程" class="headerlink" title="1.创建一个maven工程"></a>1.创建一个maven工程</h3><h4 id="导入spring-boot相关的依赖"><a href="#导入spring-boot相关的依赖" class="headerlink" title="导入spring boot相关的依赖"></a>导入spring boot相关的依赖</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="编写主程序，启动spring-boot应用"><a href="#编写主程序，启动spring-boot应用" class="headerlink" title="编写主程序，启动spring boot应用"></a>编写主程序，启动spring boot应用</h4><p>使用注解@SpringBootApplication，该注解用来标注一个主程序类，说明是一个springboot应用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="编写相关的业务逻辑"><a href="#编写相关的业务逻辑" class="headerlink" title="编写相关的业务逻辑"></a>编写相关的业务逻辑</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="直接运行主程序的main方法，访问本地的8080端口，输入-hello会调用Controller层的方法。"><a href="#直接运行主程序的main方法，访问本地的8080端口，输入-hello会调用Controller层的方法。" class="headerlink" title="直接运行主程序的main方法，访问本地的8080端口，输入/hello会调用Controller层的方法。"></a>直接运行主程序的main方法，访问本地的8080端口，输入/hello会调用Controller层的方法。</h4><h4 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h4><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--导入maven插件对项目进行打包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>导入插件，使用插件对项目进行打包，生成jar文件使用java -jar 文件来进行运行，使得项目能够运行。</p><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><h4 id="pom-xml文件："><a href="#pom-xml文件：" class="headerlink" title="pom.xml文件："></a>pom.xml文件：</h4><p>1.父项目</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--父项目的配置文件中的父项目，其管理spring boot 应用中的所有依赖版本（版本仲裁）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>2.导入依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-starter-web:<br>spring-boot-starter:spring-boot场景启动器，能够导入web模块启动相关依赖的组件<br>Spring boot将所有的功能场景抽取出来，作成一个个starters（启动器），需要什么样的场景导入什么样的启动器。</p><h4 id="2-主程序类，主入口类"><a href="#2-主程序类，主入口类" class="headerlink" title="2.主程序类，主入口类"></a>2.主程序类，主入口类</h4><p>需要使用@SpringBootApplication注解:该注解标注的类是springboot的主配置类，springboot使用该类的main方法来启动springboot应用。<br>注解1.@SpringBootConfiguration:配置注解<br>注解2.@EnableAutoConfiguration开启自动配置功能的注解<br>注解3.@AutoConfigurationPackage:自动配置包，能够将主配置类所在的包中所有的组件扫描到spring容器中<br>注解4.@Import给容器中导入组件，将所有需要导入的组件以全类名的方式进行返回，并且将这些组件导入到容器中。<br>spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入容器中，自动配置类会生效，之前spring等框架手动配置的，自动配置类会进行配置。</p><h3 id="使用Spring-initializer-快速创建spring-boot项目"><a href="#使用Spring-initializer-快速创建spring-boot项目" class="headerlink" title="使用Spring initializer 快速创建spring boot项目"></a>使用Spring initializer 快速创建spring boot项目</h3><p>idea支持使用spring项目创建向导快速创建一个Spring Boot项目，选择自己需要的模块<br>resources文件夹中目录结构：<br>  static:保存所有的静态资源：js css images<br>  templates:保存所有的模板页面，可以使用模板引擎<br>   application.properties:SpringBoot应用的配置文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标题党--卑微星</title>
      <link href="/2020/01/14/huan-ying-jin-ru-xing-xing-de-bo-ke/"/>
      <url>/2020/01/14/huan-ying-jin-ru-xing-xing-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎进入星星的博客"><a href="#欢迎进入星星的博客" class="headerlink" title="欢迎进入星星的博客"></a>欢迎进入星星的博客</h1><p>@(测试工具)[版权声明|不许抄袭]<br><strong>标题一：新建博客</strong><br>_ <strong>小标题</strong> ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>###公式测试：<br>$\Gamma(n)=(n-1)!\quad\forall n\in\mathbb N$</p>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录#文章分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客#文章标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/14/hello-world/"/>
      <url>/2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
