<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>复习shell编程</title>
      <link href="/2020/09/09/shell-jiao-ben-fu-xi-bi-ji/"/>
      <url>/2020/09/09/shell-jiao-ben-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>学习linux过程中，对shell简单的做过一定的连接与使用，但是没有对其进行深入的研究，最近将之前学习的基础知识进行巩固一下，以后自己想做一些关于大数据方向的工作，因此对于shell进行再次的学习，也将之前的知识进行梳理。</p></blockquote><h3 id="shell介绍"><a href="#shell介绍" class="headerlink" title="shell介绍"></a>shell介绍</h3><blockquote><p>shell是一个命令行解释器，它接收应用程序/用户命令，然后调用操作系统内核，shell还是一个功能相当强大的编程语言，易编写、易调试、灵活性强。</p></blockquote><h4 id="查看自己的linux服务器的shell"><a href="#查看自己的linux服务器的shell" class="headerlink" title="查看自己的linux服务器的shell"></a>查看自己的linux服务器的shell</h4><pre class=" language-shell"><code class="language-shell">## 查看shell相关的工具sudo cat /etc/shells##结果是有多个文件加，一般会有/bin/sh、/bin/bash/、usr/bin/sh/、usr/bin/bash##查看系统默认的shell工具echo $SHELL</code></pre><h4 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h4><blockquote><p>脚本以<strong>#！/bin/bash</strong>开头</p></blockquote><p>编写第一个脚本</p><p>创建一个文件helloshell.sh</p><pre class=" language-shell"><code class="language-shell">#！/bin/bashecho "hello xing"</code></pre><p>执行该文件</p><pre class=" language-shell"><code class="language-shell">##方式一bash helloshell.sh##方式二sh helloshell.sh##方式三 相对路径执行，如果不能执行可能是因为权限问题，使用chmod修改文件权限./helloshell.sh</code></pre><p><img src="../../../blogimages/springcloud0515/linux20090901.png" alt="image-20200909152347169"></p><h4 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h4><p>使用sh创建一个文本文件，并在文本文件中写入文字</p><blockquote><p>touch test.sh</p></blockquote><pre class=" language-shell"><code class="language-shell">##井号不一定是注释，bash一般将下面的语句放在文件的第一行#！/bin/bash##一下创建文本信息，首先自定义文件位置cd /home/itxing/##创建文件touch biaobai.txt##写入字符echo "lalala,I LOVE YOU" >> biaobai.txt</code></pre><h3 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h3><h5 id="1-常用的系统变量"><a href="#1-常用的系统变量" class="headerlink" title="1.常用的系统变量"></a>1.常用的系统变量</h5><p>$HOME、$PWD、$SHELL、$USER</p><p>使用set命令查看shell中的所有变量</p><h5 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2.自定义变量"></a>2.自定义变量</h5><blockquote><p>1) 自定义变量格式</p><p>变量 = 值    注意等号的两边不能有空格</p><p>2)撤销变量</p><p>unset 变量</p><p>3) 声明静态变量</p><p>readonly 变量=变量值(不能被unset)</p><p>4)变量定义规则</p><p>a.变量名称可以是字母、数字和下划线，不能以数字开头，环境变量名最好使用大写</p><p>b.等号两边不能有空格</p><p>c.在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p><p>d.变量的值如果有空格，需要双引号或单引号括起来</p></blockquote><p>将命令的返回值赋值给变量A</p><blockquote><p>A=`ls -la`</p><p>或者</p><p>A=$(ls -la)</p><p><img src="../../../blogimages/springcloud0515/linux20090902.png" alt="image-20200909161843573"></p></blockquote><h5 id="3-linux设置环境变量"><a href="#3-linux设置环境变量" class="headerlink" title="3.linux设置环境变量"></a>3.linux设置环境变量</h5><blockquote><p>1)export 变量名=值</p><p>2)source 配置文件</p><p>3)echo $变量名</p></blockquote><p>配置文件一般是/etc/profile文件，修改环境变量后，使得环境变量生效，使用</p><blockquote><p>source /etc/profile</p></blockquote><p>自定义的环境信息</p><p><img src="../../../blogimages/springcloud0515/linux20090903.png" alt="image-20200909162208019"></p><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p>1.执行脚本时，需要接收命令行传递的参数</p><blockquote><p> 例如：./test.sh 100 200</p></blockquote><p>2.基本的语法</p><p>语法和功能</p><blockquote><p>$n:n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，传递十以上的参数，需要使用花括号包含例如${12}</p><p>$* 表示该变量代表命令行中所有参数，将所有参数看做整体</p><p>$@ 表示命令行中的所有参数，但是该命令将参数区分对待</p><p>$# 表示命令行中参数的个数</p></blockquote><p>3.应用实例</p><p><img src="../../../blogimages/springcloud0515/linux20090904.png" alt="image-20200909171500057"></p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>1.说明</p><blockquote><p>提前定义好的变量，在shell中可以使用</p></blockquote><p>2.基本语法</p><blockquote><p> $$:当前进程的进程号PID<br> $!后台运行的最后一个进程的进程号<br> $?最后一次执行命令的返回状态，如果变量的值为0，上一个命令正确执行；如果变量值非0，证明上一个命令执行不正确</p></blockquote><p>3.应用实例</p><p><img src="../../../blogimages/springcloud0515/linux20090905.png" alt="image-20200909172553472"></p><p>结果：</p><p><img src="../../../blogimages/springcloud0515/linux20090906.png" alt="image-20200909172626813"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>1.基本介绍</p><blockquote><p>将变量进行常见的运算操作，例如+-*/等</p></blockquote><p>2.基本语法</p><blockquote><p>1)“$((运算式))”或者“$[运算式]”</p><p>2)expr m+n</p><p>3)expr m-n</p><p>4)expr \*,/,% 乘法、除法、取余</p></blockquote><p>3.实例</p><blockquote><p>计算(2+3)*4的值</p></blockquote><p>$((运算式))</p><p><img src="../../../blogimages/springcloud0515/linux20090907.png" alt="image-20200909173530468"></p><p>$[运算式]</p><p><img src="../../../blogimages/springcloud0515/linux20090908.png" alt="image-20200909173710839"></p><p>expr</p><p><img src="../../../blogimages/springcloud0515/linux20090909.png" alt="image-20200909173941792"></p><p>计算两个传入的参数的和</p><p><img src="../../../blogimages/springcloud0515/linux20090910.png" alt="image-20200909174811792"></p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><blockquote><p>[ condition ] <strong>注意</strong>：condition前后需要有空格，非空返回true，可用$?验证(&gt;0为true，&gt;1为false) </p></blockquote><h4 id="常用的判断条件"><a href="#常用的判断条件" class="headerlink" title="常用的判断条件"></a>常用的判断条件</h4><p>1)两个整数比较</p><table><thead><tr><th>符号</th><th>符号说明</th><th>符号</th><th>符号说明</th></tr></thead><tbody><tr><td>=</td><td>字符串比较</td><td>-lt</td><td>小于</td></tr><tr><td>-le</td><td>小于等于</td><td>-eq</td><td>等于</td></tr><tr><td>-gt</td><td>大于</td><td>-ge</td><td>大于等于</td></tr><tr><td>-ne</td><td>不等于</td><td></td><td></td></tr></tbody></table><p>2)按照文件权限进行判断</p><blockquote><p>-r  有读的权限[ -r 文件  ]                 -w 有写的权限</p><p>-x  有执行的权限</p></blockquote><p>3) 按照文件类型进行判断</p><blockquote><p>-f 文件存在并且是一个常规的文件                       -e 文件存在</p><p>-d 文件存在并是一个目录</p></blockquote><h4 id="条件判断的结构"><a href="#条件判断的结构" class="headerlink" title="条件判断的结构"></a>条件判断的结构</h4><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><blockquote><p>if [ 条件判断式 ]</p><p>then 程序</p><p>fi</p><p>=================</p><p>if [ 条件判断式 ]</p><p>​    then 程序</p><p>​    elif [ 条件判断式 ]</p><p>​    then 程序</p><p>fi</p><p>注：[ 条件判断式 ]，中间必须要有空格字符 </p></blockquote><h5 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h5><blockquote><p>case $变量值 in</p><p>“值1”)</p><p>程序1</p><p>;;</p><p>“值2”)</p><p>程序2</p><p>;;</p><p>…</p><p>esac</p></blockquote><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><p>1.判断字符串是否相等(=)</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token string">"ok"</span> <span class="token operator">=</span> <span class="token string">"ok"</span><span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"equal"</span><span class="token keyword">fi</span></code></pre><p>2.判断整数的大于</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span>23 -gt 22<span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"大于"</span><span class="token keyword">fi</span></code></pre><p>3.判断文件是否存在</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e /root/shell/a.txt <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"存在"</span><span class="token keyword">fi</span></code></pre><p>4.case例子</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#！ /bin/bash</span><span class="token comment" spellcheck="true">##$1表示从命令行接受一个参数</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">"周一"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">"周二"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">"周三"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">"other"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>esac</code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><blockquote><p>for 变量 in 值1 值2 值3…</p><p>   do   </p><p>​      程序</p><p>done</p><p>=========================</p><p>for ((初始值:循环控制条件:变量变化))</p><p>do </p><p>   程序</p><p>done</p></blockquote><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><blockquote><p>while [ 条件判断 ] </p><p>do</p><p>   程序</p><p>done</p></blockquote><h4 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h4><p>1.输出命令行输入的参数</p><blockquote><p>$*：表示将命令行输入的数字一行输出</p><p>$@：表示将命令行输入的数字多行输出</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#！ /bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"您输入的数字为 <span class="token variable">$i</span>"</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"==============="</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"您输入的数字为 <span class="token variable">$j</span>"</span><span class="token keyword">done</span></code></pre><p>输出结果：</p><p><img src="../../../blogimages/springcloud0515/linux20091301.png" alt="image-20200913120255309"></p><p>2.计算1-100的和</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#！ /bin/bash</span>SUM<span class="token operator">=</span>0<span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>  SUM+<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$SUM</span>+<span class="token variable">$i</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"sum=<span class="token variable">$SUM</span>"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中间件ShardingSphere</title>
      <link href="/2020/09/05/shu-ju-ku-zhong-jian-jian-shardingsphere/"/>
      <url>/2020/09/05/shu-ju-ku-zhong-jian-jian-shardingsphere/</url>
      
        <content type="html"><![CDATA[<p>数据库中间件ShardingSphere</p><p><a href="http://shardingsphere.apache.org/" target="_blank" rel="noopener">去ShardingSphere官网了解</a></p><h3 id="一、基本的概念"><a href="#一、基本的概念" class="headerlink" title="一、基本的概念"></a>一、基本的概念</h3><blockquote><p>Apache ShardingSphere是一个<strong>开源分布式数据库中间件解决方案</strong>，<strong>子产品有三种</strong>Sharding-JDBC、Sharding-Proxy和Sidecar(规划中)，该软件的定位为<strong>关系型数据库中间件</strong>，合理分布式环境下使用关系型数据库操作</p></blockquote><h4 id="1-分库分表"><a href="#1-分库分表" class="headerlink" title="1.分库分表"></a>1.分库分表</h4><blockquote><p>在关系型数据库中，数据量随着业务与时间的发展，会使得表里的数据越来越多，如果再对数据库表进行增删改查时，会产生性能减低的问题</p><p>解决方案是分库分表，对于不同的业务将数据库中的表放置在不同的数据库服务器上，表中的数据量过大时，将表拆分成多个表来存储数据信息。</p></blockquote><h5 id="2-分库分表的方式"><a href="#2-分库分表的方式" class="headerlink" title="2.分库分表的方式"></a>2.分库分表的方式</h5><blockquote><p>分库分表的方式有：垂直切分和水平切分</p><p>垂直切分分为：垂直分表和垂直分库</p><p>水平切分分为：水平分表和水平分库</p></blockquote><h5 id="3-垂直分表"><a href="#3-垂直分表" class="headerlink" title="3.垂直分表"></a>3.垂直分表</h5><blockquote><p>操作数据库中某张表，把这张表中的一部分字段数据存到一张新表里，再把这张表另一部分字段数据存储到另一张表中</p></blockquote><h5 id="4-垂直分库"><a href="#4-垂直分库" class="headerlink" title="4.垂直分库"></a>4.垂直分库</h5><blockquote><p>将单一的数据库按照业务进行划分，例如商品表、订单表、人员表，对这些表放置在不同的服务器中，一个数据库只做一个业务事件。</p></blockquote><h5 id="5-水平分库"><a href="#5-水平分库" class="headerlink" title="5.水平分库"></a>5.水平分库</h5><blockquote><p>相同的数据表进行复制放在另一个数据库中，两个数据库中存放的数据表是相同的数据表，数据存储时，根据某种规则将数据进行分开存储例如按照id的奇偶性。</p></blockquote><h5 id="6-水平分表"><a href="#6-水平分表" class="headerlink" title="6.水平分表"></a>6.水平分表</h5><blockquote><p>在同一个数据库中，创建相同结构的数据库表，根据某种规则将数据存储到对应的数据表中。</p></blockquote><h5 id="7-分库分表的应用和问题"><a href="#7-分库分表的应用和问题" class="headerlink" title="7.分库分表的应用和问题"></a>7.分库分表的应用和问题</h5><blockquote><p>应用时考虑：</p><p>1.设计数据库时，需要考虑数据库垂直分库和垂直分表</p><p>2.随着数据库数据量的增加，不要马上考虑水平切分，首先考虑缓存处理，读写分离，使用索引等等方式，如果这些方式不能根本解决问题，在考虑做水平分库和水平分表</p><p>问题：</p><p>1.跨界点连接查询问题(分页、排序)</p><p>2.多数据源管理的问题</p></blockquote><h3 id="二、Sharding-JDBC"><a href="#二、Sharding-JDBC" class="headerlink" title="二、Sharding-JDBC"></a>二、Sharding-JDBC</h3><h4 id="0-基本概念"><a href="#0-基本概念" class="headerlink" title="0.基本概念"></a>0.基本概念</h4><blockquote><p>ShardingSphere-JDBC自身定义为<strong>轻量级Java框架</strong>，可在Java JDBC层提供额外的服务。客户端直接连接到数据库时，它以jar的形式提供服务，不需要额外的部署和依赖。它可以被认为是增强的JDBC驱动程序，它与JDBC和各种ORM框架完全兼容。</p><ul><li><strong>适用于任何基于JDBC的ORM框架</strong>，例如JPA，Hibernate，Mybatis，Spring JDBC模板或直接使用JDBC。</li><li><strong>支持任何第三方数据库连接池</strong>，例如DBCP，C3P0，BoneCP，Druid，HikariCP。</li><li><strong>支持任何种类的JDBC标准数据库</strong>：MySQL，Oracle，SQLServer，PostgreSQL和任何遵循SQL92的数据库。</li></ul></blockquote><p>功能：</p><blockquote><p> 数据分片和读写分离</p><p>简化分库分表之后的数据相关操作</p></blockquote><p>操作</p><h4 id="1-水平分表"><a href="#1-水平分表" class="headerlink" title="1.水平分表"></a>1.水平分表</h4><blockquote><p>1) 搭建环境：SpringBoot+MybatisPlus+Sharing-JDBC+Druid连接池</p><p>​    创建工程+引入依赖</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jdbc20090601.png" alt="image-20200906093150820"></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0-RC1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><blockquote><p>2) 创建数据库、创建数据库表：</p><p>创建数据库course_db</p><p>在数据库中创建两张表：couse_1和couse_2</p><p>约束：课程1和课程2分别添加数据id为奇数或者偶数的数据</p><p>创建两张相同结构的表</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> couse_1<span class="token punctuation">(</span>    <span class="token punctuation">`</span>cid<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>cname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>cstatus<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span>  <span class="token keyword">CHARSET</span> <span class="token operator">=</span> UTF8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> couse_2<span class="token punctuation">(</span>   <span class="token punctuation">`</span>cid<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>cname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>cstatus<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8    </code></pre><blockquote><p>3)创建实体类，mybatis的Mapper，测试类中注入Mapper，启动类中开启扫描</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Couse</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long cid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cstatus<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>4）数据配置</p><p>这个配置是真的多，不知道真实项目中会不会用到，哈哈哈</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##shardingjdbc分片策略</span><span class="token comment" spellcheck="true">## 配置数据源，给数据源起一个名称 这里为m1</span>spring.shardingsphere.datasource.names=m1<span class="token comment" spellcheck="true">#一个实体类对应两个数据库表的问题</span>spring.main.allow<span class="token punctuation">-</span>bean<span class="token punctuation">-</span>definition<span class="token punctuation">-</span>overriding=true<span class="token comment" spellcheck="true">##配置数据源的信息，连接池、驱动、地址、用户名、密码</span>spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.m1.driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name=com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true">##jdbc:mysql://localhost:3306/course_db?serverTimerzone=GMT%2B8,最后面试配置时区</span><span class="token comment" spellcheck="true">##由于数据库版本的问题</span>spring.shardingsphere.datasource.m1.url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/couse_db<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=UTCspring.shardingsphere.datasource.m1.username=rootspring.shardingsphere.datasource.m1.password=123<span class="token comment" spellcheck="true">## 指定couse分布情况，配置数据库里面，变名称都是什么</span>spring.shardingsphere.sharding.tables.couse.actual<span class="token punctuation">-</span>data<span class="token punctuation">-</span>nodes=m1.couse_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##couse表中主键的生成策略,SNOWFLAKE雪花算法，产生一个随机数</span>spring.shardingsphere.sharding.tables.couse.key<span class="token punctuation">-</span>generator.column=cidspring.shardingsphere.sharding.tables.couse.key<span class="token punctuation">-</span>generator.type=SNOWFLAKE<span class="token comment" spellcheck="true">##couse表中数据的插入规则，对于偶数的数据插入在表1中，对于奇数的数据插入在表2中</span>spring.shardingsphere.sharding.tables.couse.table<span class="token punctuation">-</span>strategy.inline.sharding<span class="token punctuation">-</span>column=cidspring.shardingsphere.sharding.tables.couse.table<span class="token punctuation">-</span>strategy.inline.algorithm<span class="token punctuation">-</span>expression=couse_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>cid%2 + 1<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##打开sql输出日志</span>spring.shardingsphere.props.sql.show=true</code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingjdbcApplicationTests</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//需要有Runwith注解和public标识</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CourseMapper courseMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将10条数据加入数据表中</span>   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           Couse course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Couse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           course<span class="token punctuation">.</span><span class="token function">setCstatus</span><span class="token punctuation">(</span><span class="token string">"Normal"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           course<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span><span class="token punctuation">;</span>           courseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据库2的数据</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jdbc20090602.png" alt="image-20200906094039588"></p><p>数据库1的数据</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jdbc20090603.png" alt="image-20200906094124006"></p><p>总结：水平分表，在同一个数据库中，两个相同结构的数据库表分摊了压力</p><h4 id="2-水平分库"><a href="#2-水平分库" class="headerlink" title="2.水平分库"></a>2.水平分库</h4><h5 id="1-创建数据"><a href="#1-创建数据" class="headerlink" title="1.创建数据"></a>1.创建数据</h5><blockquote><p>创建两个数据库，具有相同表结构的数据库，例如创建数据库edu_db_1和edu_db_2，然后创建数据表与上面的相同couse_1和couse_1</p><p>规则如下：</p><p>数据库规则：userid为偶数添加到数据库edu_db_1；为奇数时添加到数据库edu_db_2中</p><p>数据表规则：cid为偶数添加到数据表couse_1;为奇数添加到数据表couse_2中</p></blockquote><h5 id="2-指定规则"><a href="#2-指定规则" class="headerlink" title="2.指定规则"></a>2.指定规则</h5><table><thead><tr><th>edu_db_1/couse_1</th><th>edu_db_1/couse_2</th><th>edu_db_2/couse_1</th><th>edu_db_2/couse_2</th></tr></thead><tbody><tr><td>userid偶数cid为偶数</td><td>userid偶数cid为奇数</td><td>userid奇数cid为偶数</td><td>userid奇数cid为奇数</td></tr></tbody></table><h5 id="3-配置分片规则"><a href="#3-配置分片规则" class="headerlink" title="3.配置分片规则"></a>3.配置分片规则</h5><blockquote><p>出现的问题：由于自己粗心，水平分表时的数据库以及数据表的名称中都是couse但是我想写的是course,在当前的测试中对单词修改过来了，但是导致数据库表的名称与实体类不相匹配，修改配置文件中的信息。在配置文件中检查一下名称或者使用注解在实体类上指定数据库表@TableName(“couse”)</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##shardingjdbc分片策略</span><span class="token comment" spellcheck="true">## 配置数据源，给数据源起一个名称 这里为m1  多数据库</span>spring.shardingsphere.datasource.names=m1<span class="token punctuation">,</span>m2<span class="token comment" spellcheck="true">#一个实体类对应两个数据库表的问题</span>spring.main.allow<span class="token punctuation">-</span>bean<span class="token punctuation">-</span>definition<span class="token punctuation">-</span>overriding=true<span class="token comment" spellcheck="true">##配置数据源1的信息，连接池、驱动、地址、用户名、密码</span>spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.m1.driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name=com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true">##jdbc:mysql://localhost:3306/course_db?serverTimerzone=GMT%2B8,最后面试配置时区</span>spring.shardingsphere.datasource.m1.url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/course_db_1<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=UTCspring.shardingsphere.datasource.m1.username=rootspring.shardingsphere.datasource.m1.password=123<span class="token comment" spellcheck="true">##配置数据源2的信息，连接池、驱动、地址、用户名、密码</span>spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.m2.driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name=com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true">##jdbc:mysql://localhost:3306/course_db?serverTimerzone=GMT%2B8,最后面试配置时区</span>spring.shardingsphere.datasource.m2.url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/course_db_2<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=UTCspring.shardingsphere.datasource.m2.username=rootspring.shardingsphere.datasource.m2.password=123<span class="token comment" spellcheck="true">## 指定数据库分布情况，数据库表的分布情况</span><span class="token comment" spellcheck="true">##=号前面的信息时实体类的配置信息，等号右面的信息时数据库表的信息，通常两者之间是相同的例如数据库表为course 实体类为 Course</span>spring.shardingsphere.sharding.tables.couse.actual<span class="token punctuation">-</span>data<span class="token punctuation">-</span>nodes=m$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span>.course_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##couse表中主键的生成策略,SNOWFLAKE雪花算法，产生一个随机数</span>spring.shardingsphere.sharding.tables.couse.key<span class="token punctuation">-</span>generator.column=cidspring.shardingsphere.sharding.tables.couse.key<span class="token punctuation">-</span>generator.type=SNOWFLAKE<span class="token comment" spellcheck="true">##指定数据库的分配策略，根据约束，user_id如果是偶数添加到m1，如果是奇数添加到m2</span>spring.shardingsphere.sharding.tables.couse.database<span class="token punctuation">-</span>strategy.inline.sharding<span class="token punctuation">-</span>column=user_idspring.shardingsphere.sharding.tables.couse.database<span class="token punctuation">-</span>strategy.inline.algorithm<span class="token punctuation">-</span>expression=m$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>user_id%2 + 1<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##数据库表的分片的策略</span>spring.shardingsphere.sharding.tables.couse.table<span class="token punctuation">-</span>strategy.inline.sharding<span class="token punctuation">-</span>column=cidspring.shardingsphere.sharding.tables.couse.table<span class="token punctuation">-</span>strategy.inline.algorithm<span class="token punctuation">-</span>expression=course_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>cid%2 + 1<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##打开sql输出日志</span>spring.shardingsphere.props.sql.show=true</code></pre><h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//=====================水平分库===========================</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCourseDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Couse course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Couse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"javaDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span><span class="token function">setCstatus</span><span class="token punctuation">(</span><span class="token string">"Normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            courseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryCourseDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>Couse<span class="token operator">></span>  wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">,</span>509300176519692288L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Couse couse <span class="token operator">=</span> courseMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>couse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-垂直分库"><a href="#3-垂直分库" class="headerlink" title="3.垂直分库"></a>3.垂直分库</h4><blockquote><p>垂直分库是一个数据库固定的执行一件事情，是一个专库专表</p></blockquote><h5 id="1-专库专表的配置"><a href="#1-专库专表的配置" class="headerlink" title="1.专库专表的配置"></a>1.专库专表的配置</h5><pre class=" language-java"><code class="language-java">##配置数据源<span class="token number">2</span>的信息，连接池、驱动、地址、用户名、密码spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>m3<span class="token punctuation">.</span>type<span class="token operator">=</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourcespring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>m3<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver##jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>course_db<span class="token operator">?</span>serverTimerzone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8<span class="token punctuation">,</span>最后面试配置时区spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>m3<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>user_db<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>UTCspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>m3<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>m3<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123</span>## 专库专表的配置spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>t_user<span class="token punctuation">.</span>actual<span class="token operator">-</span>data<span class="token operator">-</span>nodes<span class="token operator">=</span>m$<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">.</span>t_user##couse表中主键的生成策略<span class="token punctuation">,</span>SNOWFLAKE雪花算法，产生一个随机数spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>t_user<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>column<span class="token operator">=</span>user_idspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>t_user<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>type<span class="token operator">=</span>SNOWFLAKE##数据库表的分片的策略spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>t_user<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>sharding<span class="token operator">-</span>column<span class="token operator">=</span>user_idspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>t_user<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>algorithm<span class="token operator">-</span>expression<span class="token operator">=</span>t_user</code></pre><h5 id="2-公共表"><a href="#2-公共表" class="headerlink" title="2.公共表"></a>2.公共表</h5><blockquote><p>1).存储固定数据的表，表数据很少发生变化，查询时经常进行关联</p><p>2).在每一个数据库文件中都创建出一个相同结构的公共表</p></blockquote><blockquote></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##公共表配置</span>spring.shardingsphere.sharding.broadcast<span class="token punctuation">-</span>tables=t_udictspring.shardingsphere.sharding.tables.t_udict.key<span class="token punctuation">-</span>generator.column=udict_idspring.shardingsphere.sharding.tables.t_udict.key<span class="token punctuation">-</span>generator.type=SNOWFLAKE</code></pre><h5 id="3-读写分离"><a href="#3-读写分离" class="headerlink" title="3.读写分离"></a>3.读写分离</h5><h6 id="3-1-相关概念"><a href="#3-1-相关概念" class="headerlink" title="3.1 相关概念"></a>3.1 相关概念</h6><p>读写分离又相当于主从复制的一个过程，我们在对数据库进行数据修改时，操作数据库1；获取数据信息的时候，操作数据库2。数据库2需要实时与数据库1做一些同步操作，主服务器的数据与从服务器数据相同。</p><p>数据库主从复制(一主一从、一主多从、多主多从)</p><blockquote><p>主服务器开启binlog日志，记录增删改操作</p><p>从服务器实时监控主服务器的binlog日志文件，当文件有变化时，同步从服务器的数据</p><p>Sharding-JDBC通过sql语义分析，实现读写分离过程，不会做数据同步的操作，数据同步由数据库自身实现。</p></blockquote><h6 id="3-2-配置读写分离步骤"><a href="#3-2-配置读写分离步骤" class="headerlink" title="3.2 配置读写分离步骤"></a>3.2 配置读写分离步骤</h6><blockquote><p>1.创建两个Mysql数据库服务器，并且启动两个Mysql服务器</p><p>复制原有的mysql文件夹，当做从服务器</p><p>2.修改my.ini文件</p><p>修改端口号，数据文件路径，从服务器实例的路径</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090701.png" alt="image-20200907111508780"></p><p>3.将从服务器安装在windows安装的服务中</p><p>进入从服务器的bin文件路径下安装从服务器</p><p>使用命令：mysqld install mysqls1 –defaults-file=”D:\MYsql\MySQL\MySQL Server 5.5-s1\my.ini”</p><p>安装结果如下，手动启动两个数据库服务器实例：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090702.png" alt="image-20200907111508780"></p><p>如果安装中出错，删除掉服务器再进行重新安装：</p><p>sc delete 服务名称</p><p>从服务器是从主服务器复制过来的，因此里面的数据完全一致，使用原先的账号密码进行登录。</p></blockquote><h6 id="3-3-配置主从服务器"><a href="#3-3-配置主从服务器" class="headerlink" title="3.3 配置主从服务器"></a>3.3 配置主从服务器</h6><p><strong>1.主服务器配置</strong></p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span>##需要在主服务器的my.ini中添加一下信息 ##开启日志<span class="token constant">log-bin</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql-bin</span><span class="token constant">binlog_format</span><span class="token attr-value"><span class="token punctuation">=</span>ROW    ##选择row模式</span>##设置服务id，主从不能一致<span class="token constant">server_id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span>#设置需要同步的数据库，如果不配置，对于所有的数据库进行同步操作<span class="token constant">binlog-do-db</span> <span class="token attr-value"><span class="token punctuation">=</span> user_db</span>##屏蔽系统库同步<span class="token constant">binlog-ignore-db</span><span class="token attr-value"><span class="token punctuation">=</span>mysql</span><span class="token constant">binlog-ignore-db</span><span class="token attr-value"><span class="token punctuation">=</span>information_schema</span><span class="token constant">binlog-ignore-db</span><span class="token attr-value"><span class="token punctuation">=</span>performance_schema</span></code></pre><p><strong>2.从服务器配置</strong></p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span>##需要在从服务器的my.ini中添加一下信息 ##开启日志<span class="token constant">log-bin</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql-bin   ##binlog文件名</span><span class="token constant">binlog_format</span><span class="token attr-value"><span class="token punctuation">=</span>ROW    ##选择row模式</span>##设置服务id，主从不能一致  <span class="token constant">server_id</span> <span class="token attr-value"><span class="token punctuation">=</span> 2</span>#设置需要同步的数据库<span class="token constant">replicate_wild_do_table</span> <span class="token attr-value"><span class="token punctuation">=</span> user_db.%</span>##屏蔽系统库同步<span class="token constant">replicate_wild_ignore_table</span><span class="token attr-value"><span class="token punctuation">=</span>mysql.%</span><span class="token constant">replicate_wild_ignore_table</span><span class="token attr-value"><span class="token punctuation">=</span>information_schema.%</span><span class="token constant">replicate_wild_ignore_table</span><span class="token attr-value"><span class="token punctuation">=</span>performance_schema.%</span></code></pre><p><strong>3.创建用于主从复制的账号</strong>，在mysql的数据库中创建用户也可以</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##切换至主库bin目录，登录主库</span>mysql -h localhost -uroot -p<span class="token comment" spellcheck="true">##授权主备复制专用账号</span>GRANT REPLICATION SLAVE ON *.* TO <span class="token string">'db_sync'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'db_sync'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##刷新权限</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##确认位点，记录下文件名以及位点</span>show master status<span class="token punctuation">;</span></code></pre><p>创建账号信息如下</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090704.png" alt="image-20200907115026333"></p><p><strong>4.主从同步设置</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##切换至主库bin目录，登录从库</span>mysql -h localhost -P3307 -uroot -p<span class="token comment" spellcheck="true">##先停止同步</span>STOP SLAVE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##修改从库指向主库，使用上一步记录的文件名以及位点</span>CHANGE MASTER TO master_host <span class="token operator">=</span> <span class="token string">'localhost'</span>,master_user <span class="token operator">=</span> <span class="token string">'db_sync'</span>,master_password <span class="token operator">=</span> <span class="token string">'db_sync'</span>, <span class="token comment" spellcheck="true">##主从用户的密码</span>master_log_file <span class="token operator">=</span> <span class="token string">'mysql-bin.000001'</span>, <span class="token comment" spellcheck="true">## 主服务器中的那个名字</span>master_log_pos <span class="token operator">=</span> 107<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">## 主服务器中的那个编号</span><span class="token comment" spellcheck="true">##启动同步</span>START SLAVE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##查看从库状态Slave_IO_Runing和Slave_SQL_Runing都为yes表示成功，如果不为yes检查error_log，查看异常信息。</span>show slave status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##不一定执行</span>STOP SLAVE IO_THREAD FOR CHANNEL <span class="token string">''</span><span class="token punctuation">;</span>reset slave all<span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090705.png" alt="image-20200907121716298"></p><h4 id="4-Sharding-jdbc主从复制"><a href="#4-Sharding-jdbc主从复制" class="headerlink" title="4.Sharding-jdbc主从复制"></a>4.Sharding-jdbc主从复制</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##主从配置，从数据库服务器的数据源信息</span>spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.s0.driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name=com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true">##serverTimezone该属性是连接工具6之后必须添加的字段，否则会有空指针异常，本次使用的是8.0.18</span>spring.shardingsphere.datasource.s0.url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3307/user_db<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=UTCspring.shardingsphere.datasource.s0.username=rootspring.shardingsphere.datasource.s0.password=123<span class="token comment" spellcheck="true">##主从数据源配置</span>spring.shardingsphere.sharding.master<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>rules.ds0.master<span class="token punctuation">-</span>data<span class="token punctuation">-</span>source<span class="token punctuation">-</span>name=m3spring.shardingsphere.sharding.master<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>rules.ds0.slave<span class="token punctuation">-</span>data<span class="token punctuation">-</span>source<span class="token punctuation">-</span>names=s0<span class="token comment" spellcheck="true">## 专库专表的配置</span><span class="token comment" spellcheck="true">#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m$->{3}.t_user</span><span class="token comment" spellcheck="true">##读写分离数据库表相关配置</span>spring.shardingsphere.sharding.tables.t_user.actual<span class="token punctuation">-</span>data<span class="token punctuation">-</span>nodes=ds0.t_user</code></pre><p>添加依赖后测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加测试，向主服务器插入数据 </span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUstatus</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查询测试，从从数据库服务器获取数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span>509769424882892801L<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="三、Sharding-Proxy"><a href="#三、Sharding-Proxy" class="headerlink" title="三、Sharding-Proxy"></a>三、Sharding-Proxy</h3><h4 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0.介绍"></a>0.介绍</h4><blockquote><p>ShardingSphere-Proxy是一个透明数据库代理，它提供了一种数据库服务器，该服务器封装了数据库二进制协议以支持异构语言。对DBA友好的是，现在提供的MySQL版本可以使用与MySQL协议兼容的任何类型的终端（例如MySQL Command Client，MySQL Workbench等）来操作数据。</p><ul><li>对应用程序完全透明，可以直接用作MySQL。</li><li>适用于任何与MySQL和PostgreSQL协议兼容的终端。</li></ul></blockquote><p><img src="https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy-brief.png" alt="官方网址的图片"></p><p>该工具是一个独立的软件，相当于一个网关服务器，客户端只需要操作中间件，对应的持久化数据不再需要自己去配置。</p><p><a href="https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-sharding-proxy-bin.tar.gz" target="_blank" rel="noopener">工具下载地址</a></p><p><strong>注意：下载安装包后直接解压，然后查看解压后的文件夹中的lib文件夹下的.jar文件后缀名是否正确，如果不正确需要手动进行修改。</strong></p><h4 id="1-Sharding-Proxy配置"><a href="#1-Sharding-Proxy配置" class="headerlink" title="1.Sharding-Proxy配置"></a>1.Sharding-Proxy配置</h4><h5 id="1-0-进入conf文件夹下"><a href="#1-0-进入conf文件夹下" class="headerlink" title="1.0.进入conf文件夹下"></a>1.0.进入conf文件夹下</h5><h5 id="1-1-修改server-yaml"><a href="#1-1-修改server-yaml" class="headerlink" title="1.1.修改server.yaml"></a>1.1.修改server.yaml</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">authentication</span><span class="token punctuation">:</span>  <span class="token key atrule">users</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">sharding</span><span class="token punctuation">:</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> sharding      <span class="token key atrule">authorizedSchemas</span><span class="token punctuation">:</span> sharding_db<span class="token key atrule">props</span><span class="token punctuation">:</span>  <span class="token key atrule">max.connections.size.per.query</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">acceptor.size</span><span class="token punctuation">:</span> <span class="token number">16  </span><span class="token comment" spellcheck="true"># The default value is available processors count * 2.</span>  <span class="token key atrule">executor.size</span><span class="token punctuation">:</span> <span class="token number">16  </span><span class="token comment" spellcheck="true"># Infinite by default.</span>  <span class="token key atrule">proxy.frontend.flush.threshold</span><span class="token punctuation">:</span> <span class="token number">128  </span><span class="token comment" spellcheck="true"># The default value is 128.</span>    <span class="token comment" spellcheck="true"># LOCAL: Proxy will run with LOCAL transaction.</span>    <span class="token comment" spellcheck="true"># XA: Proxy will run with XA transaction.</span>    <span class="token comment" spellcheck="true"># BASE: Proxy will run with B.A.S.E transaction.</span>  <span class="token key atrule">proxy.transaction.type</span><span class="token punctuation">:</span> LOCAL  <span class="token key atrule">proxy.opentracing.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">proxy.hint.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">query.with.cipher.column</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">sql.show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">allow.range.query.with.inline.sharding</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><h5 id="1-2-修改config-sharding-yaml"><a href="#1-2-修改config-sharding-yaml" class="headerlink" title="1.2.修改config-sharding.yaml"></a>1.2.修改config-sharding.yaml</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090801.png" alt="image-20200908112304640"></p><p>该文件中提示我们要将mysql连接的驱动jar包放置在lib的目录下，当然如果连接其他的数据库，就是用其他的jar包。复制maven仓库中的mysql-connection-java的jar包到，sharding-proxy文件的lib中。</p><p>配置单一的数据库文件，进行测试</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>  <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/user_db<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">shardingRule</span><span class="token punctuation">:</span>  <span class="token key atrule">tables</span><span class="token punctuation">:</span>    <span class="token key atrule">t_order</span><span class="token punctuation">:</span>      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>.t_order_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>      <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>        <span class="token key atrule">inline</span><span class="token punctuation">:</span>          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> order_id          <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> t_order_$<span class="token punctuation">{</span>order_id % 2<span class="token punctuation">}</span>      <span class="token key atrule">keyGenerator</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE        <span class="token key atrule">column</span><span class="token punctuation">:</span> order_id  <span class="token key atrule">bindingTables</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> t_order  <span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">inline</span><span class="token punctuation">:</span>      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id      <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token key atrule">defaultTableStrategy</span><span class="token punctuation">:</span>    none<span class="token punctuation">:</span></code></pre><h5 id="1-3-启动服务"><a href="#1-3-启动服务" class="headerlink" title="1.3.启动服务"></a>1.3.启动服务</h5><blockquote><p> 默认的端口号是3307  因此对于mysql数据库的从服务器尽量使用其余的端口</p></blockquote><p>运行bin下面的.bat文件，成功启动</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090802.png" alt="image-20200908114551120"></p><h5 id="1-4-连接proxy服务"><a href="#1-4-连接proxy服务" class="headerlink" title="1.4.连接proxy服务"></a>1.4.连接proxy服务</h5><blockquote><p>##连接sharding-proxy服务器，相当于msql，用户名、密码、端口需要注意一下 </p><p>mysql -P3307 -uroot -proot</p><p>##查看数据库信息</p><p>show databases;</p><p>##选择当前的数据库</p><p>use sharding_db</p><p>##创建数据库表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> ds_0<span class="token punctuation">.</span>t_order<span class="token punctuation">(</span>order_id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>user_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>##插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_order<span class="token punctuation">(</span>order_id<span class="token punctuation">,</span>user_id<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'init'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090803.png" alt="连接成功并查看数据库信息"></p><h5 id="1-5-查看数据库文件信息"><a href="#1-5-查看数据库文件信息" class="headerlink" title="1.5.查看数据库文件信息"></a>1.5.查看数据库文件信息</h5><blockquote><p> proxy在mysql中创建表并插入数据信息</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090804.png" alt="成功创建数据库表"></p><h4 id="2-Sharding-Proxy实现分库"><a href="#2-Sharding-Proxy实现分库" class="headerlink" title="2.Sharding-Proxy实现分库"></a>2.Sharding-Proxy实现分库</h4><p>配置config-sharding.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> sharding_db<span class="token comment" spellcheck="true">##数据源信息</span><span class="token key atrule">dataSources</span><span class="token punctuation">:</span>  <span class="token key atrule">ds_0</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/course_db_1<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>  <span class="token key atrule">ds_1</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/course_db_2<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token comment" spellcheck="true">##数据插入策略</span><span class="token comment" spellcheck="true">##根据user_id的奇偶性选择数据表，根据order_id选择数据源信息</span><span class="token key atrule">shardingRule</span><span class="token punctuation">:</span>  <span class="token key atrule">tables</span><span class="token punctuation">:</span>    <span class="token key atrule">t_order</span><span class="token punctuation">:</span>      <span class="token key atrule">actualDataNodes</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.t_order_$<span class="token punctuation">{</span>1..2<span class="token punctuation">}</span>      <span class="token key atrule">tableStrategy</span><span class="token punctuation">:</span>        <span class="token key atrule">inline</span><span class="token punctuation">:</span>          <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> order_id          <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> t_order_$<span class="token punctuation">{</span>order_id % 2+1<span class="token punctuation">}</span>      <span class="token key atrule">keyGenerator</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE        <span class="token key atrule">column</span><span class="token punctuation">:</span> order_id  <span class="token key atrule">bindingTables</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> t_order  <span class="token key atrule">defaultDatabaseStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">inline</span><span class="token punctuation">:</span>      <span class="token key atrule">shardingColumn</span><span class="token punctuation">:</span> user_id      <span class="token key atrule">algorithmExpression</span><span class="token punctuation">:</span> ds_$<span class="token punctuation">{</span>user_id % 2<span class="token punctuation">}</span>  <span class="token key atrule">defaultTableStrategy</span><span class="token punctuation">:</span>    none<span class="token punctuation">:</span></code></pre><p>使用cmd本地连接，分库测试</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090805.png" alt="image-20200908121417703"></p><h4 id="3-Sharding-Proxy读写分离"><a href="#3-Sharding-Proxy读写分离" class="headerlink" title="3.Sharding-Proxy读写分离"></a>3.Sharding-Proxy读写分离</h4><h5 id="3-1-创建主从服务器"><a href="#3-1-创建主从服务器" class="headerlink" title="3.1 创建主从服务器"></a>3.1 创建主从服务器</h5><p>Sharding-Proxy做到的主从复制在于对Proxy服务器进行增删改操作在主服务器，在查询时从从服务器中查询，<strong>主从服务器的数据同步需要使用mysql的相关配置</strong>，使得主从服务器同步。</p><h5 id="3-2-模拟主从服务器"><a href="#3-2-模拟主从服务器" class="headerlink" title="3.2 模拟主从服务器"></a>3.2 模拟主从服务器</h5><blockquote><p>创建三个数据库，一个作为主服务器，两个作为从服务器</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090806.png" alt="image-20200908145312970"></p><h5 id="3-3-配置相关的信息"><a href="#3-3-配置相关的信息" class="headerlink" title="3.3 配置相关的信息"></a>3.3 配置相关的信息</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">schemaName</span><span class="token punctuation">:</span> master_slave_db<span class="token key atrule">dataSources</span><span class="token punctuation">:</span>  <span class="token key atrule">master_ds</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/demo_ds_master<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>  <span class="token key atrule">slave_ds_0</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/demo_ds_slave_0<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span>  <span class="token key atrule">slave_ds_1</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/demo_ds_slave_1<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">connectionTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">30000</span>    <span class="token key atrule">idleTimeoutMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">maxLifetimeMilliseconds</span><span class="token punctuation">:</span> <span class="token number">1800000</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token key atrule">masterSlaveRule</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ms_ds  <span class="token key atrule">masterDataSourceName</span><span class="token punctuation">:</span> master_ds  <span class="token key atrule">slaveDataSourceNames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> slave_ds_0    <span class="token punctuation">-</span> slave_ds_1</code></pre><h5 id="3-4-测试读写分离"><a href="#3-4-测试读写分离" class="headerlink" title="3.4 测试读写分离"></a>3.4 测试读写分离</h5><p>在主库与副库中创建表结构，对于mysql配置主从关系后，只需要在主库中配置信息，从库会与主服务器同步。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090807.png" alt="image-20200908145503495"></p><p>插入一条记录，并不指定数据库信息，默认插入的位置为主表，查询一条记录默认是从从服务器查询数据。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090809.png" alt="image-20200908150236164"></p><p>向两个从表中手动添加数据，模拟查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> demo_ds_slave_0<span class="token punctuation">.</span>t_order <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> demo_ds_slave_0<span class="token punctuation">.</span>t_order <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-5模拟查询"><a href="#3-5模拟查询" class="headerlink" title="3.5模拟查询"></a>3.5模拟查询</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090808.png" alt="image-20200908152844326"></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote><p>对于mysql还是想着夸赞一下，第一个是其设计，不知道还有多少知识点在其中，简单的其存储数据、数据持久化、支持事务，mysql开源的软件，还有其底层的数据结构、索引、集群等相关的知识，使得其在互联网行业中不可或缺。</p><p>技术没有高低优劣之分，只要在合适的地点、合适的时间能够使用那么就能够发挥重要的作用，学无止境！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的服务器</title>
      <link href="/2020/09/02/zhao-gong-zuo-bi-shi-guo-hou-de-xiao-fei/"/>
      <url>/2020/09/02/zhao-gong-zuo-bi-shi-guo-hou-de-xiao-fei/</url>
      
        <content type="html"><![CDATA[<h3 id="0-笔试过后的消费"><a href="#0-笔试过后的消费" class="headerlink" title="0.笔试过后的消费"></a>0.笔试过后的消费</h3><blockquote><p>越是着急打破现状，越是不安分的表现，毕业生面对着毕业和工作的双重压力，在这个阶段才更要稳得住，稳扎稳打。</p></blockquote><p>做了两天的笔试，心态有一些变化，因此需要进行调整一下，买一台服务器犒劳一下自己。自己以为每一台阿里的云服务器都可以翻墙，没想到只有在国外的服务器才能够翻墙，自己还心热的安装了shadowsocks，最后才发现不能连接的，算是冲动的惩罚吧，最后自己决定将服务器做成一个网站的服务器。</p><h3 id="1-安装shadowsocks"><a href="#1-安装shadowsocks" class="headerlink" title="1.安装shadowsocks"></a>1.安装shadowsocks</h3><p>记录shadowsocks安装的过程，之后有了国外服务器再进行搭建</p><p>第一步</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</code></pre><p>第二步</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x shadowsocks.sh</code></pre><p>第三步</p><pre class=" language-bash"><code class="language-bash">./shadowsocks.sh 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">|</span> <span class="token function">tee</span> shadowsocks.log</code></pre><p>接着输入自己的密码、端口号、加密方式</p><p>安装成功显示的信息</p><blockquote><p>Congratulations, Shadowsocks-Python server install completed!<br>Your Server IP        : 自己的ip地址<br>Your Server Port      :  自己设置的端口号<br>Your Password         :  teddysun.com<br>Your Encryption Method:  aes-256-gcm   加密方式</p></blockquote><p>客户端的下载地址</p><blockquote><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">Windows</a>、<a href="https://github.com/yangfeicheung/Shadowsocks-X/releases">Mac</a>、<a href="https://github.com/shadowsocks/shadowsocks-android/releases">Android</a>、<a href="https://apps.apple.com/cn/app/kite-ss-proxy/id1346595633" target="_blank" rel="noopener">iPhone</a></p></blockquote><p>然后就去翻墙测试吧！！！</p><h3 id="2-在线安装mysql"><a href="#2-在线安装mysql" class="headerlink" title="2.在线安装mysql"></a>2.在线安装mysql</h3><p>连接工具使用Putty(纯命令界面)、centOs7.06</p><h4 id="1-下载mysql安装包-linux版本"><a href="#1-下载mysql安装包-linux版本" class="headerlink" title="1.下载mysql安装包(linux版本)"></a>1.下载mysql安装包(linux版本)</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</code></pre><h4 id="2-安装前检查"><a href="#2-安装前检查" class="headerlink" title="2.安装前检查"></a>2.安装前检查</h4><p>安装前，首先检查是否系统自带mysql</p><pre class=" language-bash"><code class="language-bash">rpm -qa<span class="token operator">|</span><span class="token function">grep</span> mysql</code></pre><p>如果显示</p><blockquote><p>mysql-libs-xxx</p></blockquote><p>将其卸载</p><pre class=" language-shell"><code class="language-shell">rpm -e mysql-libs-5.1.52-1.el6_0.1.x86_64　　// 普通删除模式rpm -e --nodeps mysql-libs-5.1.52-1.el6_0.1.x86_64　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</code></pre><p>检查是否存在mariadb数据库，如果有，卸载</p><pre class=" language-shell"><code class="language-shell">//查看命令rpm -qa |grep mariadb//删除命令rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</code></pre><h4 id="3-创建文件加放置mysql"><a href="#3-创建文件加放置mysql" class="headerlink" title="3.创建文件加放置mysql"></a>3.创建文件加放置mysql</h4><p>在/opt/的目录下创建mysql目录</p><pre class=" language-shell"><code class="language-shell">mkdir /opt/mysql/</code></pre><p>将用户路径下的安装包拷贝到/opt/mysql/</p><pre class=" language-shell"><code class="language-shell">cp mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz /opt/mysql/</code></pre><h4 id="4-解压安装包"><a href="#4-解压安装包" class="headerlink" title="4.解压安装包"></a>4.解压安装包</h4><p>进入/opt/mysql/后解压文件</p><pre class=" language-shell"><code class="language-shell">tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</code></pre><p>更改文件夹的名称呢过</p><pre class=" language-shell"><code class="language-shell">mv mysql-5.7.25-linux-glibc2.12-x86_64 mysql-5.7.25</code></pre><h4 id="5-添加用户和组"><a href="#5-添加用户和组" class="headerlink" title="5.添加用户和组"></a>5.添加用户和组</h4><p>查看mysql用户或者组</p><pre class=" language-shell"><code class="language-shell">cat /etc/group | grep mysql</code></pre><p>创建mysql组和mysql用户</p><pre class=" language-shell"><code class="language-shell">groupadd mysqluseradd -r -g mysql mysql</code></pre><p>创建一个data目录</p><pre class=" language-shell"><code class="language-shell">cd mysql-5.7.25mkdir data</code></pre><p>将mysql-5.7.27文件夹的所有者修改为mysql用户</p><pre class=" language-shell"><code class="language-shell">chown -R mysql.mysql /opt/mysql/mysql-5.7.25</code></pre><h4 id="6-添加配置信息"><a href="#6-添加配置信息" class="headerlink" title="6.添加配置信息"></a>6.添加配置信息</h4><p>在/opt/mysql/mysql-5.7.25/support-files/创建一个文件my_default.cnf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># For advice on how to change settings please see</span><span class="token comment" spellcheck="true"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><span class="token comment" spellcheck="true"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span><span class="token comment" spellcheck="true"># *** default location during install, and will be replaced if you</span><span class="token comment" spellcheck="true"># *** upgrade to a newer version of MySQL.</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>sql_mode<span class="token operator">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES basedir <span class="token operator">=</span> /opt/mysql/mysql-5.7.25datadir <span class="token operator">=</span> /opt/mysql/mysql-5.7.25/dataport <span class="token operator">=</span> 3306socket <span class="token operator">=</span> /tmp/mysql.sockcharacter-set-server<span class="token operator">=</span>utf8log-error <span class="token operator">=</span> /opt/mysql/mysql-5.7.25/data/mysqld.logpid-file <span class="token operator">=</span> /opt/mysql/mysql-5.7.25/data/mysqld.pid</code></pre><p>将新创建的文件拷贝到etc路径下</p><pre class=" language-shell"><code class="language-shell">cp support-files/my_default.cnf /etc/my.cnf</code></pre><h4 id="7-初始化mysqld"><a href="#7-初始化mysqld" class="headerlink" title="7.初始化mysqld"></a>7.初始化mysqld</h4><pre class=" language-shell"><code class="language-shell">//进入目录cd /opt/mysql/mysql-5.7.25//执行初始化./bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/mysql-5.7.25/ --datadir = /opt/mysql/mysql-5.7.25/data</code></pre><h4 id="8-初始化出错"><a href="#8-初始化出错" class="headerlink" title="8.初始化出错"></a>8.初始化出错</h4><p>初始化错误如下</p><blockquote><p> error while loading shared libraries: libaio.so.1: cannot open sha                                              red object file: No such file or directory</p></blockquote><p>这个错误是没有安装相关的依赖包</p><pre class=" language-shell"><code class="language-shell">yum install libaio</code></pre><p>错误2</p><blockquote><p>Found option without preceding group in config file /etc/my.cnf at line 1!</p></blockquote><p>这是由于自己的配置文件中的第一行中出错，进入配置文件删除文件就行</p><p>再次启动</p><pre class=" language-shell"><code class="language-shell">./bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/mysql-5.7.25/ --datadir = /opt/mysql/mysql-5.7.25/data</code></pre><p>进入data目录查看日志信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090301.png" alt="image-20200903113859071"></p><h4 id="9-查看日志中的初始密码"><a href="#9-查看日志中的初始密码" class="headerlink" title="9.查看日志中的初始密码"></a>9.查看日志中的初始密码</h4><p>如果初始化出错，将data目录写文件夹都删除掉修改配置文件后重新初始化，再查看日志文件，最后一行有root的临时密码</p><blockquote><p>[Note] A temporary password is generated for root@localhost: AJsadt/7hbu%</p></blockquote><p>将脚本放在开机启动</p><pre class=" language-shell"><code class="language-shell">cp support-files/mysql.server /etc/init.d/mysql</code></pre><h4 id="10-启动mysql服务"><a href="#10-启动mysql服务" class="headerlink" title="10.启动mysql服务"></a>10.启动mysql服务</h4><blockquote><p>启动出错</p><p>Failed to start mysql.service: Unit not found.</p></blockquote><pre class=" language-shell"><code class="language-shell">yum install -y mariadb-server</code></pre><p>如果启动还失败将日志文件、配置文件重新修改后在从初始化进行操作</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20090302.png" alt="image-20200903115305069"></p><h4 id="11-登录并修改密码"><a href="#11-登录并修改密码" class="headerlink" title="11.登录并修改密码"></a>11.登录并修改密码</h4><p>登录后(初始密码在日志文件中)，重新设置用户的密码</p><pre class=" language-shell"><code class="language-shell">cd /opt/mysql/mysql-5.7.25/./bin/mysql -u root -p</code></pre><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span>set password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span>grant all privileges on *.* to root@<span class="token string">'%'</span> identified by <span class="token string">'root123'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span>flush privileges<span class="token punctuation">;</span></code></pre><p>切换到mysql用户</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span>use mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span>update user <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span>flush privileges<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##退出mysql环境</span>mysql<span class="token operator">></span>exit<span class="token punctuation">;</span></code></pre><p>mysql的启动、停止和重启</p><pre class=" language-shell"><code class="language-shell">service mysql stopservice mysql startservice mysql restart</code></pre><h3 id="3-安装jdk"><a href="#3-安装jdk" class="headerlink" title="3.安装jdk"></a>3.安装jdk</h3><p>将java的安装包放在/user/local/的路径下</p><pre class=" language-shell"><code class="language-shell">mkdir /usr/local/java/cd /usr/local/java/</code></pre><p>在线下载jdk1.8版本</p><pre class=" language-shell"><code class="language-shell"> wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm </code></pre><p>修改安装包的权限</p><pre class=" language-shell"><code class="language-shell">chmod +x jdk-8u131-linux-x64.rpm </code></pre><p>安装jdk</p><pre class=" language-shell"><code class="language-shell">rpm -ivh jdk-8u131-linux-x64.rpm</code></pre><p>查看版本</p><pre class=" language-shell"><code class="language-shell">java -version</code></pre><p>安装的位置默认在/user/java/,将其添加环境变量</p><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><p>文件末尾添加如下信息</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/java/jdk1.8.0_131<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token function">export</span> JAVA_PATH<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${JRE_HOME}</span>/bin<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">${JAVA_PATH}</span></code></pre><p>保存后推出，环境变量立即生效</p><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><p>查看环境变量配置是否正确</p><blockquote><p>echo $PATH</p></blockquote><h3 id="4-安装tomcat"><a href="#4-安装tomcat" class="headerlink" title="4.安装tomcat"></a>4.安装tomcat</h3><p>将java的安装包放在/usr/local/的路径下</p><blockquote><p>cd /usr/local/</p><p>创建文件夹</p><p>mkdir tomcat</p><p>修改文件夹权限</p><p>chmod 777 tomcat/</p></blockquote><p><a href="https://mirrors.cnnic.cn/apache/tomcat/" target="_blank" rel="noopener">各种版本地址</a> 找自己需要的版本进行下载，如果使用wget + 链接下载需要权限认证，那就在最后加上取消认证的参数</p><pre class=" language-shell"><code class="language-shell">在地址后加上 --no-check-certificatewget https://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.56/bin/apache-tomcat-8.5.56.tar.gz --no-check-certificate</code></pre><p>加压安装包</p><pre class=" language-shell"><code class="language-shell">tar -xzvf apache-tomcat-8.5.56.tar.gz</code></pre><p>配置环境变量(不配置也可以，进入目录下手动开启)</p><blockquote><p>CATALINA_BASE=/usr/local/tomcat/apache-tomcat-8.5.56<br>CATALINA_HOME=/usr/local/tomcat/apache-tomcat-8.5.56<br>PATH=$PATH:$CATALINA_BASE/bin<br>export PATH CATALINA_BASE</p></blockquote><p>测试</p><blockquote><p>shartup.sh</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat20090303.png" alt="image-20200903161258088"></p><p>启动成功后查看进程：</p><blockquote><p>ps -aux|grep tomcat</p></blockquote><p>或者控制台访问,返回一个html页面的信息</p><blockquote><p>curl localhost:8080</p></blockquote><p>关闭tomcat</p><blockquote><p>shutdown.sh</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件</title>
      <link href="/2020/08/29/xiao-xi-zhong-jian-jian-rabbitmq/"/>
      <url>/2020/08/29/xiao-xi-zhong-jian-jian-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h4 id="1-了解的知识点"><a href="#1-了解的知识点" class="headerlink" title="1.了解的知识点"></a>1.了解的知识点</h4><h5 id="1-1-AMQP和JMS"><a href="#1-1-AMQP和JMS" class="headerlink" title="1.1 AMQP和JMS"></a>1.1 AMQP和JMS</h5><p>AMQP(Advanced Message Queuing Protocol)高级消息队列</p><blockquote><p>AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。</p></blockquote><p>JMS</p><blockquote><p>JMS即Java消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。</p></blockquote><h5 id="1-2-两者的联系与区别"><a href="#1-2-两者的联系与区别" class="headerlink" title="1.2 两者的联系与区别"></a>1.2 两者的联系与区别</h5><blockquote><p>JMS是定义统一接口，对消息操作进行统一；AMQP通过规定协议统一数据交互的格式</p><p>JMS限定了必须使用Java语言，AMQP只是协议，不规定实现方式，因此是跨语言的</p><p>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</p></blockquote><h5 id="1-3-常见的MQ产品"><a href="#1-3-常见的MQ产品" class="headerlink" title="1.3 常见的MQ产品"></a>1.3 常见的MQ产品</h5><blockquote><p>ActiveMQ：基于JMS</p><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p><p>RocketMQ：基于JMS，阿里产品，目前Apache管理</p><p>Kafka：分布式消息队列，高吞吐量，处理日志，Scala和Java编写的，Apache</p></blockquote><h4 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2.RabbitMQ"></a>2.RabbitMQ</h4><h5 id="2-1-业务需求"><a href="#2-1-业务需求" class="headerlink" title="2.1 业务需求"></a>2.1 业务需求</h5><p>微服务中对于数据的持久化以及搜索的系统分为两个服务系统，数据持久化系统与搜索服务系统之间数据的同步与一致性问题。</p><h5 id="2-2-消息队列介绍"><a href="#2-2-消息队列介绍" class="headerlink" title="2.2 消息队列介绍"></a>2.2 消息队列介绍</h5><blockquote><p>MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据机构。指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去处理。消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。</p></blockquote><h6 id="2-2-1-消息队列的作用"><a href="#2-2-1-消息队列的作用" class="headerlink" title="2.2.1 消息队列的作用"></a>2.2.1 消息队列的作用</h6><blockquote><p>消息队列中间件是分布式系统中重要的组件，主要解决应用<strong>解耦，异步消息，流量削锋</strong>等问题，实现高性能，高可用，可伸缩和最终一致性架构</p><p>1.<strong>解耦：</strong>一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</p><p>2.<strong>异步：</strong>主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</p><p>3.<strong>削峰：</strong>高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</p></blockquote><h6 id="2-2-2-缺点"><a href="#2-2-2-缺点" class="headerlink" title="2.2.2 缺点"></a>2.2.2 缺点</h6><blockquote><p>1、系统可用性降低。依赖服务也多，服务越容易挂掉。需要考虑MQ瘫痪的情况</p><p>2、系统复杂性提高。需要考虑消息丢失、消息重复消费、消息传递的顺序性</p><p>3、业务一致性。主业务和从属业务一致性的处理</p></blockquote><h6 id="2-2-3-RabbitMQ特点"><a href="#2-2-3-RabbitMQ特点" class="headerlink" title="2.2.3 RabbitMQ特点"></a>2.2.3 RabbitMQ特点</h6><blockquote><p><strong>基于AMQP协议的Erlang实现</strong></p><p><strong>可靠性(Reliability)：</strong>使用一些机制来保证可靠性，例如持久化、传输确认、发布确认</p><p><strong>灵活的路由(Flwxible Routing)：</strong>在消息进入队列之前，通过Exchange来路由消息的。</p><p><strong>消息集群(Clustering):</strong>多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker(整体消息平台)</p><p><strong>高可用(Highly Available Queues):</strong>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列任然可用</p><p><strong>多种协议(Multi-Protocol):</strong>Rabbit支持多种消息队列协议。</p><p><strong>多语言客户端(Many Client):</strong>RabbitMQ几乎支持所有常用语言，例如Java、.Net</p><p><strong>管理界面：</strong> RabbitMQ提供了一个易用用户界面</p><p>跟踪机制、支持插件</p></blockquote><h5 id="2-3-相关的概念"><a href="#2-3-相关的概念" class="headerlink" title="2.3 相关的概念"></a>2.3 相关的概念</h5><p>组成图如下：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20082901.png" alt="MQ消息图"></p><blockquote><p><strong>1.Message</strong>：消息，消息是不具名的，有消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key组成(路由键)、priority(消息的优先权)、delivery-model(消息可能需要持久性存储)等。</p><p><strong>2.Publisher生产者</strong>：消息的生产者，也是一个向交换器发布消息的客户端应用程序</p><p><strong>3.Exchange:交换器</strong>，用来接收生产者发送消息并将这些消息路由给服务器中的队列</p><p><strong>4.Queue：</strong>消息队列，用来保存消息直到发送给消费者。</p><p><strong>5.Connection：</strong>网络连接，比如TCP连接</p><p><strong>6.Channel：</strong>信道，多路复用连接中的一条独立的双向数据流通道，信道是建立在真实TCP连接内地虚拟连接，AMQP命令都是通过信道发送消息的，无论是发布消息，还是订阅队列、接受消息，这些动作都是通过信道完成。</p><p><strong>7.Consumer消费者</strong>:表示从一个消息队列中获取消息的客户端应用程序</p><p><strong>8.Virtural Host</strong>：虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每一个虚拟主机本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定、权限机制。默认的虚拟主机是/</p><p><strong>9.Broker</strong>：表示消息队列服务器实体</p></blockquote><h5 id="2-4-下载与安装"><a href="#2-4-下载与安装" class="headerlink" title="2.4 下载与安装"></a>2.4 下载与安装</h5><h6 id="2-4-1-查看版本对应关系"><a href="#2-4-1-查看版本对应关系" class="headerlink" title="2.4.1 查看版本对应关系"></a>2.4.1 查看版本对应关系</h6><p>RabbitMQ版本与Erlang之间的对应关系<a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">查看版本对应关系</a></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083001.png" alt="MQ与Eralang版本的对比表"></p><p>linux版本与rabbitMQ版本的对比</p><p><a href="https://www.rabbitmq.com/install-rpm.html#downloads" target="_blank" rel="noopener">linux版本对比</a></p><p>将下载的rpm安装包上传到linux上，本次使用的是CentOS7</p><blockquote><p>安装命令 rpm -ivh  XXX.rpm</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083002.png" alt="安装结果如下"></p><h6 id="2-4-2-安装后台管理插件"><a href="#2-4-2-安装后台管理插件" class="headerlink" title="2.4.2 安装后台管理插件"></a>2.4.2 安装后台管理插件</h6><blockquote><p>rabbitmq-plugins enable rabbitmq_management</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083003.png" alt="安装管理插件"></p><h6 id="2-4-3-重启RabbitMQ"><a href="#2-4-3-重启RabbitMQ" class="headerlink" title="2.4.3 重启RabbitMQ"></a>2.4.3 重启RabbitMQ</h6><blockquote><p>CentOs7启动MQ</p><p>systemctl start rabbitmq-server.service</p><p>查看启动后的状态</p><p>systemctl status  rabbitmq-service.service</p><p>重新启动</p><p>systemctl restart rabbitmq-server.service</p><p>停止服务</p><p>systemctl stop rabbitmq-server.service</p><p>查看进程</p><p>ps -ef | grep rabbitmq</p></blockquote><h6 id="2-4-4-测试"><a href="#2-4-4-测试" class="headerlink" title="2.4.4 测试"></a>2.4.4 测试</h6><p>首先需要关闭防火墙：</p><blockquote><p>systemctl stop firewalled.service</p></blockquote><p>在Web浏览器中输入http://虚拟机ip:15672/</p><p>输入默认的账号密码：guest：guest，guest用户默认不允许远程连接</p><p>自定义账号以及设置远程访问</p><p>添加管理员账号</p><blockquote><p>rabbitmqctrl add_user admin admin</p></blockquote><p>分配账号的角色</p><blockquote><p>rabbitmqctl set_user_tags admin administrator</p></blockquote><p>修改密码</p><blockquote><p>rabbitmqctl  change_password admin root123</p></blockquote><p>查看用户列表</p><blockquote><p>rabbitmqctl list_users</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083004.png" alt="命令创建用户以及设置密码"></p><p>使用admin用户远程访问</p><p>粗心大意输错了命令，导致不能远程访问，错误提示为</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083005.png" alt="网页登录"></p><p>修改如下</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083006.png" alt="设置用户的权限等级"></p><p>进入界面</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083007.png" alt="网页显示信息"></p><h5 id="2-5-管理界面"><a href="#2-5-管理界面" class="headerlink" title="2.5 管理界面"></a>2.5 管理界面</h5><p>标签页</p><blockquote><ul><li><p>overview：概览</p></li><li><p>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消费和生产</p></li><li><p>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道</p></li><li><p>Exchanges：交换机，用来实现消息的路由</p></li><li><p>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列</p></li><li><p>端口：</p><p>5672：MQ编程语言客户端连接的端口</p><p>15672：MQ管理界面的端口</p><p>25672：MQ集群的端口</p></li></ul></blockquote><h4 id="3-五种消息类型"><a href="#3-五种消息类型" class="headerlink" title="3.五种消息类型"></a>3.五种消息类型</h4><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">官方地址</a></p><h5 id="3-1-基本消息模型"><a href="#3-1-基本消息模型" class="headerlink" title="3.1 基本消息模型"></a>3.1 基本消息模型</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083008.png" alt="基本模式示意图"></p><p>RabbitMQ是一个消息代理：它接受和发送消息。对消息不进行处理，对消息只进行存储和转发二进制数据。</p><p>P：生产者，一个发送消息的用户应用程序</p><p>C：消费者，主要是用来等待接收消息的用户应用程序</p><p>队列：类似于邮箱的概念</p><p>简单的测试：访问IP:15672后登录界面后，输入自己的admin,以及密码root123，自己的虚拟主机shop</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083101.png" alt="虚拟主机名称以及所属的用户信息"></p><p>Java操作RabbitMQ发送消息。</p><p>1.类似于连接数据库，抽取出一个连接的工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//连接RabbitMQ的工具类，利用ConnectionFactory创建连接对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义一个连接工厂</span>            ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置服务器地址</span>            factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.199.159"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置端口，代码连接服务器的端口信息5672</span>            factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置虚拟主机</span>            factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/shop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置用户名</span>            factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置密码</span>            factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.发送端/生产者端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String Queue_Name <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明队列  不支持扩展 自动删除 相关参数</span>  channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>Queue_Name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向指定的队列中发送消息,基本的消息传递，发送者直接将消息放在消息队列中不需要路由的转发</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>Queue_Name<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[X] sent '"</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭信道和连接</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String Queue_Name <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明队列 (对于消费者来说，只需要在队列中获取数据，如果队列存在，拿取数据，如果队列不存在创建队列)</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>Queue_Name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义队列的消费者,继承消费者接口</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取消息，并且处理这个方法类似事件监听，如果有消息，或被自动调用</span>            <span class="token comment" spellcheck="true">//参数为</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[X] received"</span><span class="token operator">+</span>msg<span class="token operator">+</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//监听队列，第二个参数：是否自动进行消息确认</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>Queue_Name<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消息的确认模型：ACK</p><p>在数据通信中，接收端发送给发送端一种传输类型的控制字符，表示消息的确认接收，C/S端一般会使用Socket来进行连接，该过程中有一个三次握手的过程，ACK作为发送与接受两端之间的一个确认信息，RabbitMq分为手动确认和自动确认。</p><p>上面的消费者采用的是自动消费的方式,下面是一个手动消费</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String Queue_Name <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>Queue_Name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[X] received"</span><span class="token operator">+</span>msg<span class="token operator">+</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第二个参数，表示是否同时确认多个消息</span>   channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//监听队列，第二个参数：是否自动进行消息确认</span>       <span class="token comment" spellcheck="true">// channel.basicConsume(Queue_Name,true,consumer);</span>        <span class="token comment" spellcheck="true">//手动ACK，参数为false表示手动确认</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>Queue_Name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-2-work消息模型"><a href="#3-2-work消息模型" class="headerlink" title="3.2 work消息模型"></a>3.2 work消息模型</h5><p>Work模型针对生产者产生的消息过多，消费者消费速度慢，因此需要多个消费者来处理队列中的消息，这个模式下解决了消息积压的问题。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083009.png" alt="work模型示意图"></p><h5 id="3-3-订阅模型—Fanout"><a href="#3-3-订阅模型—Fanout" class="headerlink" title="3.3 订阅模型—Fanout"></a>3.3 订阅模型—Fanout</h5><p>前两种模型，消费者是对同一队列的消息进行消费，订阅模式解决的问题是将同一个消息如何交给不同的消费者进行消费。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083010.png" alt="Fanout模型示意图"></p><p>Fanout中存在一个问题就是，因为生产者将消息交给路由器进行处理，路由器不能进行消息的存储工作，消息会丢失掉。如果先启动消费者，消费者创建的消息队列需要绑定路由器，则没有路由器时会产生异常。</p><p>Fanout模式下的生产者端的程序，需要创建路由，直接执行后，消息丢失，在Exchange中或产生一个新的路由信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutSend</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//fanout模式，会向路由器发送</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHAGE_NAME <span class="token operator">=</span> <span class="token string">"fanout_change"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明exchange，指定类型fanout  指定路由类型</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHAGE_NAME<span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello everyone"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布消息到Exchange</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHAGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[生产者] Sent "</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者端程序，多个消费者程序类似，只是对消息的处理不同：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutRecv</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"fanout_exchange_queue1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"fanout_change"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到连接</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定到交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义队列的消费者</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[消费者]收到消息："</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总结：多个消费者收到相同的消息，相当于一个电视订阅的过程，客户端对自己订阅的电视节目能够进行观看。</p><h5 id="3-4-订阅模型—Direct"><a href="#3-4-订阅模型—Direct" class="headerlink" title="3.4 订阅模型—Direct"></a>3.4 订阅模型—Direct</h5><p>消息定向发送，Exchange会对消息进行处理，将消息进行一个匹配的过程，对消息进行不同的队列中去分发。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083011.png" alt="Direct模型示意图"></p><p>Direct生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectSend</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义路由的名称呢过</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange_test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取通道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建路由，并确定路由的类型</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"查找商品的消息"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在绑定数据时指定其向哪一个通道发送消息，key值作为选择，得到相对应的通道</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"select"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[商品服务]：Sent"</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Dire模型的消费者端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectRecv1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME<span class="token operator">=</span><span class="token string">"direct_queue1"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通道二绑定一个名字</span><span class="token comment" spellcheck="true">//public static final String QUEUE_NAME="direct_queue1";</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME<span class="token operator">=</span><span class="token string">"direct_exchange_test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"insert");</span><span class="token comment" spellcheck="true">// channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"select");</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                String message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[DirectRecv1] Recv "</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-5-订阅模型—Topic"><a href="#3-5-订阅模型—Topic" class="headerlink" title="3.5 订阅模型—Topic"></a>3.5 订阅模型—Topic</h5><p>通配符匹配</p><blockquote><p>‘#’匹配0或多个词(含0个)</p><p>‘*’匹配不多不少恰好1个词(不含0个)</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083012.png" alt="Topic模型的示意图"></p><blockquote><p>例如三个绑定 1.*.orange.*、2.*.*.rabbit、3.lazy.#</p><p>发送如下字符：</p><p>quick.orange.rabbit  进入的是Q1和Q2</p><p>lazy.orange.elephant 进入的是Q1和Q2</p><p>quick.orange.fox  进入的是Q1</p><p>lazy.pink.rabbit 进入的是Q2</p><p>quick.orange.male.rabbit  都得不到，不满足消息结构</p><p>orange  不能进入消息队列</p></blockquote><p>了解RPC消息模型：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mq20083013.png" alt="RPC模型示意图"></p><h4 id="4-Spring-AMQP"><a href="#4-Spring-AMQP" class="headerlink" title="4.Spring AMQP"></a>4.Spring AMQP</h4><p>SpringBoot与RabbitMQ进行整合</p><h5 id="4-1-服务器的相关配置"><a href="#4-1-服务器的相关配置" class="headerlink" title="4.1 服务器的相关配置"></a>4.1 服务器的相关配置</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.199.159    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin    <span class="token key atrule">password</span><span class="token punctuation">:</span> root123    virtual<span class="token punctuation">-</span>host<span class="token punctuation">:</span>/shoping    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span></code></pre><h5 id="4-2-需要引入的依赖"><a href="#4-2-需要引入的依赖" class="headerlink" title="4.2 需要引入的依赖"></a>4.2 需要引入的依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-消费者监听"><a href="#4-3-消费者监听" class="headerlink" title="4.3 消费者监听"></a>4.3 消费者监听</h5><p>创建一个消费者，也就是一个监听器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Listener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用注解声明队列、是否持久化、绑定路由，选择模式(一般为TOPIC模式)、设置匹配格式</span>        <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.test.queue"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>                        value <span class="token operator">=</span> <span class="token string">"spring.test.exchange"</span><span class="token punctuation">,</span>                        ignoreDeclarationExceptions <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span>                        type <span class="token operator">=</span> ExchangeTypes<span class="token punctuation">.</span>TOPIC                <span class="token punctuation">)</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"#.#"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//处理消息的业务逻辑程序</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息是 "</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>@Component注解是spring中的，意思是将该类交给spring管理</p><p>@RabbitListener注解是整合包中的注解，用来描述中间件的部分信息</p><p>@QueueBinding队列绑定注解</p><p>@Queue队列的相关参数注解</p><p>@Exchange 交换机/路由的相关注解</p></blockquote><h5 id="4-4-相关注解的源码"><a href="#4-4-相关注解的源码" class="headerlink" title="4.4 相关注解的源码"></a>4.4 相关注解的源码</h5><p>RabbitListener注解的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RabbitListener</span> <span class="token punctuation">{</span>    String <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>      String <span class="token function">containerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">queues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Queue<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">queuesToDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">exclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    String <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    QueueBinding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">returnExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">autoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">ackMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">replyPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>QueueBinding的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">QueueBinding</span> <span class="token punctuation">{</span>    Queue <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Exchange <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String <span class="token function">ignoreDeclarationExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    Argument<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String <span class="token function">declare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">admins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Queue的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">durable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">exclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">autoDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">ignoreDeclarationExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    Argument<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String <span class="token function">declare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">admins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Exchange源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Exchange</span> <span class="token punctuation">{</span>    String TRUE <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    String FALSE <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"direct"</span><span class="token punctuation">;</span>    String <span class="token function">durable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    String <span class="token function">autoDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    String <span class="token function">internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    String <span class="token function">ignoreDeclarationExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    String <span class="token function">delayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    Argument<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String <span class="token function">declare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">admins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RabbitmqApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//依赖注入，从spring中获取amqp模板</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端发送的消息</span>        String message <span class="token operator">=</span> <span class="token string">"hello,spring boot amqp"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模板发送匹配的交换机，以及匹配的形式，以及发送的消息</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"spring.test.exchange"</span><span class="token punctuation">,</span><span class="token string">"a.b"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger学习</title>
      <link href="/2020/08/24/swagger-xue-xi/"/>
      <url>/2020/08/24/swagger-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><p>最近分析一个前后端分离的项目，发现前后端项目中使用到Swagger，对该技术进行学习。</p><p>开源项目地址：</p><p><a href="https://gitee.com/elunez/eladmin" target="_blank" rel="noopener">后端工程传送门</a>、<a href="https://gitee.com/elunez/eladmin-web" target="_blank" rel="noopener">前端工程传送门</a></p><p>前后端分离：后端分层(服务层、数据层、控制层)、前端也进行分层(前端控制层、视图层)</p><h4 id="前后端之间的问题以及解决"><a href="#前后端之间的问题以及解决" class="headerlink" title="前后端之间的问题以及解决"></a>前后端之间的问题以及解决</h4><p>前后端交互的问题在于前端的需求会不断变化，进而后端需要更改数据库、修改后端源程序，因此前后端人员无法做到”即使协商、今早解决”。</p><p>对于以上的问题解决方案：</p><blockquote><p>1.指定计划提纲(schema)，实时更新最新的api，降低继承的风险</p><p>2.指定计划文档</p><p>3.前后端分离</p></blockquote><h4 id="Swagger简介以及优势"><a href="#Swagger简介以及优势" class="headerlink" title="Swagger简介以及优势"></a>Swagger简介以及优势</h4><p>Swagger接口文档生成工具，通过使用Swagger以及衍生工具可以做到生成各种接口文档，支持多种语言(java、php等)，RestFul Api文档在线自动生成工具。</p><p>官方地址：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><p>java项目中使用Swagger需要有springbox、swagger2、ui</p><h4 id="springBoot继承swagger"><a href="#springBoot继承swagger" class="headerlink" title="springBoot继承swagger"></a>springBoot继承swagger</h4><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p>创建一个springBoot的项目，选中web模块</p><h5 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2.导入依赖"></a>2.导入依赖</h5><p>导入spring继承的swagger信息。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--在随后的版本中相关的注解进行了更改，请注意测试时的版本环境问题--></span></code></pre><h5 id="3-启动运行访问Swagger页面"><a href="#3-启动运行访问Swagger页面" class="headerlink" title="3.启动运行访问Swagger页面"></a>3.启动运行访问Swagger页面</h5><p>添加配置类，标注配置信息</p><blockquote><p>@Configuration  标注该类为一个注解类</p><p>@EnableSwagger2  标注该类为Swagger配置类，该注解用于标识其支持springFox</p><p>Docket(DocumentationType.SWAGGER_2)用于标识swagger版本</p><p>select() 创建一个构建器，用于标注控制器的文档和方法对应</p><p>apis() 定义要包含的类</p><p>paths()允许根据路径映射定义控制器的方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p></blockquote><p>页面信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/swagger20082401.png" alt="image-20200824175535033"></p><h5 id="4-描述信息的配置"><a href="#4-描述信息的配置" class="headerlink" title="4.描述信息的配置"></a>4.描述信息的配置</h5><p>在Swagger的配置类中将Docket这个类加入spring的同期中，swagger启动会去获取该类最后将配置信息显示在界面上。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">getApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//在swagger页面创建自己的信息面板</span>        <span class="token comment" spellcheck="true">//标题信息、描述信息、版本信息、团队地址</span>        <span class="token comment" spellcheck="true">//contact、开源许可、许可地址、集合类</span>        <span class="token comment" spellcheck="true">//String title, String description, String version, String termsOfServiceUrl,</span>        <span class="token comment" spellcheck="true">// Contact contact, String license, String licenseUrl, Collection&lt;VendorExtension> vendorExtensions</span>        <span class="token comment" spellcheck="true">//Contact 的参数有姓名、地址、邮箱</span>     <span class="token comment" spellcheck="true">//配置Swagger信息=apiinfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">getApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact  contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"冯雁星"</span><span class="token punctuation">,</span> <span class="token string">"itxiangzai.xyz"</span><span class="token punctuation">,</span> <span class="token string">"itxingzai@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"Swagger文档标题"</span><span class="token punctuation">,</span><span class="token string">"简单的描述"</span><span class="token punctuation">,</span><span class="token string">"1.0"</span><span class="token punctuation">,</span>                 <span class="token string">"itxingzai.xyz"</span><span class="token punctuation">,</span>contact<span class="token punctuation">,</span><span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="5-swagger扫描的接口"><a href="#5-swagger扫描的接口" class="headerlink" title="5.swagger扫描的接口"></a>5.swagger扫描的接口</h5><p>Docket.select()；对于接口信息的配置，是否扫描以及过滤扫描的信息。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">getApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//指定swagger扫描的包   RequestHandlerSelectors.basePackage("com.itxing.swagger.controller")</span>                 <span class="token comment" spellcheck="true">//扫描全部    RequestHandlerSelectors.any()</span>                 <span class="token comment" spellcheck="true">//不扫描   RequestHandlerSelectors.none()</span>                 <span class="token comment" spellcheck="true">//扫描类上的注解  questHandlerSelectors.withClassAnnotation(RestController.class)</span>                 <span class="token comment" spellcheck="true">//扫描方法上的注解 RequestHandlerSelectors.withMethodAnnotation(GetMapping.class)</span>                 <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.itxing.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//过滤路径</span>                 <span class="token comment" spellcheck="true">//.paths(PathSelectors.ant("/itxing/swagger/**"))</span>                 <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//工厂模式</span>                 <span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><h5 id="6-实际工作工的问题"><a href="#6-实际工作工的问题" class="headerlink" title="6.实际工作工的问题"></a>6.实际工作工的问题</h5><p>设置swagger在开发环境中使用，在生产环境中关闭</p><p>判断是否为生产环境，使用Environment 类能够获取到当前的系统配置的环境是否处于开发环境还是处于上线环境</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取hi安静的信息</span>        Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首先获取项目的环境信息</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">getApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//enable(false)表示swagger不能在浏览器中访问</span>                 <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//配置Swagger信息=apiinfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">getApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact  contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"冯雁星"</span><span class="token punctuation">,</span> <span class="token string">"itxiangzai.xyz"</span><span class="token punctuation">,</span> <span class="token string">"itxingzai@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"Swagger文档标题"</span><span class="token punctuation">,</span><span class="token string">"简单的描述"</span><span class="token punctuation">,</span><span class="token string">"1.0"</span><span class="token punctuation">,</span>                 <span class="token string">"itxingzai.xyz"</span><span class="token punctuation">,</span>contact<span class="token punctuation">,</span><span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="7-Swagger分组"><a href="#7-Swagger分组" class="headerlink" title="7.Swagger分组"></a>7.Swagger分组</h5><p>配置API文档的分组</p><p>一个Docket返回一个分组</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"xingzai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>测试中遇到的一个BUG</p><p>由于对RESTFul风格并不是特别的熟悉，因此调用过程中出现错误</p><blockquote><p>对于不是String类型的参数需要使用required 来表示，否则在启动时访问ui界面会出错@PathVariable(value = “age” ,required =true)</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//正确的调用 </span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询用户的方法"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{age}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">user</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span> <span class="token punctuation">,</span>required <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span> <span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>对于访问的路径：</p><p>传统的访问方式，将参数和路径区分开来，后端的注解使用的是</p><blockquote><p>@RequestParam(value = “age”,defaultValue = “30”)</p></blockquote><blockquote><p><a href="http://localhost:8081/controller/user?age=25&amp;user=xingzai" target="_blank" rel="noopener">http://localhost:8081/controller/user?age=25&amp;user=xingzai</a></p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询用户的方法"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">user</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span> <span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Restful风格，传递的参数在路径之中包含</p><blockquote><p><a href="http://localhost:8081/controller/user/25/xingzai" target="_blank" rel="noopener">http://localhost:8081/controller/user/25/xingzai</a></p></blockquote><p>不同之处在于：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/swagger20082501.png" alt="image-20200825103017553"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote><p>1.通过swagger可以给难理解的接口、属性、方法、参数添加注释信息</p><p>2.接口文档实时更新</p><p>3.可以在线测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规划研究</title>
      <link href="/2020/08/19/gui-hua-xiang-guan-2/"/>
      <url>/2020/08/19/gui-hua-xiang-guan-2/</url>
      
        <content type="html"><![CDATA[<h4 id="经典的规划"><a href="#经典的规划" class="headerlink" title="经典的规划"></a>经典的规划</h4><p>#####　特征</p><blockquote><p>完全可观测:Fully Observable</p><p>唯一已知初始状态:a unique known initial state</p><p>静态环境:static environments</p><p>确定性动作:deterministic actions</p><p>每次仅一个动作:can be taken only one at a time</p><p>单一智能体 a single agent</p></blockquote><h5 id="规划问题的难度取决于以下问题"><a href="#规划问题的难度取决于以下问题" class="headerlink" title="规划问题的难度取决于以下问题"></a>规划问题的难度取决于以下问题</h5><table><thead><tr><th>Properties 特性</th><th>Questions 问题</th></tr></thead><tbody><tr><td>actions</td><td>确定还是非确定性问题？是否持续一段时间，可并发执行还是串行</td></tr><tr><td>state variables状态变量</td><td>离散还是连续</td></tr><tr><td>初始状态</td><td>有限还是任意多</td></tr><tr><td>目标</td><td>要达到指定的目标状态？/要最大化回报函数</td></tr><tr><td>智能体</td><td>仅一个angent还是多个/合作还是单人做</td></tr></tbody></table><h5 id="问题求解与规划Agent的比较"><a href="#问题求解与规划Agent的比较" class="headerlink" title="问题求解与规划Agent的比较"></a>问题求解与规划Agent的比较</h5><table><thead><tr><th></th><th>问题求解Problem-solving Agent</th><th>规划智能体Planning Agent</th></tr></thead><tbody><tr><td>state(初始/目标)</td><td>Atomic representation原子表示</td><td>Factored representation 因子表示 (变量的集合)</td></tr><tr><td>Action</td><td>Instantiated actions</td><td>Actions schemas 动作模式，使用PDDL规划定义语言</td></tr><tr><td>Heuristic</td><td>Domain-specific领域特定启发发</td><td>Domain-independent领域无关启发法</td></tr></tbody></table><h4 id="PDDL语言"><a href="#PDDL语言" class="headerlink" title="PDDL语言"></a>PDDL语言</h4><p>PDDL定义规划语言中的三要素</p><p>1.状态：</p><p>表示为变数的合取，是一种conjunction of fluents的形式(从一个变化关系到另一种变化关系)</p><p>2.动作：</p><p>用一组动作模式描述，隐式定义函数，是一种action schema</p><p>3.目标</p><p>使用文件的合取，一个基本的命题，conjunction of literals</p><p>实例  航空运货</p><blockquote><p>1.问题  from SFO to JFK从旧金山到纽约机场</p><p>2.动作</p><p>Load、unload、fly</p><p>3.谓词Predicates</p><p>In(c,p)获取在飞机内</p><p>At(x,a)获取在机场内</p></blockquote><h5 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/pddl20081901.png" alt="航空货物的例子"></p><p>Solution解答</p><blockquote><p>能够达到目标的动作序列</p><p>[Load(C1,P1,SFO),Fly(P1,SFO,JFK),Unload(C1,P1,JFK),Load(C2,P2,JFK),Fly(P2,JFK,SFO),Unload(C2,P2,SFO)]</p></blockquote><p>错误的动作</p><blockquote><p>不能从起飞的地方飞到起飞的地方</p><p>Fly(P1,JFK,JFK)</p></blockquote><p>矛盾的作用</p><blockquote><p>一个获取在一个</p><p>At(P1,JFK)^~At(P1,JFK)</p></blockquote><h5 id="经典规划搜索"><a href="#经典规划搜索" class="headerlink" title="经典规划搜索"></a>经典规划搜索</h5><p>1.前向计算搜索</p><p>2.反向状态空间搜索</p><p>3.启发式搜索</p><p>将规划问题视作一个图，其中节点表示状态、边为动作，寻找一条连接初始状态到达目标状态的路径</p><p>问题的简化方式:增加边、状态抽象(多个节点组成在一起)</p><h5 id="图规划算法"><a href="#图规划算法" class="headerlink" title="图规划算法"></a>图规划算法</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20281902.png" alt="图规划算法描述"></p><h4 id="规划问题转化"><a href="#规划问题转化" class="headerlink" title="规划问题转化"></a>规划问题转化</h4><h5 id="1-布尔可满足规划"><a href="#1-布尔可满足规划" class="headerlink" title="1.布尔可满足规划"></a>1.布尔可满足规划</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081903.png" alt="布尔可满足规划"></p><h5 id="2-一阶逻辑推理的规划"><a href="#2-一阶逻辑推理的规划" class="headerlink" title="2.一阶逻辑推理的规划"></a>2.一阶逻辑推理的规划</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081904.png" alt="一阶逻辑推理规划"></p><p>一阶逻辑中的情景演算，用来设计动态域的表示和推理。</p><h5 id="3-将规划化作约束满足的规划"><a href="#3-将规划化作约束满足的规划" class="headerlink" title="3.将规划化作约束满足的规划"></a>3.将规划化作约束满足的规划</h5><p>约束可满足和布尔可满足有一定的共性，其对调度问题很有效，将有界的问题进行编码为CSP，还可以将规划图编码为CSP</p><h5 id="4-将规划问题化作精进的规划"><a href="#4-将规划问题化作精进的规划" class="headerlink" title="4.将规划问题化作精进的规划"></a>4.将规划问题化作精进的规划</h5><p>全序规划是由严格的动作序列组成，该问题忽略了许多子问题是独立的事实。</p><p>经典规划的局限性</p><p>经典规划可以表示做什么？按什么顺序做?等问题，但是对于动作持续多长时间、什么时候发生？这样的问题不能描述。</p><h4 id="分层规划"><a href="#分层规划" class="headerlink" title="分层规划"></a>分层规划</h4><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081905.png" alt="经典规划与分层规划对比"></p><h4 id="多智能体规划"><a href="#多智能体规划" class="headerlink" title="多智能体规划"></a>多智能体规划</h4><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081906.png" alt="多智能体规划"></p><h5 id="多个agent与单个agent之间的比较问题"><a href="#多个agent与单个agent之间的比较问题" class="headerlink" title="多个agent与单个agent之间的比较问题"></a>多个agent与单个agent之间的比较问题</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081907.png" alt="单个与多个agent的比较"></p><h5 id="多个agent之间设计的特性"><a href="#多个agent之间设计的特性" class="headerlink" title="多个agent之间设计的特性"></a>多个agent之间设计的特性</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081908.png" alt="多个agent特性"></p><h4 id="机器人中的规划问题"><a href="#机器人中的规划问题" class="headerlink" title="机器人中的规划问题"></a>机器人中的规划问题</h4><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081909.png" alt="机器人规划"></p><h5 id="多个agent规划之间涉及的组件"><a href="#多个agent规划之间涉及的组件" class="headerlink" title="多个agent规划之间涉及的组件"></a>多个agent规划之间涉及的组件</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081910.png" alt="规划涉及组件"></p><h5 id="协商规划问题"><a href="#协商规划问题" class="headerlink" title="协商规划问题"></a>协商规划问题</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081911.png" alt="多智能体规划"></p><h4 id="决策理论规划"><a href="#决策理论规划" class="headerlink" title="决策理论规划"></a>决策理论规划</h4><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081912.png" alt="决策性规划"></p><h5 id="马尔科夫决策过程"><a href="#马尔科夫决策过程" class="headerlink" title="马尔科夫决策过程"></a>马尔科夫决策过程</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081913.png" alt="马尔科夫过程"></p><h5 id="经典规划与MDP的比较"><a href="#经典规划与MDP的比较" class="headerlink" title="经典规划与MDP的比较"></a>经典规划与MDP的比较</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081914.png" alt="马尔科夫的核心问题"></p><h5 id="MDP问题的优化与效用"><a href="#MDP问题的优化与效用" class="headerlink" title="MDP问题的优化与效用"></a>MDP问题的优化与效用</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081915.png" alt="效用和优化策略"></p><h6 id="值迭代"><a href="#值迭代" class="headerlink" title="值迭代"></a>值迭代</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081916.png" alt="值迭代"></p><h6 id="策略迭代"><a href="#策略迭代" class="headerlink" title="策略迭代"></a>策略迭代</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/plan20081917.png" alt="策略迭代"></p>]]></content>
      
      
      <categories>
          
          <category> 课题相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离</title>
      <link href="/2020/08/12/qian-hou-duan-fen-chi/"/>
      <url>/2020/08/12/qian-hou-duan-fen-chi/</url>
      
        <content type="html"><![CDATA[<p>前后端分离开发流程</p><h4 id="试验环境："><a href="#试验环境：" class="headerlink" title="试验环境："></a>试验环境：</h4><blockquote><p>windows7+16G内存+Idea2018+mysql5.6</p><p>后端使用springBoot</p><p>前端使用的是vue</p><p>jdk1.8</p><p>vue4.5.2</p><p>npm 6.13.4</p></blockquote><h4 id="相关准备"><a href="#相关准备" class="headerlink" title="相关准备"></a>相关准备</h4><p>对于vue的简单熟悉<a href="https://itxingzai.xyz/2020/06/03/qian-duan-vue-de-xue-xi/" target="_blank" rel="noopener">VUE学习笔记</a></p><p>数据库建表:<a href="https://itxingzai.xyz/2020/05/20/mysql-yu-ju-xue-xi/" target="_blank" rel="noopener">数据库的学习笔记</a></p><h4 id="创建前端项目错误解决"><a href="#创建前端项目错误解决" class="headerlink" title="创建前端项目错误解决"></a>创建前端项目错误解决</h4><h5 id="错误1：vue-ui不起作用"><a href="#错误1：vue-ui不起作用" class="headerlink" title="错误1：vue ui不起作用"></a>错误1：vue ui不起作用</h5><p>控制台输入命令vue ui不起作用</p><blockquote><p>vue ui  创建vue的项目</p><p>vue -h 查看vue命令的参数</p><p>vue -V 查看vue的版本</p></blockquote><p>vue ui命令3.0以上才有作用因此需要使用更新命令的操作更新版本。</p><blockquote><p>npm i -g @vue/cli  有可能失败可以使用国内镜像</p><p>cnpm i -g @vue/cli</p></blockquote><p>vue内嵌一个服务器：</p><p>使用命令：  npm run serve 启动应用程序</p><h5 id="错误2：v-for"><a href="#错误2：v-for" class="headerlink" title="错误2：v-for"></a>错误2：v-for</h5><p>使用vue的v-for时可能会出错：</p><blockquote><p>Elements in iteration expect to have ‘v-bind:key’ directives</p></blockquote><p>这个是由于仅使用v-for是不够的因此需要加入:key = “item.id”关键字</p><h5 id="前端的错误"><a href="#前端的错误" class="headerlink" title="前端的错误"></a>前端的错误</h5><blockquote><p>Book.vue?b0f7:49 Uncaught (in promise) TypeError: Cannot set property ‘books’ of undefined</p></blockquote><p>表示当前指向的某个对象的this关键字没有books属性<strong>，一般是因为回调函数中访问vue对象产生的错误，回调函数中的this表示的是回调函数的对象不是vue对象</strong>，因此不能访问vue对象的相关数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//回调函数外可以定义全局变量，再将当前的this对象保留下来</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8181/book/findById/'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">{</span>            _this<span class="token punctuation">.</span>ruleForm <span class="token operator">=</span> resp<span class="token punctuation">.</span>data        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>前后端分类项目的说明：</p><blockquote><p>实现一个图书管理的增删改查(从别人的程序中学习的)，自己练习了一个人员管理的页面设计与数据交互。</p><p>前端给后端发送的数据是一个json数据格式，后端解析后实现数据库操作，后端将数据封装成json交给前端的页面展示。</p></blockquote><h4 id="vue-集成Element-ui"><a href="#vue-集成Element-ui" class="headerlink" title="vue 集成Element ui"></a>vue 集成Element ui</h4><p>安装方式1：重新创建项目，安装插件</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20081201.png" alt="VUE继承Element UI"></p><p>安装方式2：如果浏览器中安装失败使用命令进行安装</p><blockquote><p>cnpm install –save element-ui</p><p>或者</p><p>npm i element-ui -S</p></blockquote><h5 id="前端数据简单测试"><a href="#前端数据简单测试" class="headerlink" title="前端数据简单测试"></a>前端数据简单测试</h5><p>前端自定义数据进行测试</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <table>            <tr>                <td>编号</td>                <td>图书名称</td>                <td>作者</td>            </tr>              <tr v-for="item in books" :key="item.id">                  <td>{{item.id}}</td>                  <td>{{item.name}}</td>                  <td>{{item.author}}</td>            </tr>        </table>    {{msg}}    </div></template><script>export default {    name: "Book",    data(){        return{            msg: 'Hello Vue',            books:[                {                    id:1,                    name:'java学习',                    author:'it星'                }, {                    id:2,                    name:'葵花宝典',                    author:'东方'                }, {                    id:3,                    name:'笑傲江湖',                    author:'金庸'                }            ]        }    }}</script><style scoped></style></code></pre><h5 id="跨域问题的解决"><a href="#跨域问题的解决" class="headerlink" title="跨域问题的解决"></a>跨域问题的解决</h5><p>后端解决方案：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//springBoot中配置类，对前端的请求进行处理</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="前端布局"><a href="#前端布局" class="headerlink" title="前端布局"></a>前端布局</h5><p>elementui的布局实例：</p><blockquote><p>el-container： 页面的布局容器页面布局的整体框架</p><p>el-aside:构建左侧的菜单</p><p>el-menu: 左侧菜单的内容</p><p>​    :default-openeds属性，表示菜单属性默认展开</p><p>​    :default-active属性，表示菜单属性默认选中某个节点</p><p>el-submenu 可展开的菜单</p><p>​    index 菜单的下标，文本类型，不能是数值类型</p><p>template 对应el-submenu的菜单名</p><p>i标签：设置菜单图标，通过class属性设置<a href="https://element.eleme.cn/#/zh-CN/component/icon" target="_blank" rel="noopener">官方网站的icon设置</a></p><p>el-menu-item：菜单的子节点，不可展开</p><p>​    属性index，子菜单下标</p></blockquote><p>通过vue的router构建前端的项目框架菜单</p><p>例如：</p><blockquote><p>导航栏1</p><p>​    子页面1</p><p>​    子页面2</p><p>导航栏2</p><p>​    子页面1</p><p>​    子页面2</p></blockquote><h5 id="菜单与route绑定"><a href="#菜单与route绑定" class="headerlink" title="菜单与route绑定"></a>菜单与route绑定</h5><p>1.给<el-menu>标签添加router属性</p><p>2.在页面中添加router-view标签，是一个容器，可以动态渲染router选择</p><p>3.<el-menu-item>标签的index值设置为router</p><h5 id="前后端交互组件axios"><a href="#前后端交互组件axios" class="headerlink" title="前后端交互组件axios"></a>前后端交互组件axios</h5><p>vue使用rust访问后端数据需要安装一个组件axios，使用命令安装axios</p><blockquote><p>vue add axios</p></blockquote><p>安装完后项目中显示plugins/axios.js，表示安装完成。</p><p>前后端数据交互组件安装完成后，前端在created方法中调用组件，传递url后端的rusrful风格，接受的数据在前端的页面显示。</p><h5 id="Element-UI表单"><a href="#Element-UI表单" class="headerlink" title="Element UI表单"></a>Element UI表单</h5><p>表单校验，表单中定义rules对象，设置对象的规则</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--使用prop表示指定与之相应的数据规则--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图书名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--js中定义数据规则，在表单中设置:rules属性，以下是两个文本框的规则实例required：表示是否为必选项message：提示信息trigger：出发事件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请输入活动名称'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在 3 到 5 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          author<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请输入活动名称'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在 3 到 5 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="Element-UI表格组件"><a href="#Element-UI表格组件" class="headerlink" title="Element UI表格组件"></a>Element UI表格组件</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--:model="ruleForm" 绑定数据格式 :rules="rules" 校验规则--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60%</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图书名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resetForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;el-button @click="test()">测试按钮&lt;/el-button> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h5 id="前端的数据绑定"><a href="#前端的数据绑定" class="headerlink" title="前端的数据绑定"></a>前端的数据绑定</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//前端数据校验</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        ruleForm<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          author<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'图书名不能为空'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在 1 到 10 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          author<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'作者名不能为空'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>min<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在2 到 5 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前后端数据信息交互</span>      <span class="token function">submitForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>              axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8181/book/save'</span><span class="token punctuation">,</span>_this<span class="token punctuation">.</span>ruleForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token operator">==</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         _this<span class="token punctuation">.</span><span class="token function">$alert</span><span class="token punctuation">(</span><span class="token string">'《'</span><span class="token operator">+</span>_this<span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'》成功添加'</span><span class="token punctuation">,</span> <span class="token string">'添加信息'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                         confirmButtonText<span class="token punctuation">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>                          callback<span class="token punctuation">:</span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            _this<span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                                type<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                           message<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`action: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> action <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      _this<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/BookManage'</span><span class="token punctuation">)</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error submit!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">resetForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="后端项目"><a href="#后端项目" class="headerlink" title="后端项目"></a>后端项目</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>配置数据库信息，配置JPA访问数据，配置端口信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/library<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token comment" spellcheck="true">##配置jpa的数据库格式化、显示数据库语句</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8181</span></code></pre><p>配置项目的依赖，spring-data、springboot、数据库连接驱动、单元测试、lombok等相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h5 id="数据实体层-Entity"><a href="#数据实体层-Entity" class="headerlink" title="数据实体层(Entity)"></a>数据实体层(Entity)</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用主键注解Id,注解GeneratedValue表示主键生成策略</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> author<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="数据仓库层-dao"><a href="#数据仓库层-dao" class="headerlink" title="数据仓库层(dao)"></a>数据仓库层(dao)</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//只需要定义接口实现JpaRepository类即可使用其中的增删改查方法，传入的参数为实体类对象以及注解类型</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Book<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="控制层-controller"><a href="#控制层-controller" class="headerlink" title="控制层(controller)"></a>控制层(controller)</h5><p>控制层获取前端的请求，使用RustFul风格的可以后台定义分页查询、全部数据查询、根据主键查询、新增数据、删除数据、修改数据</p><blockquote><p>查询请求 @GetMapping</p><p>新增请求 @PostMapping</p><p>修改请求 @PutMapping</p><p>删除请求 @DeleteMapping</p><p>从路径中获取相关的信息 @PathVariable</p><p>将json对象转换成java实体类对象  @RequestBody</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookRepository bookRepository<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插叙Book数据库中的数据，分页显示，传入的参数当前页和每页显示的条数</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> Integer size<span class="token punctuation">)</span><span class="token punctuation">{</span>        PageRequest request <span class="token operator">=</span> PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询所有的数据，一般不使用，由于查询出的数据太多</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Book <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//保存数据，返回成功或失败信息</span>    <span class="token comment" spellcheck="true">//RequestBody将json对象转换成java的对象</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span><span class="token punctuation">{</span>        Book result <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span><span class="token punctuation">{</span>        Book result <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        bookRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="自定义启动图案"><a href="#自定义启动图案" class="headerlink" title="自定义启动图案"></a>自定义启动图案</h5><p>springBoot可以自定义启动的图案，从源码中读取信息可以创建一个banner.txt的文件设置自己的图案：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BANNER_LOCATION_PROPERTY_VALUE <span class="token operator">=</span> <span class="token string">"banner.txt"</span><span class="token punctuation">;</span></code></pre><p>开发时使用：</p><pre class=" language-txt"><code class="language-txt">//                              _oo0oo_//                             o8888888o//                             88" . "88//                             (| -_- |)//                             0\  =  /0//                           ___/'---'\___//                        .' \\\|     |/// './/                       / \\\|||  :  |||/// \//                      / _ ||||| -:- ||||| - \//                      | |  \\\\  -  ////  | |//                      | \_|  ''\---/''  |_/ |//                      \  .-\__  '-'  __/-.  ///                    ___'. .'  /--.--\  '. .'___//                 ."" '<  '.___\_<|>_/___.' >'  "".//                | | : '-  \'.;'\ _ /';.'/ - ' : | |//                \  \ '_.   \_ __\ /__ _/   .-' /  ///            ====='-.____'.___ \_____/___.-'____.-'=====//                              '=---='////          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^////                  佛祖保佑                 永无BUG</code></pre><h5 id="使用postman工具测试"><a href="#使用postman工具测试" class="headerlink" title="使用postman工具测试"></a>使用postman工具测试</h5><p>可以参照别人的博客<a href="https://www.jianshu.com/p/4b82fa8b22b4" target="_blank" rel="noopener">postman的使用</a></p><blockquote><p>1.在Chrome输入地址：chrome://extensions/<br>2.将压缩包直接拖拽至Chrome中<br>3.运行在Chrome输入地址：chrome://apps</p><p>可以从我的百度网盘下载并按照以上步骤进行使用</p><p>链接：<a href="https://pan.baidu.com/s/1ZKZ-KCYDDgK-t9u48WS8Tw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZKZ-KCYDDgK-t9u48WS8Tw</a><br>提取码：6f6l</p></blockquote><p>测试查询的结果如下</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20081401.png" alt="post测试查询"></p><p>后端项目的结构</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20081402.png" alt="后端项目的目录结构"></p><p>前端项目的结构</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/20081403.png" alt="前端项目的目录结构"></p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk自带的分析工具</title>
      <link href="/2020/08/08/jdk-fen-xi-gong-ju/"/>
      <url>/2020/08/08/jdk-fen-xi-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>学习环境，jdk1.8，windows7，内存16G。</p><h4 id="1-工具学习"><a href="#1-工具学习" class="headerlink" title="1.工具学习"></a>1.工具学习</h4><p>安装jdk时，在安装目录下的bin文件夹中有很多的相关的工具(**.exe)，对于该工具的源码在lib文件中的tools.jar中的sun/tools中。在学习工具前，可以提前学习一下jvm相关的知识点。<a href="https://itxingzai.xyz/2020/04/10/jvm-xu-ni-ji-xue-xi/" target="_blank" rel="noopener">JVM笔记</a></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080801.png" alt="jdk自带工具类源码位置"></p><h4 id="2-常用的jdk命令"><a href="#2-常用的jdk命令" class="headerlink" title="2.常用的jdk命令"></a>2.常用的jdk命令</h4><blockquote><p>jps(java Process Status Tool):显示指定系统内所有的虚拟机进程</p><p>jstat(java Statistics Monitoring Tool)：用于收集虚拟机各方面的运行数据</p><p>jinfo(Configuration info for java)：显示虚拟机配置信息</p><p>jmap(Memory Map for java)：生成虚拟机的内存转储快照</p><p>jhat(JVM Heap Dump Browser)：用于分析heapdump文件，建立一个HTTP/Html服务器，使得在浏览器中分析</p><p>jstack(Stack Trace for java):显示虚拟机的线程快照</p></blockquote><h5 id="2-1-jps命令"><a href="#2-1-jps命令" class="headerlink" title="2.1 jps命令"></a>2.1 jps命令</h5><p>作用是：列出正在运行的虚拟机进程，并显示虚拟机执行主类(Main类， main()函数所在的类)名称以及进程的本地虚拟机唯一id(LVMID)。jdk使用频率最高的jdk命令行工具，因为其他的jdk工具大多数需要输入唯一ID确定监控的虚拟机进程。如果启动多个虚拟机进程，无法根据进程名定位时，需要使用jps确定。</p><p>命令格式：</p><p>jps [options] [hostid]</p><p>参数：</p><p>-q：显示进程id</p><p>-m：显示进程id，主类名称以及传入main的参数</p><p>-l：显示进程id，以及显示全类名</p><p>-v：显示进程ID，主类名称以及传入JVM的参数</p><p>-V：显示进程id，主类名称</p><p>[-mlvV]混合使用</p><p>常用的jdk工具(可视化)</p><h5 id="2-2-jstat命令"><a href="#2-2-jstat命令" class="headerlink" title="2.2 jstat命令"></a>2.2 jstat命令</h5><p>作用：<strong>监视虚拟机各种运行状态信息</strong>，可以显示本地或者远程虚拟机进程中的<strong>类装载、内存、垃圾收集、JIT编译</strong>等运行数据</p><p>命令格式：</p><blockquote><p> jstat [options cmid [interval] [count]] <pid></p></blockquote><p>参数的含义</p><p>1.options 表示用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况，具体的选项如下：</p><blockquote><p>-class:显示有关类加载器行为的统计信息</p><p>​    结果的含义：Loaded表示已加载的类数量  Bytes:加载的kb数</p><p>​    Unloaded：卸载的类数量 Bytes：卸载的KB数  </p><p>​    Time：执行类加载和卸载花费的时间</p><p>-compiler:显示有关java HotSpot VM即时编译行为的统计信息</p><p>​    Compiled：执行的编译任务数   failed：编译任务失败数</p><p>​    Invalid：无效的编译任务数    Time：执行编译任务所花费的时间</p><p>​    FailedType：上次失败的编译的编译类型  </p><p>​    FailedMethod上次失败的编译的类名和方法</p><p>-gc:显示有关垃圾收集堆行为的统计信息</p><p>-gccapacity:显示有关各个垃圾回收代容量及其响应空间的统计信息</p><p>-gccause:显示有关垃圾收集统计信息，以及上一次和当前垃圾收集事件的原因</p><p>-gcnew:显示新生代行为的统计信息</p><p>-gcnewcapacity:显示有关新生代大小及其相应空间的统计信息</p><p>-gcold:显示有关老年代行为的统计信息和元空间统计信息</p><p>-gcoldcapacity:显示有关老年代大小的统计信息</p><p>-gcmetacapacity:显示元空间大小的统计信息</p><p>-gcutil:显示有关垃圾收集统计信息</p><p>-printcompilation:显示JAVA Hotspot VM编译方法统计信息</p></blockquote><p>2.vmid</p><p>如果是本地虚拟机进程，vmid和本地虚拟机唯一id是一致的</p><p>如果是远程虚拟机进程，vmid格式</p><blockquote><p>protocol:lvmid[@hostname[:port]/servername]</p></blockquote><p>3.interval</p><p>采样间隔，单位为秒s或者毫秒ms</p><p>单位是毫秒，必须传入正整数，设置后在指定的时间间隔产生输出。</p><p>4.count</p><p>要显示的样本数</p><h5 id="2-3-jstat命令演示"><a href="#2-3-jstat命令演示" class="headerlink" title="2.3 jstat命令演示"></a>2.3 jstat命令演示</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>JVM参数</p><p>-Xms20M -Xmx20M -Xmn10M -xx:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080901.png" alt="查看进程id以及查看垃圾收集信息"></p><p>分析：</p><blockquote><p> s0c和s1c指的是幸存区容量的大小</p><p>s0u和s1u值得是幸存区使用的大小</p><p>EC 伊甸园区容量大小</p><p>EU 伊甸园区使用的大小</p><p>OC老年大容量</p><p>OU老年代使用</p><p>MC 元空间容量</p><p>MU 元空间使用</p><p>CCSC 压缩类空间的容量</p><p>CCSU 压缩类空间的使用</p><p>YGC  youngGC次数</p><p>YGCT   youngGC时间</p><p>FGC  full gc 次数</p><p>FGCT  full gc时间</p><p>GCT  gc总时间</p></blockquote><blockquote><p>jstat -gcutil  端口号</p></blockquote><p>参数的值表示的是占比（使用/容量）</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080902.png" alt="jstat命令查看占比信息"></p><p>程序执行一次垃圾回收后：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080903.png" alt="程序执行一次垃圾收集"></p><p>再使用jstat查看数据区信息，垃圾回收信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080904.png" alt="jstat查看数据区信息"></p><h5 id="2-4-jinfo命令"><a href="#2-4-jinfo命令" class="headerlink" title="2.4 jinfo命令"></a>2.4 jinfo命令</h5><p>作用：实时的查看和调整虚拟机各项参数</p><p>命令格式:</p><blockquote><p>jinfo [options] <pid></p></blockquote><p>参数解释options：</p><blockquote><p>no option:输出全部的参数和系统的属性</p><p>-flag name ：输出对应名称的参数</p><p>-flag [+|-]name：开启/关闭对应名称的参数</p><p>-flag name = value:设定对应名称的参数</p><p>-flags：输出全部的参数</p><p>-sysprops：输出系统属性</p></blockquote><h5 id="2-5-jinfo命令演示："><a href="#2-5-jinfo命令演示：" class="headerlink" title="2.5 jinfo命令演示："></a>2.5 jinfo命令演示：</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行程序后测试 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>jinfo指令联系</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080905.png" alt="jinfo查看jvm和指定的参数信息"></p><p>设置对转储文件位置为D的根目录</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080906.png" alt="jinfo创建转储文件位置"></p><h5 id="2-6-jmap"><a href="#2-6-jmap" class="headerlink" title="2.6 jmap"></a>2.6 jmap</h5><p>作用：可以生成java的dump文件，也可以查看堆内存对象信息、查看ClassLoader的信息以及finalizer队列</p><p>命令格式:jmap [options] <pid></p><p>参数解释：</p><blockquote><p>no option:不添加参数，查看进程的内存映像信息，类似于linux中的pmap</p><p>heap：显示java堆详细信息</p><p>histo[:live]：显示堆中对象的统计信息</p><p>clstats：打印类加载器信息</p><p>finalizerinfo：显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象</p><p>dump:<dump-options>：生成堆转储快照</p></blockquote><h5 id="2-7-jmap命令演示"><a href="#2-7-jmap命令演示" class="headerlink" title="2.7 jmap命令演示"></a>2.7 jmap命令演示</h5><blockquote><p>jmap pid 查看进程的内存映像</p><p>jmap -heap pid 显示java堆详细信息</p><p>jmap -histo:live pid (或者jmap -histo pid)显示堆中对象的统计信息</p><p>jmap -clstats pid 打印类加载器信息</p><p>jamp -finalizerinfo pid 打印等待终结的对象信息</p><p>jmap -dump:live,format=b,file=D:\jmap.bin pid生成堆转储快照dump文件</p></blockquote><p>部分指令显示截图：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080907.png" alt="jmap指令查看信息"></p><p>类加载器信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080908.png" alt="显示类加载器信息"></p><p>生成堆转储文件</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080909.png" alt="生成转储文件"></p><h5 id="2-8-jhat"><a href="#2-8-jhat" class="headerlink" title="2.8 jhat"></a>2.8 jhat</h5><p>作用：分析jmap生成的堆转储快照二进制文件，内置一个微型的http/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中查看。</p><p>该工具分析是一个耗时且消耗硬件资源的过程，工具相对简陋，有更好的工具替换jhat，例如VisualVM，以及专业的dump分析Eclipse Memory Analyzer、IBM HeapAnalyzer等工具。</p><p>命令格式：jhat [options] 堆转储文件</p><p>参数解释[options]：</p><blockquote><p>[-stack <bool> ] : 开关对象分配调用栈跟踪，如果分配位置信息在堆转储中不可用，则必须将此标志设置为false，默认设置为true</p><p>[-refs<bool> ] :开关对象引用跟踪。默认为true，返回的指针是指向其他特定对象的对象，如反向链接或输入引用，会统计/计算堆中的所有对象</p><p>[-port <port> ] :设置jhat HTTP server 的端口号。默认7000</p><p>[-exclude  <file> ] :指定对象查询时需要排除的数据成员列表文件。</p><p>[-baseline <file> ] :指定一个基准堆转储。在两个heap dumps中有相同的object ID的对象会被标记为不是新的，其他对象被标记为新的。用于比较两个不同的堆转储文件。</p><p>[-debug<int> ] :设置debug级别。0表示不输出调试信息，值越大表示输出越详细</p><p>[-version] :启动后显示版本信息就退出</p></blockquote><p>jhat命令的使用：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080910.png" alt="使用jhat在浏览器中查看dump信息"></p><h5 id="2-9-jstack命令"><a href="#2-9-jstack命令" class="headerlink" title="2.9 jstack命令"></a>2.9 jstack命令</h5><p>作用：查找或导出java应用程序中线程堆栈信息</p><p>线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程死锁、死循环、长时间等待外部资源等。线程停顿时通过jstack来查看各个线程的调用堆栈，就可以知道响应的线程在后台执行什么事情，等待什么样的资源。java程序崩溃生成的core文件，jstack工具可以用来获取core文件的java stack和native stack的信息，从而可以轻松的知道java程序如何崩溃和在程序何处发生问题。</p><p>命令格式:</p><blockquote><p>jstack [options] pid</p></blockquote><p>options参数解释</p><blockquote><p>-F：当线程挂起时，使用stack -l pid请求不被响应时，强制输出现场呢过堆栈</p><p>-l：除了堆栈外，显示关于锁的附加信息</p><p>-m：可以同时输出java以及c/c++的堆栈信息</p></blockquote><h5 id="2-10-jstack演示："><a href="#2-10-jstack演示：" class="headerlink" title="2.10 jstack演示："></a>2.10 jstack演示：</h5><p>cpu占用过高，问题的排查流程：</p><blockquote><p>1.使用Process Explorer工具，找到CPU占用率高的进程的id</p><p>2.右击该进程，查看属性，在thread选项卡中，找到cpu占用率高的线程id</p><p>3.把线程id转换成16进制</p><p>4.使用jstack -l pid查看进程的线程快照</p><p>5.在线程快照中使找到指定线程，并分析代码</p></blockquote><p>jsatck查看死循环</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080913.png" alt="jstack检测死循环"></p><p>jsatck查看IO阻塞</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080912.png" alt="jstack检测线程状态以及阻塞"></p><p>jsatck查看死锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要o2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要o1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用命令：    jstack -l  pid</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080911.png" alt="jstack检查线程之间的死锁"></p><h4 id="3-常用的jdk工具-可视化"><a href="#3-常用的jdk工具-可视化" class="headerlink" title="3.常用的jdk工具(可视化)"></a>3.常用的jdk工具(可视化)</h4><h5 id="3-1-JConsole"><a href="#3-1-JConsole" class="headerlink" title="3.1 JConsole"></a>3.1 JConsole</h5><p>作用：查看java应用程序的运行概况，监视垃圾收集器管理的虚拟机内存(堆和元空间)的变化趋势，以及监控程序内的线程。</p><p>启动JConsole，在控制台输入：Jconsole即可，寻找本地进程，再进去看界面页信息。显示的是整个虚拟机主要的运行数据概况，包括堆内存使用情况、线程、类、CPU使用情况的曲线图。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080914.png" alt="Jconsole可视化监视"></p><p>内存：</p><p>相当于命令行的jstat命令，用于监视垃圾收集器管理的虚拟机内存(堆和元空间)的变化趋势，这不仅包括堆内存的整体信息，更细化到伊甸区、幸存区、老年代的使用情况。同时包括非堆区，即元空间的使用情况，单机界面的执行GC可以强制应用程序进行一次Full GC</p><p>线程：</p><p>相当于命令行的jstack命令，遇到线程停顿的时候可以使用它来进行监控分析。JConsole显示了系统内的线程数量，并在屏幕下方，显示了程序中所有的线程，单机线程名称，便可查看线程的栈信息。</p><p>类：</p><p>显示系统装载和卸载的类数量。</p><p>VM摘要：</p><p>在VM摘要页面，JConsole显示了当前应用程序的运行环境。包括虚拟机类型，版本、堆信息以及虚拟机参数。相当于jinfo命令。</p><p>MBean：</p><p>MBean页面允许通过JConsole访问已经在MBean服务器注册的MBean对象。</p><h5 id="3-2-Visual-VM"><a href="#3-2-Visual-VM" class="headerlink" title="3.2 Visual VM"></a>3.2 Visual VM</h5><p>作用：是jdk发布功能最强大的运行监视和故障处理程序，官网在VisualVM的软件说明中写上了”All-in-one”的字样，预示着其除了监视、故障处理外，还提供了很多其他方面的能力。</p><p>VisualVM是基于netBeans平台开发，因此具备可扩展性，通过VisualVM可以做到：</p><blockquote><p>1.显示虚拟机进程以及进程的配置、环境信息(jps、jinfo)</p><p>2.监视应用程序的CPU、GC、堆、方法区、以及线程的信息（jstat、jstack）</p><p>3.dump以及分析堆转储快照(Jmap、jhat)</p><p>4.方法级的程序运行性能分析，找到被调用最多、运行时间最长的方法</p><p>5.离线程序快照，收集程序的运行时配置、线程dump、内存dump等信息建立一个快照，可以将快照开发者处进行bug反馈</p></blockquote><p>使用：</p><p>1.在控制台输入：jvisualvm执行即可</p><p>2.安装插件：从主菜单中选择工具&gt;插件，可在可用插件标签中，选中该插件的安装复选框，单机安装，逐步完成插件安装程序</p><p>jvisualvm的测试</p><p>测试类设置：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmDemoVisiual03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> big <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5M</span><span class="token punctuation">}</span></code></pre><p>输入命令，显示可视化界面</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/jvm20080917.png" alt="jvisiualvm可视化显示"></p><h4 id="4-内存分析与线程分析"><a href="#4-内存分析与线程分析" class="headerlink" title="4.内存分析与线程分析"></a>4.内存分析与线程分析</h4><h5 id="4-1-监视"><a href="#4-1-监视" class="headerlink" title="4.1 监视"></a>4.1 监视</h5><p>  监视是一种用来查看应用程序运行时行为的一般方法，通常会有多个视图分别实时的显示CPU使用情况、内存使用情况、线程状态以及其他一些有用的信息，以便用户能很快发现问题的关键所在。</p><h5 id="4-2-转储"><a href="#4-2-转储" class="headerlink" title="4.2 转储"></a>4.2 转储</h5><p>  性能分析工具从内存中获取当前状态数据并存储到文件用于静态的性能分析。java程序是通过在启动java程序时添加适当的条件参数来出发转储操作。其包括以下三种：</p><blockquote><p><strong>1.系统转储</strong>：JVM生成的本地系统的转储，又称作核心转储，一般的，系统转储数据量大，需要平台相关的工具去分析，如windows上的windbg和linux上的db。</p><p><strong>2.java转储</strong>：jvm内部生成的格式化后的数据，包括线程信息，类的加载信息以及堆的统计数据。通常也检查死锁</p><p><strong>3.堆转储</strong>：jvm将所有对象的堆内容存储到文件</p></blockquote><h5 id="4-3-快照"><a href="#4-3-快照" class="headerlink" title="4.3 快照"></a>4.3 快照</h5><blockquote><p>应用程序启动后，性能分析工具开始收集各种运行时的数据，其中一些数据直接显示在监视器视图中，而另外大部分数据被保存在内部，知道用户要求获取快照，基于这些保存的数据的统计信息才被显示出来。快照包含了应用程序在一段时间内的执行信息，通常有cpu快照和内存快照两种类型。</p></blockquote><h5 id="4-4-性能分析"><a href="#4-4-性能分析" class="headerlink" title="4.4 性能分析"></a>4.4 性能分析</h5><p>性能分析是通过收集程序运行时的执行数据来帮助开发人员定位需要被优化的部分，从而提高程序的运行速度或是内存使用效率，主要有三个方面：</p><blockquote><p><strong>1.CPU性能分析</strong>：CPU性能分析的主要目的是统计函数的调用情况及执行情况，或者更简单的情况就是统计应用程序的cpu使用情况。通常有cpu监视和cpu快照两种方式来显示cpu性能分析结果。</p><p><strong>2.内存性能分析</strong>：内存性能分析的主要目的是通过统计内存使用情况检测可能存在的内存泄露问题及确定优化内存使用的方向。通常有内存监视和内存快照两种方式显示内存性能分析结果。</p><p><strong>3.线程性能分析</strong>：线程性能分析主要用于多线程应用程序中确定内存问题的所在。一般包括线程状态的变化情况，死锁情况和某个线程在线程生命周期内状态的分布情况等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8流式编程</title>
      <link href="/2020/08/02/java-liu-shi-bian-cheng/"/>
      <url>/2020/08/02/java-liu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="流式编程"><a href="#流式编程" class="headerlink" title="流式编程"></a>流式编程</h4><blockquote><p>流式编程是对集合的增强，流不是集合的元素，也不是数据存储，更像是迭代器，单向遍历集合中的元素，简化对集合对象的操作(删除、过滤、映射、排序…)</p><p><strong>注：流式编程最好的是学习lambda表达式，因为流式操作的参数大多数是函数式接口，使用lambda表达式可以简化操作。</strong></p></blockquote><p>步骤</p><blockquote><p>1.获取数据源，将数据源中的数据读取到流中</p><p>2.对流中的数据进行各种各样的处理</p><p>3.对流中数据进行整合处理</p></blockquote><h4 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h4><p>消费型接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//只有参数没有返回值</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>供给型接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有返回值没有参数传入</span>    T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>函数式接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ToIntFunction</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有参数有一个int类型的返回值</span>    <span class="token keyword">int</span> <span class="token function">applyAsInt</span><span class="token punctuation">(</span>T var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>断定式接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//单一参数，返回值为布尔类型的方法</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...相关default方法删除掉</span><span class="token punctuation">}</span></code></pre><h4 id="数据源获取"><a href="#数据源获取" class="headerlink" title="数据源获取"></a>数据源获取</h4><p>数据源</p><blockquote><p>数据源，流对象中的数据的来源，是集合流式编程的第一步，流所用到的数据源来自集合、数组或者I/O</p></blockquote><p>获取流对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.集合对象</span><span class="token comment" spellcheck="true">//2.从集合对象获取数据元素</span><span class="token comment" spellcheck="true">//3.流对象处理数据</span><span class="token comment" spellcheck="true">//从List集合中获取流对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从整数型对象的数据中获取数据元素，创建的流是一个带泛型的流对象Stream&lt;Integer></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//int类型的数组转换成流对象的格式是一个IntStream</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        IntStream stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>操作流中的数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.准备数据</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span>  <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//准备一个容器</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向数据源添加数据</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取集合的stream对象</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stream<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>####　最终操作</p><h5 id="collect操作-—-最终操作"><a href="#collect操作-—-最终操作" class="headerlink" title="collect操作 —- 最终操作"></a>collect操作 —- 最终操作</h5><p>将流中的数据收集到一起，对一些数据进行处理，将流中的数据存入一个集合中，collect方法的参数是一个Collector接口，该接口不是一个函数式接口，因此可以实现改接口，可以自定义收集规则，一般不需要，可以使用Collections工具类进行操作。</p><p><strong>最终操作：</strong> 指的是该操作执行后会将流关闭</p><p>collect操作示例: 将流中的数据放入集合中，可以放入List集合、Set集合、Map集合中去。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//2.collect操作</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取数据源</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//collect操作</span><span class="token comment" spellcheck="true">//      List&lt;Integer> collect = dataSource.collect(Collectors.toList());</span><span class="token comment" spellcheck="true">//        Set&lt;Integer> collect = dataSource.collect(Collectors.toSet());</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> collect <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Object<span class="token operator">:</span><span class="token operator">:</span>toString<span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="reduce操作——最终操作"><a href="#reduce操作——最终操作" class="headerlink" title="reduce操作——最终操作"></a>reduce操作——最终操作</h5><p>reduce的参数是一个BinaryOperator底层实现的是一个函数式的接口，采用lambda操作对集合中的元素求和</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//reduce操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reduceUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取流对象</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.操作流对象</span>        Integer reduce <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>reduce参数的函数式接口的参数，两个输入参数一个输出参数。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T var1<span class="token punctuation">,</span> U var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> BiFunction<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> var1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="count操作—统计流中的元素个数"><a href="#count操作—统计流中的元素个数" class="headerlink" title="count操作—统计流中的元素个数"></a>count操作—统计流中的元素个数</h5><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//count操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取数据</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取流中的数据</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="forEach操作"><a href="#forEach操作" class="headerlink" title="forEach操作"></a>forEach操作</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//foreach操作</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//1.获取数据</span>     Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用foreach函数</span>     dataSource<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>forEach中的参数是一个消费性接口，只有传入参数没有返回值。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>            var1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="max-amp-amp-min"><a href="#max-amp-amp-min" class="headerlink" title="max&amp;&amp;min"></a>max&amp;&amp;min</h5><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//max&amp;min</span>    <span class="token comment" spellcheck="true">//max  按照比较规则比较流中最大的数据元素</span>    <span class="token comment" spellcheck="true">//min  按照比较规则比较流中最小的数据元素</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">maxAndmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取数据源</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Integer max = dataSource.max(Integer::compareTo).get();</span>        Integer min <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据流中的最大值为："</span><span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span><span class="token string">"数据流中的最小值为："</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="Matching方法"><a href="#Matching方法" class="headerlink" title="Matching方法"></a>Matching方法</h5><blockquote><p>allmatch：只有当流中的所有元素全部匹配时，返回true</p><p>anymatch：只有当流中的任意元素匹配时，返回true</p><p>nonematch ：只有当流中的所有元素全部不匹配时，返回true</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//match方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//全部匹配,当流中的所有元素全部满足条件时，返回true</span><span class="token comment" spellcheck="true">//        boolean b = dataSource.allMatch(e -> e >= 0);</span><span class="token comment" spellcheck="true">//        System.out.println(b);</span>        <span class="token comment" spellcheck="true">//部分匹配</span><span class="token comment" spellcheck="true">//        boolean b = dataSource.anyMatch(e -> e > 9);</span><span class="token comment" spellcheck="true">//        System.out.println(b);</span>        <span class="token comment" spellcheck="true">//全部不匹配，返回true</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>noneMatch传入的参数是一个判定性接口Predicate</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="find操作"><a href="#find操作" class="headerlink" title="find操作"></a>find操作</h5><blockquote><p>findFirst：从流中获取一个元素(获取开头的元素)</p><p>findAny：从流中获取一个元素(获取任意一个元素)</p></blockquote><p>大多数情况下两个函数的结果是相同的，多线程操作时结果可能不一致</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//find操作</span>    <span class="token comment" spellcheck="true">//findFIrst：获取流中的一个元素，获取的是流中的第一个元素</span>    <span class="token comment" spellcheck="true">//findAny：在单线程操作下获取的元素基本上是流中的首部，并行流中获取的元素可能为首部可能为其他</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建集合并添加元素，获取集合流</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用find操作操作流中的数据</span><span class="token comment" spellcheck="true">//        Integer integer = dataSource.parallelStream().findFirst().get();</span><span class="token comment" spellcheck="true">//        System.out.println(integer);</span>        <span class="token comment" spellcheck="true">//stream流的findAny操作获取的是流的第一个元素</span>        <span class="token comment" spellcheck="true">//并行流findAny获取的是流中的任一元素</span>        Integer integer <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>对于以上的部分操作单一的流操作，操作结束后会关闭流,因此使用IntSummaryStatistics获取对象的分析结果，能够将流中的数据操作输出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        IntStream stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最终操作，每次操作完都将流关闭，每次执行一行程序</span>        <span class="token comment" spellcheck="true">//获取最大值</span><span class="token comment" spellcheck="true">//        System.out.println(stream.max().getAsInt());</span>        <span class="token comment" spellcheck="true">//获取最小值</span><span class="token comment" spellcheck="true">//        System.out.println(stream.min().getAsInt());</span>        <span class="token comment" spellcheck="true">//获取平均值</span><span class="token comment" spellcheck="true">//        System.out.println(stream.average().getAsDouble());</span>        <span class="token comment" spellcheck="true">//求和操作</span><span class="token comment" spellcheck="true">//        System.out.println(stream.sum());</span>        <span class="token comment" spellcheck="true">//使用下面的对象可以获取一个流的分析结果，可以将以上所有操作全部记录，不需要每操作一次都关闭流</span>        IntSummaryStatistics intSummaryStatistics <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><p>自定义类型进行操作，定义一个学生类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>  <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get、set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//toString方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"name = "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age = "</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">",score "</span><span class="token operator">+</span>score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写比较方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span>null<span class="token operator">||</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> stu<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> score <span class="token operator">==</span> stu<span class="token punctuation">.</span>score <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//比较规则自定义</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> score<span class="token operator">-</span>o<span class="token punctuation">.</span>score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类中定义一个数据定义的方法</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//创建数据集合并返回数据流对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化集合存储Student对象</span>        ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"01"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"02"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"03"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"04"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"05"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"06"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"05"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"06"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> stream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stream<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="过滤函数filter"><a href="#过滤函数filter" class="headerlink" title="过滤函数filter"></a>过滤函数filter</h5><p>过滤函数，其参数是一个断定性的接口</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//中间操作，过滤，使用函数过滤不及格的学生</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="去重函数distinct"><a href="#去重函数distinct" class="headerlink" title="去重函数distinct"></a>去重函数distinct</h5><p>去掉流中重复的元素，因此自定义的类型需要重写hashCode和equals方法。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//distinct  可以去掉指定流中的重复数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> distinct <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distinct<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="排序函数sorted"><a href="#排序函数sorted" class="headerlink" title="排序函数sorted"></a>排序函数sorted</h5><p>sorted有带参数的和不带参数的两种</p><blockquote><p>sorted():默认排序,指定的类型重写了 Comparable<Student>重写比较的方法</p><p>sorted(Comparator comp)：采用lambda表达式传递参数</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** sorted():默认排序可以实现比较接口，自定义排序规则* sorted(Comparator comp):采用lambda表达式传递参数* */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortedUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对流数据进行排序</span><span class="token comment" spellcheck="true">//        dataSource.sorted().forEach(System.out::println);</span>        <span class="token comment" spellcheck="true">//对流中的数据按照自定义的规则进行</span>        dataSource<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="limit-amp-skip"><a href="#limit-amp-skip" class="headerlink" title="limit &amp; skip"></a>limit &amp; skip</h5><blockquote><p> limit限制，表示截取流中指定数量的数据<br> skip跳过，表示跳过指定数据，截取剩余部分</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//limit&amp;&amp; skip</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">limitandskip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> s2<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//分数最高的五个人</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//跳过2的剩余的输出</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="map-amp-mapToInt"><a href="#map-amp-mapToInt" class="headerlink" title="map &amp; mapToInt"></a>map &amp; mapToInt</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中间操作：map</span>    <span class="token comment" spellcheck="true">//提供一个映射规则，将流中的每一个元素替换成指定的元素</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mapUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有学生的姓名</span><span class="token comment" spellcheck="true">//        dataSource.map(s->s.getName()).forEach(System.out::println);</span>        <span class="token comment" spellcheck="true">//获取所有学生的成绩</span><span class="token comment" spellcheck="true">//        dataSource.map(Student::getScore).forEach(System.out::println);</span>        IntSummaryStatistics intSummaryStatistics <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getScore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intSummaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中间操作：flatmap</span>    <span class="token comment" spellcheck="true">//扁平化映射：一般在map映射完成后，流中大的数据是一个容器，而我们需要对容器中的数据进行处理</span>    <span class="token comment" spellcheck="true">//使用扁平化映射，可以将流中的容器中的数据直接读取到流中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将字符串数组中的数据读取到流中</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        stream.map(String::toCharArray).forEach(e-> System.out.println(e));</span>        stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h4><p>为了方便获取一个Collector接口的实现类对象，从而使用collect方法，对流中的数据进行处理</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Collections.toList()</td><td>将流中的数据，整合到一个List集合中</td></tr><tr><td>Collections.toSet()</td><td>将流中的数据，整合到一个Set集合中</td></tr><tr><td>Collections.toMap()</td><td>将流中的数据，整合到一个Map集合中</td></tr><tr><td>maxBy()</td><td>按照指定的规则，找到流中最大的元素，等同于max</td></tr><tr><td>minBy()</td><td>按照指定的规则，找到流中最小的元素，等同于min</td></tr><tr><td>joining()</td><td>将流中的数据拼接成一个字符串，(智能操作String的字符串)</td></tr><tr><td>summingInt()</td><td>将流中的数据，映射成int类型的数据，并求和</td></tr><tr><td>averageingInt()</td><td>将流中的数据，映射成int类型的数据，并求平均值</td></tr><tr><td>summarizingInt()</td><td>将流中的数据，映射成int类型的数据，并获取描述信息</td></tr></tbody></table><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//准备字符串数组，作为数据源</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> dataSource <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"xing"</span><span class="token punctuation">,</span><span class="token string">"love"</span><span class="token punctuation">,</span><span class="token string">"the"</span><span class="token punctuation">,</span><span class="token string">"book"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取数据源中的数据，做成Stream</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.joining只适用于Stream&lt;String>流中</span><span class="token comment" spellcheck="true">//        String collect = stream.collect(Collectors.joining(" ","{","}"));</span><span class="token comment" spellcheck="true">//        System.out.println(collect);</span>        <span class="token comment" spellcheck="true">//2.流中的数据映射成int类型并求和</span><span class="token comment" spellcheck="true">//        Integer collect = stream.collect(Collectors.summingInt(String::length));</span><span class="token comment" spellcheck="true">//        System.out.println(collect);</span>        <span class="token comment" spellcheck="true">//可以替换上面的两行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程(JUC)</title>
      <link href="/2020/07/27/java-duo-xian-cheng/"/>
      <url>/2020/07/27/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<p>狂神的课程还是蛮好的<a href="https://www.bilibili.com/video/BV1B7411L7tE/?p=9" target="_blank" rel="noopener">B站视频</a> 多线程的马士兵也很好，就是不开源，学费有点贵，公开课讲的也挺深入的。</p><h4 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1.什么是JUC"></a>1.什么是JUC</h4><p>java.util中关于并发的工具包。线程的三种方式：继承Thread类、实现Runnable、实现Callable接口，Callable接口有返回值、效率高。</p><h4 id="2-线程与进程"><a href="#2-线程与进程" class="headerlink" title="2.线程与进程"></a>2.线程与进程</h4><blockquote><p>再次复习线程与进程<a href="https://itxingzai.xyz/2020/04/29/java-gao-bing-fa/" target="_blank" rel="noopener">之前的文章中也有介绍</a></p><p>进程是执行中的程序，是一个动态的概念，是<strong>cpu分配和管理资源的基本单位</strong>；<strong>线程是一个轻量级的进程，是CPU调度的基本单位</strong>，一个进程可能有多个线程，java中的线程是一个程序执行过程中的一个线程实体，JVM中允许一个应用并发执行多个线程。</p></blockquote><p>线程的状态</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>        NEW<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//新建状态</span>        RUNNABLE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//运行状态</span>        BLOCKED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//阻塞态</span>        WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//等待状态，死等</span>        TIMED_WAITING<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//超时等待</span>        TERMINATED<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止</span>        <span class="token keyword">private</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-并发与并行"><a href="#3-并发与并行" class="headerlink" title="3.并发与并行"></a>3.并发与并行</h4><blockquote><p>并发(Concurrency)：多个事件在<strong>同一时间间隔</strong> 发生，并发是多个任务之间互相抢占资源</p><p>并行(Parallelism)：多个是事件在<strong>同一时刻</strong>发生，不存在多个任务抢占资源</p><p>使用一个很典型的例子：</p><p>并发：两列队伍排队在同一个窗口买咖啡，窗口交替处理事件</p><p>并行：两列队伍在两个窗口买咖啡，两个窗口同时进行</p></blockquote><h4 id="4-wait与sleep"><a href="#4-wait与sleep" class="headerlink" title="4.wait与sleep"></a>4.wait与sleep</h4><blockquote><p>wait 是Object类中的方法  sleep是Thread类的方法</p><p>wait会释放锁，sleep拿着锁休眠</p><p><strong>wait()必须在同步代码块中</strong>  sleep任意位置</p><p>wait需要其他线程将其唤醒，sleep固定的睡眠时间</p><p>wait使得线程进入WAITING状态；sleep使得线程进入TIMED-WAITING状态</p></blockquote><h4 id="5-Lock锁-重要"><a href="#5-Lock锁-重要" class="headerlink" title="5.Lock锁(重要)"></a>5.Lock锁(重要)</h4><p>Synchronized与Lock</p><blockquote><p>1.Synchronized是内置的关键字，Lock是一个java类</p><p>2.Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁</p><p>3.Synchronized会自动释放锁，lock必须手动释放</p><p>4.Synchronized线程1获取，线程2等待，lock锁不一定会一直等</p><p>5.Synchronized可重入锁，不可以中断，非公平；lock锁，可重入，可以判断锁，非公平</p><p>6.Synchronized适合锁少量的代码同步问题，lock适合锁大量的同步代码块</p></blockquote><p>生产者消费者(使用juc包中的锁)</p><blockquote><p>面试的四个问题：单例模式、排序算法、生产者消费者、死锁</p></blockquote><p>JUC中的Lock与Condiction(该对象是一个条件对象，获取等待通知的组件)</p><blockquote><p>condition.await();  线程等待  和Object类的wait方法等效</p><p>condition.signal();  线程唤醒  和Object类的notify方法等效</p><p>condition.signalAll();  唤醒所有等待现场呢过  和Object的唤醒是随机的</p></blockquote><p>JUC生产者消费者实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductorAndConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//共享资源</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//四个线程，两个生产者，两个消费者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"P1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"P2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费者线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//共享资源</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用JUC包中的锁</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生产者生产  数字+1</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待、业务、通知</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//消费者消费 数字-1</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待、业务、通知</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消费第"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Condition条件执行：</p><blockquote><p>要求线程A先执行，执行完成后通知B，B执行完后通知C</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data01 data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">Data01</span><span class="token punctuation">{</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//业务</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关于锁的8个问题(称之为8锁)</p><p>问题1、2</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//问题1：两个同步方法操作同一资源，在开启中间进行延迟，先发短信再打电话</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>msgsend<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>call<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题2：两个同步方法操作同一资源，发短信方法中有延迟，先发短信再打电话</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>msgsend<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>call<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">msgsend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//第二个问题才加入</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>问题3、4</p><pre class=" language-java"><code class="language-java">ublic <span class="token keyword">class</span> <span class="token class-name">TestLock01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题3：两个同步方法，两个对象，先打电话再发短信</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>msgsend<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone1<span class="token operator">:</span><span class="token operator">:</span>call<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题4：一个同步方法，一个非同步方法，同一个对象，先hello再发短信</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>msgsend<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>hello<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">msgsend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"say Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>问题5、6</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题5：两个静态代码块，同一个对象，A线程的方法有延迟，先执行A线程，再执行B线程，锁的是class对象，是同一个模板</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题6：两个静态代码块，两个对象调用，一个是模板一个是new出来的真实对象，锁住的是同一个对象class对象</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone1<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>问题7、8</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//问题7：一个静态同步方法一个非静态同步方法，同一个对象  先是静态然后是发短信</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">msgsend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非静态同步有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态同步没有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个静态同步方法一个非静态同步方法，同一个对象  先执行打电话，再执行静态</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态同步有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//非静态同步没有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题8：一个静态同步方法一个非静态同步方法，两个对象,静态同步方法有延迟非静态同步方法没有延迟  先执行打电话，再执行静态</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态同步有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//非静态同步没有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一个静态同步方法一个非静态同步方法，两个对象,非静态同步方法有延迟静态同步方法没有延迟  再执行静态,先执行发短信</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone<span class="token punctuation">.</span><span class="token function">msgsend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非静态同步有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            phone1<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态同步没有延迟</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//非静态同步方法(有延迟)</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">msgsend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//非静态同步方法(没有延迟)</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//静态同步方法(有延迟)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//静态同步方法(没有延迟)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>####　6.集合类不安全</p><p>ArrayList线程不安全，解决方案如下</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * ArrayList()不安全的类解决方案有        * 1.使用Vector类        * 2.使用集合工具类Collections.sychronizedList(List)        * 3.使用JUC的包：new CopyOnWriteArrayList&lt;>()        * */</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Vector底层使用的Synchronized同步方法</p><p>CopyOnWriteArrayList底层使用的是ReentrantLock，使用的lock锁效率高</p></blockquote><p>Set不安全</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方式一：使用工具类将其转换成安全的</span><span class="token comment" spellcheck="true">//        Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span>        <span class="token comment" spellcheck="true">//方式二：使用JUC中的类</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方式一：使用工具类将其转换成安全的</span><span class="token comment" spellcheck="true">//        Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span>        <span class="token comment" spellcheck="true">//方式二：使用JUC中的类</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>HashSet底层：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//底层是一个hashMap</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//HashSet的add方法，是一个map添加值的方式</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Map</p><p>HashMap：初始大小为1&lt;&lt;4，大小为16，加载因子0.75，线程不安全</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.集合工具类</span>        <span class="token comment" spellcheck="true">// Map&lt;String,String> map = Collections.synchronizedMap(new HashMap&lt;>());</span>        <span class="token comment" spellcheck="true">//2.使用JUC并发的Map类</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ConcurrentHashMap原理</p><p>存储数据的静态内部类Node以及子类的关系，本质相当于一个链表</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20072801.png" alt="HashMap中存储数据的Node类"></p><blockquote><p>最大容量1&lt;&lt;30   1073741824</p><p>private static final int MAXIMUM_CAPACITY = 1073741824</p><p>默认表的大小  16</p><p>private static final int DEFAULT_CAPACITY = 16</p><p>最大数组的大小  Integer.MAX_VALUE-8</p><p>static final int MAX_ARRAY_SIZE = 2147483639</p><p>默认的并发数：   16</p><p>private static final int DEFAULT_CONCURRENCY_LEVEL = 16</p><p>负载因子为 0.75F   (float)  </p><p>private static final float LOAD_FACTOR = 0.75F</p><p>转换成红黑树的阈值为 8</p><p>static final int TREEIFY_THRESHOLD = 8</p><p>红黑树转链表阈值为  6</p><p>static final int UNTREEIFY_THRESHOLD = 6</p><p>转换为红黑树表的最小容量为  64</p><p>static final int MIN_TREEIFY_CAPACITY = 64</p><p>每次转移的最小值为  16</p><p>private static final int MIN_TRANSFER_STRIDE = 16;</p></blockquote><h4 id="7-Callable"><a href="#7-Callable" class="headerlink" title="7.Callable"></a>7.Callable</h4><blockquote><p>类似于Runnable，但其可以有返回值、可以抛出异常、方法不同重写call()，FutureTask是Runnable的一个实现类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallAbleDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCall myCall <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用Runnable接口的一个子类进行适配操作</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>myCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用get方法可能会导致阻塞      </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyCall</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"522"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>使用FutureTask结果会有缓存</p><p>get方法可能需要等到，会阻塞</p></blockquote><h4 id="8-常用辅助类-必须会"><a href="#8-常用辅助类-必须会" class="headerlink" title="8.常用辅助类(必须会)"></a>8.常用辅助类(必须会)</h4><blockquote><p>CountDownLatch、CyclicBarrier、Semaphone</p></blockquote><p>1.CountDownLatch</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//门闩  CountDownLatch 类似于减法计数器</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"go out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//线程每次调用就会减1</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计数器为0时往下执行</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"clored"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.CyclicBarrier</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 类似于加法计数器 CyclicBarrier</span>        CyclicBarrier cyclic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经到达7了，冲冲冲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//线程中无法获取i，定义临时变量</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"个宝物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    cyclic<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>3.Semaphone 信号量</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//信号量 Semaphone 使用停车位小例子:三个车位6辆车</span>        <span class="token comment" spellcheck="true">//acquire()</span>        <span class="token comment" spellcheck="true">//release()</span>        Semaphore semap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//线程获取资源，获取后信号量-1</span>                    semap<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//线程释放资源，信号量+1</span>                    semap<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="9-读写锁"><a href="#9-读写锁" class="headerlink" title="9.读写锁"></a>9.读写锁</h4><p><strong>ReadWriteLock</strong> 是一个读写锁的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCacheLock myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//读线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自定义缓存</span><span class="token keyword">class</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读写锁，锁的粒度比较细</span>    <span class="token keyword">private</span> ReentrantReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-阻塞队列"><a href="#10-阻塞队列" class="headerlink" title="10.阻塞队列"></a>10.阻塞队列</h4><p>队列先入先出的特性，产生阻塞的场景是：当队列存满时，队列存储数据时会阻塞；当队列为空时，拿取数据会阻塞</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20072901.png" alt="api中的阻塞队列"></p><p>常用的阻塞队列</p><blockquote><p>接口<strong>BlockingQueue</strong> 与List、Set同一级别，同样继承Collection接口，其实现类有：ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue(同步队列)</p></blockquote><p>阻塞队列的api</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add(元素)</td><td>offer(元素)</td><td>put(元素)</td><td>offer(元素,时间,时间单位)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(时间长度，时间单位)</td></tr><tr><td>判断队首元素</td><td>element()</td><td>peek()</td><td>—</td><td>—-</td></tr></tbody></table><p>四种情况的例子：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//1.存在异常情况</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建大小为3的队列</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加的元素超出队列大小或抛出异常</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("d"));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        从队列中拿取元素时,队列为空抛出异常</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.没有异常情况</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大于队列的元素添加返回值为false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于空数组返回值为null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.阻塞等待</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//队列已经满了，当前元素插入时阻塞</span><span class="token comment" spellcheck="true">//            blockingQueue.put("d");</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取时，没有元素时阻塞</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//队列为空时，获取元素时阻塞</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4.超时等待</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayBlockingQueue<span class="token operator">&lt;</span>Object<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前队列已经满了，等待两秒后插入，如果能够插入返回true否则丢弃</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前队列为空，等待两秒后有元素返回该元素，没有时返回null</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>同步队列</strong>  SynchronousQueue队列</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BlockingQueue synqueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步队列</span>        <span class="token comment" spellcheck="true">//开启线程1向同步队列中放置元素,放置后只有当另一个线程将元素拿走后才能继续放置元素</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                synqueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                synqueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"put 3 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                synqueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启线程2向同步队列中拿取元素</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>synqueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>synqueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>synqueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="11-线程池-重点"><a href="#11-线程池-重点" class="headerlink" title="11.线程池(重点)"></a>11.线程池(重点)</h4><p>池化技术：占用系统资源，优化资源的使用，池化技术，例如线程池、连接池、内存池、对象池。<strong>线程池的三大方法、七大参数、四种拒绝策略</strong>。</p><p>个人推荐美团的技术文档很完美：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">美团多线程</a></p><p>阿里开发手册中对线程池的规范</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20072902.png" alt="阿里手册中进制使用Executors创建线程池"></p><p><strong>三大方法</strong>(不推荐使用该方式创建线程池)</p><blockquote><p>//单个线程的线程池 </p><p>ExecutorService threadPool =Executors.newSingleThreadExecutor();</p><p>//固定数量的线程池</p><p> ExecutorService threadPool =  Executors.newFixedThreadPool(5);</p><p>//可扩充的线程池</p><p> ExecutorService threadPool = Executors.newCachedThreadPool();</p></blockquote><p><strong>七大参数</strong></p><blockquote><p>1.核心线程池大小</p><p>2.最大核心线程池大小</p><p>3.超时没有调用释放</p><p>4.超时单位</p><p>5.阻塞队列</p><p>6.线程工厂：创建线程</p><p>7.拒绝策略</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//7个参数int var1, int var2, long var3, TimeUnit var5, BlockingQueue&lt;Runnable> var6, ThreadFactory var7, RejectedExecutionHandler var8</span><span class="token comment" spellcheck="true">//核心线程池大小、最大线程数、超时回收时间、时间单位、阻塞队列(类似于银行的等候区)、线程工厂、拒绝策略</span>ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>四种拒绝策略</strong></p><table><thead><tr><th>策略</th><th>描述</th></tr></thead><tbody><tr><td>AbortPolicy</td><td>直接异常结束，组织系统正常运行</td></tr><tr><td>CallerRunsPolicy</td><td>在调用者线程中，运行当前被丢弃的任务，并不是真的丢弃，但是，任务提交线程会降低性能</td></tr><tr><td>DiscardOldestPolicy</td><td>丢弃最老的请求</td></tr><tr><td>DiscardPolicy</td><td>该策略是默默丢弃无法处理的任务，不进行处理</td></tr></tbody></table><p>最大线程数如何确定？(调优考虑)</p><blockquote><p>cpu密集型和IO密集型</p><p>根据cpu核数：Runtime.getRuntime().availableProcessors()；</p><p>IO密集型：指的是任务中有多个IO相关的大型任务，可以设置为2n测试。</p></blockquote><h4 id="12-函数式接口-重点"><a href="#12-函数式接口-重点" class="headerlink" title="12.函数式接口(重点)"></a>12.函数式接口(重点)</h4><p>目前的编程风格：lambda表达式、链式编程、函数式接口、Stream流式计算</p><p>函数式接口是只有一个方法的接口，java.util.function包下有四大原生的函数式接口</p><blockquote><p>Consumer接口  <strong>消费型接口  只输入不返回</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> son <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"消费型接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Supplier接口   <strong>供给型接口  只返回没有参数输入</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"1024程序员节日"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Function接口  Function&lt;T, R&gt;  <strong>T为传入的参数 R为返回的参数</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Function fun <span class="token operator">=</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token operator">+</span>o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Predicate接口 断定式接口，<strong>返回一个布尔类型的值</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>函数式接口为了简化程序，可读性或许不是很好，但是以后的发展趋势，java的泛型、枚举、反射在很早之前就很流行应该掌握，流式编程、lambda表达式、链式编程、函数式编程最近的新特性也需要好好学习。</p><h4 id="13-Stream流式计算"><a href="#13-Stream流式计算" class="headerlink" title="13.Stream流式计算"></a>13.Stream流式计算</h4><p>Stream流式计算，Stream中的方法大部分传入的参数是一个函数式的接口</p><p>例如：Stream<T> filter(Predicate&lt;? super T&gt; var1);</p><p>filter函数中传入一个断定式接口，返回一个布尔类型的值，用于判断</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User u5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//集合用于存储数据</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3<span class="token punctuation">,</span>u4<span class="token punctuation">,</span>u5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需求，从集合中找出年龄大于23的学生、id为偶数、name反着排序并转换成大写，输出1个用户</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>要想学好流式编程首先对函数式接口必须掌握。</p><h4 id="14-ForkJoin"><a href="#14-ForkJoin" class="headerlink" title="14.ForkJoin"></a>14.ForkJoin</h4><p>ForkJoin并行执行任务提高效率，使用在大数据量的情况，<strong>特点是工作窃取</strong> </p><p><strong>工作窃取：</strong>对于分配的子任务，A线程执行到中间位置，B线程任务已经执行结束，B线程不会是一个等待或者阻塞的状态，会将A线程剩余的任务执行，称之为工作窃取。</p><p>使用ForkJoin，应该使用ForkJoinPool 和ForkJoinTask，其中ForkJoinTask中有递归事件和递归任务，递归事件没有返回值，递归任务有返回值。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20072903.png" alt="api中forkjoin的说明"></p><p>对于一个超级大的数字求和，三种方式，由于计算机硬件的限制ForkJoin的结果不如传统的方式</p><p>ForkJoin</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long start<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long end<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long temp <span class="token operator">=</span> 1000000L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ForkJoinDemo</span><span class="token punctuation">(</span>Long start<span class="token punctuation">,</span>Long end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">&lt;</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>            Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Long i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分解任务，将大任务分解为自定义的小任务</span>            ForkJoinDemo task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拆分任务，将任务放入线程队列</span>            ForkJoinDemo task2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>三种方式计算求和以及时间对比，流式编程需要加强。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//传统的方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        Long start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 10_0000_0000L <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Long end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum ="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//forkjoin的方式</span>    <span class="token comment" spellcheck="true">//传统的方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        Long start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首先依赖ForkJoinPool</span>        ForkJoinPool forkJoin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> task<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span>10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        forkJoin.execute(task);//执行任务  没有返回值</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit <span class="token operator">=</span> forkJoin<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交任务</span>        sum <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum ="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//并行流的方式,一行代码完成十亿的相加</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        Long start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        Long end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum ="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="15-异步回调"><a href="#15-异步回调" class="headerlink" title="15.异步回调"></a>15.异步回调</h4><p>Future接口</p><p>没有返回值的CompletableFuture的使用，在其泛型中声明为Void</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">noReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发起一个请求</span>        CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> completableFuture <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"runAsync==>Void"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1111111111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取阻塞执行结果</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>又返回值的CompletableFuture的使用，在其泛型中声明返回值类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> completableFuture <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"supplyAsync==>return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            int i = 1/0;</span>            <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当成功调用时，返回的正确信息</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t=>"</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u=>"</span><span class="token operator">+</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步回调，当出现异常时，返回的错误值</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费型函数式接口的子类，可以传入两个参数没有返回值</span><span class="token comment" spellcheck="true">//@FunctionalInterface</span><span class="token comment" spellcheck="true">//public interface BiConsumer&lt;T, U> {</span><span class="token comment" spellcheck="true">//    void accept(T var1, U var2);</span><span class="token comment" spellcheck="true">//}</span></code></pre><h4 id="16-JMM"><a href="#16-JMM" class="headerlink" title="16.JMM"></a>16.JMM</h4><p>jmm是java的内存模型，是一个逻辑上的概念，不存在的，其中有<strong>EMSI缓存一致性性协议</strong>，将共享变量的值刷新回主内存中，cpu的缓存是一级、二级缓存存在于cpu的核中，三级缓存为共享的缓存，M(Modified)、E(exclusive)、S(shared)、I(invalid)</p><blockquote><p>Modified:当前cpu缓存拥有最新数据，其他cpu拥有失效数据，以当前cpu数据为准</p><p>exclusive:只有当前cpu有数据，其他cpu没有修改数据，当前cpu数据和主存的数据是一致的</p><p>shared:当前cpu和其他cpu都有公共数据，并且和主存中的数据一致</p><p>invalid:当cpu数据失效，数据应该从主存中获取，其他cpu中可能有数据也可能无数据，当前cpu中的数据和主存是不一致的</p></blockquote><p><img src="https://itxingzai.xyz/medias/images/jmm.png" alt="java内存模型"></p><p>Volatile关键字是java虚拟机提供轻量级的同步机制，<strong>保证可见性不保证原子性，禁止指令重排序。</strong></p><p>内存交互的8个原子操作</p><blockquote><p><strong>lock (锁定)</strong>：作用于<strong>主内存</strong>的变量，把一个变量表示为线程独占状态</p><p><strong>unlock(解锁)</strong>：作用于<strong>主内存</strong>的变量，将一个锁定的变量释放</p><p><strong>read(读取)</strong>：作用于<strong>主内存</strong>，将一个变量从主内存读取到工作内存中，提供给load</p><p><strong>load(载入)</strong>：作用于<strong>工作内存</strong>，将read操作的变量放入工作内存</p><p><strong>use(使用)</strong>：作用于<strong>工作内存</strong>的变量，将工作内存的变量传输给执行引擎</p><p><strong>assign(赋值)</strong>：作用于<strong>工作内存</strong>，将一个执行引擎中接受的值放入工作内存的变量副本中</p><p><strong>store(存储)</strong>：将<strong>工作内存中的值传送到主内存</strong>中，便于write使用</p><p><strong>write(写入)</strong>：作用于<strong>主内存</strong>中，将store操作的变量值放入主内存的变量中</p></blockquote><p>规则</p><blockquote><p>1.read和load、store和write操作不可单一出现，使用了read必须使用load，使用了store必须使用write</p><p>2.不允许现场呢过丢弃其最近的assign操作，即工作变量的数据改变之后，必须告知主内存</p><p>3.不允许一个线程将没有assign的数据从工作内存同步回主内存</p><p>4.一个新的变量必须在主内存产生，不允许一个工作内存直接使用一个未初始化的变量，一个变量在use和store之前必须经过assign和load</p><p>5.一个变量同一时间只有一个线程能对其进行lock，多次lock后必须执行相同次数的unlock</p><p>6.如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用该变量前，必须重新load或者assign操作初始化变量的值</p><p>7.如果一个变量没有被lock，就不能对其进行unlock操作，也不能unlock一个被其他线程锁住的变量</p><p>8.对一个变量进行unlock操作之前，必须把此变量同步到主内存</p></blockquote><p>volatile可见性验证，对于一个线程使其对共享变量循环，另外一个线程改变共享变量让其结束循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewSionDemo</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//没有volatile关键字，线程不会停止</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Volatile不是原子操作的，只是保证可见性和指令重排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//volatile 保证可见性  禁止指令重排</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//synchronized能够保证原子性</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因此想要保证原子操作，可以使用前面学过的synchronized或者Lock锁解决，但是在JUC中提供了原子基本类，可以进行累加。</p><blockquote><p>//将共享变量使用原子类进行操作</p><p>private  static AtomicInteger num = new AtomicInteger(0);</p><p>num.getAndIncrement();</p></blockquote><p>指令重排序：源代码—&gt;编译器重排—-&gt;指令并行也可能重新排序——&gt;内存系统重排——&gt;执行  volatile指令重排序底层是内存屏障实现的，在关键字变量前后禁止指令交换顺序。</p><h4 id="17-单例模式-会手写"><a href="#17-单例模式-会手写" class="headerlink" title="17.单例模式(会手写)"></a>17.单例模式(会手写)</h4><p>   饿汉式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungryDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> HungryDemo HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungryDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">HungryDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungryDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> HUNGRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>双检锁，懒汉式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//volatile关键字必须要有，进制指令重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyDemo lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//并发情况下不安全</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//new对象时不时一个原子性的操作，对象的创建过程分为三步</span>                <span class="token comment" spellcheck="true">//1.分配内存空间</span>                <span class="token comment" spellcheck="true">//2.执行构造方法，初始化对象</span>                <span class="token comment" spellcheck="true">//3.将对象指向内存空间</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token operator">==</span>null<span class="token punctuation">)</span>lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>懒汉式单例，静态内部类方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HolderDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有化构造器</span>    <span class="token keyword">private</span> <span class="token function">HolderDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用该方法的时候才加载</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  HolderDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>HOLDER<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HolderDemo HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HolderDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然所有的单例模式策略都不是绝对的安全，只是相对安全。反射破坏双检锁的单例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LazyDemo instance1 <span class="token operator">=</span> LazyDemo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用反射技术获取构造函数并修改权限，重新实例化对象</span>        Class<span class="token operator">&lt;</span>LazyDemo<span class="token operator">></span> lazyDemoClass <span class="token operator">=</span> LazyDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span>LazyDemo<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> lazyDemoClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyDemo instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建出两个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>构造器中再验证，防止反射破坏：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazyDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破坏异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//volatile关键字必须要有，进制指令重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyDemo lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//并发情况下不安全</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//new对象时不时一个原子性的操作，对象的创建过程分为三步</span>                <span class="token comment" spellcheck="true">//1.分配内存空间</span>                <span class="token comment" spellcheck="true">//2.执行构造方法，初始化对象</span>                <span class="token comment" spellcheck="true">//3.将对象指向内存空间</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token operator">==</span>null<span class="token punctuation">)</span>lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最好的单例模式使用枚举</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>枚举实际底层也是一个类，也有自己的构造器,采用java的命令反编译文件可以看到，枚举类中是一个空参的构造器</p><blockquote><p>javap  -p    EnumSingle.class</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/20073001.png" alt="使用javap反编译的枚举类"></p><p>枚举是不能通过反射创建对象的，从Enum类中的newInstance方法可以看出，使用反射类型创建实例对象时，会产生异常提示</p><blockquote><p>Cannot reflectively  create enum  objects</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073002.png" alt="反射创建Enum类底层的错误消息"></p><p>采用反射试图创建枚举类的实例对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//枚举类对象</span>        EnumSingle instance <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//反射获取字节码对象，获取构造器、修改构造器权限，创建对象</span>        Class<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> enumSingleClass <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> constructor <span class="token operator">=</span> enumSingleClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSingle instance2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用反射获取枚举类型的结果是异常，但是异常信息与底层源码中的异常信息不相符合</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073003.png" alt="空参构造器创建实例产生的异常"></p><p>反编译工具jad，下载地址<a href="https://varaneckas.com/jad/" target="_blank" rel="noopener">jad下载</a>  反编译后文件如下，枚举类继承了java中的Enum类，其中的构造函数不是一个默认的空参构造器，而是一个两个参数的构造器。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073005.png" alt="反编译枚举类后的java文件"></p><p>将反射测试总的构造器转换成有参数传递的构造器，再进行相关的测试，得到和源码中相同的异常提示。</p><blockquote><p>Constructor<EnumSingle> constructor = enumSingleClass.getDeclaredConstructor(String.class,int.class);</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073004.png" alt="真正的异常提示"></p><h4 id="18-CAS"><a href="#18-CAS" class="headerlink" title="18.CAS"></a>18.CAS</h4><p>CAS(乐观锁的态度)：compareAndSet，比较并交换，CAS算法的过程是这样：它包含3个参数CAS(V,E,N)。V表示要更新的变量(内存值)，E表示预期值(旧值)，N表示新值。当且仅当V值等于E值时，将V修改为N，V与E不同时，说明有线程进行了修改，什么都不做。</p><p>ABA问题：</p><blockquote><p>CAS会产生ABA问题，当一个线程准备将A改成C，另一个线程将A改成B后再修改成A，当时对于第一个线程不知道中间的过程，因此会修改数据，一般来说是不允许的。通常ABA问题的解决是通过版本号或者时间戳来判断，每一次修改都会使得版本号+1</p></blockquote><p>JUC中的原子引用，AtomicStampedReference类对ABA问题进行模拟与解决。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建带有时间戳的原子引用对象,初始值为2020，初始的版本号是1</span>        <span class="token comment" spellcheck="true">//泛型是一个包装类，需要注意对象的引用问题</span>        AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> atomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取当前信息的版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1==>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2==>"</span><span class="token operator">+</span>atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomic<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span>atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a3==>"</span><span class="token operator">+</span>atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取当前信息的版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1==>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//对于ABA问题，采用版本号或者时间戳进行控制，第一个线程将13改为14再改回13，第二个线程依旧能够发现并修改失败</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b2==>"</span><span class="token operator">+</span>atomic<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>注：Inter包装类使用了对象的缓存机制，默认范围为-128~127之间，推荐使用静态工厂方法valueOf获取对象实例，而不是new，因为valueOf使用缓存，new一定产生新的对象分配新的内存空间。</strong></p><p>阿里官方文档第7页左右对Integer包装类进行说明，是一个大坑。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073006.png" alt="阿里手册中Integer描述"></p><h4 id="19-各种锁的理解"><a href="#19-各种锁的理解" class="headerlink" title="19.各种锁的理解"></a>19.各种锁的理解</h4><p>A.公平锁、非公平锁</p><blockquote><p>公平锁：非常公平，不能够插队，先来后到</p><p>非公平锁：非常不公平，谁能抢到算谁的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认锁为非公平锁</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock<span class="token punctuation">.</span>NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义公平与不公平，true表示公平，false表示不公平</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token punctuation">(</span>ReentrantLock<span class="token punctuation">.</span>Sync<span class="token punctuation">)</span><span class="token punctuation">(</span>var1 <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock<span class="token punctuation">.</span>FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock<span class="token punctuation">.</span>NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>B.可重入锁</p><blockquote><p>又称为递归锁，可以多次锁一个对象，进入多少次解锁也需要多少次，synchronized和ReentrantLock都为可重入锁，两者之间的异同点：</p><p>共同点：</p><p>都是用来协调对象对共享对象、变量的访问</p><p>都是可重入的锁，同一个线程可以多次获取同一个锁</p><p>都保证了可见性和互斥性</p><p>不同点：</p><p>1.ReentrantLock显示的获取和释放锁；synchronized隐式的获取与释放锁</p><p>2.ReentrantLock可中断、可轮回；synchronized不可响应中断</p><p>3.ReentrantLock是API级别的；synchronized是JVM级别的</p><p>4.ReentrantLock实现类公平锁、可以使用Condition类绑定条件</p><p>5.ReentrantLock的可重入实现是基于Volatile变量state和CAS来实现的；Synchronized可重入是依赖对象头部中markword中记录锁的持有者和计数器，每次重入计数器+1操作，退出时计数器-1</p></blockquote><p>C.自旋锁</p><p>使用CAS自定一个锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutomicSpinlock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//原子引用</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mylock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"===>mylock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自旋锁</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>atomic<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myunlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"===>mylock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自旋锁</span>        atomic<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AutomicSpinlock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutomicSpinlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自定义的锁，第一个线程获取到锁后第二个线程等待第一个线程释放锁后在能进行修改操作</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">mylock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">myunlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">mylock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">myunlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>D.死锁</p><p>再谈死锁，两个线程之间相互争夺资源，且相互不放弃。</p><blockquote><p>死锁的四个必要条件</p><p>互斥条件：一个资源只能被一个进程使用</p><p>请求与保持：一个进程因为请求资源而阻塞时，对以获取的资源保持不放</p><p>不剥夺条件：进程已获取的资源，未使用完之前，不能强行剥夺</p><p>循环等待条件：若干进程之间形成头尾相接的循环等待资源的关系</p></blockquote><p>死锁的例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeathLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String lockA <span class="token operator">=</span> <span class="token string">"lockA"</span><span class="token punctuation">;</span>        String lockB <span class="token operator">=</span> <span class="token string">"lockB"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span>lockA<span class="token punctuation">,</span>lockB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span>lockB<span class="token punctuation">,</span>lockA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String lockA<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lockB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mythread</span><span class="token punctuation">(</span>String lockA<span class="token punctuation">,</span>String lockB<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockA <span class="token operator">=</span> lockA<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockB <span class="token operator">=</span> lockB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"lock=>"</span><span class="token operator">+</span>lockA<span class="token operator">+</span><span class="token string">"=>get"</span><span class="token operator">+</span>lockB<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"lock=>"</span><span class="token operator">+</span>lockB<span class="token operator">+</span><span class="token string">"=>get"</span><span class="token operator">+</span>lockA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>死锁的排查：</p><p>1.bin目录中有jps定位进程号</p><blockquote><p>jps -l</p></blockquote><p>查看进程号</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073007.png" alt="image-20200730181519958"></p><p>找到对应的进程后查看堆栈信息</p><blockquote><p>jstack  进程号</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/juc20073008.png" alt="image-20200730181717834"></p><p>课程：秦老师的课程真的质量很高的，推荐学习java的学生学习<a href="https://space.bilibili.com/95256449/" target="_blank" rel="noopener">狂神B站地址</a></p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2020/07/22/dong-tai-gui-hua/"/>
      <url>/2020/07/22/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p>动态规划题目特点</p><p>1.计数的问题</p><blockquote><p>有多少种方式走到右下角</p><p>有多少种方法选出k个数使得和是Sum</p></blockquote><p>2.求最大值最小值</p><blockquote><p>从左上角走到右下角路径的最大数字和</p><p>最长上升子序列长度</p></blockquote><p>3.求存在性</p><blockquote><p>取石子游戏，先手是否必胜</p><p>能不能选出k个数使得和是Sum</p></blockquote><p>以上是动态规划能够解题的题目种类。</p><h4 id="1-例题1："><a href="#1-例题1：" class="headerlink" title="1. 例题1："></a>1. 例题1：</h4><p>假设有三种硬币，分别面值2元，5元，7元，每种硬币都足够的多，需要买一本27元的书，要求硬币数量尽可能的少</p><p><strong>动态规划组成部分1：</strong>确定状态</p><blockquote><p>动态规划一般需要一个额外的空间记录状态，一般是开一个数组</p></blockquote><p>题目的最优策略是什么？该题目最优策略是K枚硬币A1…Ak的面值加起来是27，索引一定有一枚最后的硬币Ak，除去该硬币前面的k-1硬币之和为27-Ak</p><blockquote><p>关键点1：对于前面的K-1枚硬币是如何组成的不需要关系，而且也不知道Ak和K，但是知道了前面的硬币得到的是27-Ak</p><p>关键点2：因为最优策略，所以拼出27-Ak的硬币数量一定要少，否则就不是最优策略</p></blockquote><p><strong>原问题：</strong>最少用多少枚硬币拼出27</p><p><strong>子问题：</strong>最少用多少枚硬币拼出27-Ak</p><p>f(x) = 使用多少枚硬币拼出x+1</p><p>根据最后一枚硬币的可能性，最后一枚是2,5,7</p><blockquote><p>如果Ak为2,f(27)=f(27-2)+1加上最后一枚硬币</p><p>如果Ak为5,f(27)=f(27-5)+1加上最后一枚硬币</p><p>如果Ak为7,f(27)=f(27-7)+1加上最后一枚硬币</p><p>最后取三种结果的最小值，f(27) = min(f(27)=f(27-2)+1,f(27)=f(27-5)+1,f(27)=f(27-7)+1)</p></blockquote><p>采用递归实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">coin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span>res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">coin</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">coin</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">7</span><span class="token punctuation">)</span>res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">coin</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>递归运算的缺点是：计算的中间结果比较多，会产生重复的计算过程。</p><p><strong>动态规划组成部分2：</strong>转移方程</p><p>对于任意x,状态转移方程   f[x]  = min {f[x-2]+1,f[x-5]+1,f[x-7]+1}</p><p>动态规划组成部分3：初始条件和边界情况</p><p>  f[x]  = min {f[x-2]+1,f[x-5]+1,f[x-7]+1}</p><p>对于中间状态可能会产生小于0的状态，即边界控制条件。如果拼不出y值，则返回系统最大值，f[y]=系统最大，不会影响其他的判断。例如，f[1] = min{f[-1]+1,f[-4]+1,f[-6]+1}，2,5,7拼不出来1</p><p>初始条件是f[0] = 0</p><p><strong>动态规划组成部分4：</strong>计算顺序</p><p>一般来书都是从前向后，从上向下计算，当然也存在例外。</p><p>时间复杂度：n*m,n表示需要拼出的数值，m表示硬币面值数，本题目时间复杂度是27*3</p><p>题目小结：</p><blockquote><p>动态规划组成部分：</p><p>1.确定状态</p><p>​    最后一步(最优策略中使用的最后一枚硬币)</p><p>​    化成子问题</p><p>2.转移方程</p><p>​    f[x] = min{f[x-2]+1,f[x-5]+1,f[x-7]+1}</p><p>3.初始条件和边界情况</p><p>​    f[0] = 0,如果不能拼出Y，f[Y] = 正无穷</p><p>4.计算顺序</p><p>​    f[0],f[1]…</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 钱数最小</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coin</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化一个数组，记录中间状态</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 原始位置初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> val<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-例题2"><a href="#2-例题2" class="headerlink" title="2.例题2"></a>2.例题2</h4><p>计数型的动态规划</p><p>给定一个m行n列的网格，有一个机器人从左上角(0,0出发，每一步可以向下或者向右走一步)，问题是有多少种不同的方式走到右下角。</p><p>原问题：从(0,0)位置到达(m-1,n-1)位置</p><p>子问题：最后一个位置能到达是由于机器人要么来自其上方，要么来自其左方。即来自(m-1,n-2)或者(m-2,n-1)</p><p><strong>初始条件和边界</strong></p><p>初始条件：f[0][0] = 1</p><p>边界条件：i=0;j=0,只有一个方向到达</p><p><strong>计算顺序</strong></p><blockquote><p>计算第0行：f[0][0],f[0][1]…f[0][n-1]</p><p>计算第1行：f[1][0],f[1][1]…f[1][n-1]</p><p>….</p><p>计算第m-1行：f[m-1][0],f[m-1][1]…f[m-1][n-1]</p></blockquote><p>最终的结果是f[m-1][n-1]</p><p>时间复杂度O(MN),空间复杂度O(MN)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取路径</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-例题3"><a href="#3-例题3" class="headerlink" title="3.例题3"></a>3.例题3</h4><p>青蛙跳台阶，在n块石头分别在x轴的0,1…n-1的位置，一只青蛙在石头0，想要跳到石头n-1，如果青蛙在第i块石头上，他最多可以向右跳距离ai，问青蛙是否可以跳到石头n-1。</p><blockquote><p>输入:a=[2,3,1,1,4]</p><p>输出:true</p></blockquote><p><strong>确定状态：</strong></p><p>假设青蛙能够跳到最后一块石头n-1，其前一步是在第i块石头上跳过来的，i&lt;n-1，这两个条件同时满足，青蛙可以跳到石头i，最后一步不超过跳跃的最大距离：n-1-i&lt;=ai</p><p><strong>子问题：</strong>确定青蛙能不能跳到i位置的石头</p><p><strong>转移方程：</strong>f[i] = Skip(f[i] AND i+a[i]&gt;=j)，f[i]表示青蛙能不能跳到i位置</p><p><strong>初始条件：</strong>f[0] = true，因为青蛙一开始就在石头0</p><p><strong>计算顺序：</strong>f[0] f[2]…f[n-1]</p><p>时间复杂度O(N^2),空间复杂度O(N)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>num<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        skip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> skip<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            skip<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>skip<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">+</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    skip<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> skip<span class="token punctuation">[</span>num<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch(二)</title>
      <link href="/2020/07/19/elasticsearch-er/"/>
      <url>/2020/07/19/elasticsearch-er/</url>
      
        <content type="html"><![CDATA[<h4 id="1-ES继承SpringBoot"><a href="#1-ES继承SpringBoot" class="headerlink" title="1. ES继承SpringBoot"></a>1. ES继承SpringBoot</h4><p>自学一门技术首先去官方文档找资料。</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">ES客户端官网</a></p><p>一般使用高级客户端的文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/java-rest-high.html" target="_blank" rel="noopener">7.6的文档传送门</a></p><h5 id="1-1-获取ESmaven依赖"><a href="#1-1-获取ESmaven依赖" class="headerlink" title="1.1 获取ESmaven依赖"></a>1.1 获取ESmaven依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="1-2-构建对象"><a href="#1-2-构建对象" class="headerlink" title="1.2 构建对象"></a>1.2 构建对象</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071901.png" alt="SpringBoot的ES说明"></p><h5 id="1-3-搭建项目"><a href="#1-3-搭建项目" class="headerlink" title="1.3 搭建项目"></a>1.3 搭建项目</h5><p>创建一个空项目将Es项目相关的操作放在该目录下</p><p>新建模块，建立一个springboot项目</p><p>选中默认模块</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071902.png" alt="创建项目"></p><p>选中web模块</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071903.png" alt="选中web项目"></p><p>选中Elastcisearch模块</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071904.png" alt="添加ES相当于非关系数据库"></p><p>项目环境配置：空项目需要设置自己的编译环境1.8，jdk8，项目的javascript改为ECMAScript6</p><p>版本问题不一致时的解决，在pom文件中自定义版本</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--如果ES版本依赖过低，需要保证与自己本地下载的版本一致--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;elasticsearch.version>7.6.2&lt;/elasticsearch.version>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071905.png" alt="查看ES核心类"></p><h5 id="1-4-查看类中的方法"><a href="#1-4-查看类中的方法" class="headerlink" title="1.4 查看类中的方法"></a>1.4 查看类中的方法</h5><p>核心类：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071906.png" alt="三个静态内部类"></p><p>上面的三个类都是静态的内部类，ES7.6.1中是RestClientConfigurations类中，个人使用的ES7.6.2,以上的三个类在ElasticsearchRestClientConfigurations类中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ElasticsearchRestClientConfigurations</span> <span class="token punctuation">{</span>    <span class="token function">ElasticsearchRestClientConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesCredentialsProvider</span> <span class="token keyword">extends</span> <span class="token class-name">BasicCredentialsProvider</span> <span class="token punctuation">{</span>        <span class="token function">PropertiesCredentialsProvider</span><span class="token punctuation">(</span>ElasticsearchRestClientProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Credentials credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordCredentials</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCredentials</span><span class="token punctuation">(</span>AuthScope<span class="token punctuation">.</span>ANY<span class="token punctuation">,</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            properties<span class="token punctuation">.</span><span class="token function">getUris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>toUri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>hasUserInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>addUserInfoCredentials<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> URI <span class="token function">toUri</span><span class="token punctuation">(</span>String uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasUserInfo</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> uri <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addUserInfoCredentials</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AuthScope authScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthScope</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Credentials credentials <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUserInfoCredentials</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCredentials</span><span class="token punctuation">(</span>authScope<span class="token punctuation">,</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Credentials <span class="token function">createUserInfoCredentials</span><span class="token punctuation">(</span>String userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> delimiter <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delimiter <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordCredentials</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                String username <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>                String password <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>delimiter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordCredentials</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认的Rest客户端</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRestClientBuilderCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">RestClientBuilderCustomizer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PropertyMapper map <span class="token operator">=</span> PropertyMapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ElasticsearchRestClientProperties properties<span class="token punctuation">;</span>        <span class="token function">DefaultRestClientBuilderCustomizer</span><span class="token punctuation">(</span>ElasticsearchRestClientProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>RestClientBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>HttpAsyncClientBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setDefaultCredentialsProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ElasticsearchRestClientConfigurations<span class="token punctuation">.</span>PropertiesCredentialsProvider</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PropertyMapper var10000 <span class="token operator">=</span> map<span class="token punctuation">;</span>            ElasticsearchRestClientProperties var10001 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var10000<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>var10001<span class="token operator">:</span><span class="token operator">:</span>getConnectionTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenNonNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span>Duration<span class="token operator">:</span><span class="token operator">:</span>toMillis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>builder<span class="token operator">:</span><span class="token operator">:</span>setConnectTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            var10000 <span class="token operator">=</span> map<span class="token punctuation">;</span>            var10001 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var10000<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>var10001<span class="token operator">:</span><span class="token operator">:</span>getReadTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenNonNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span>Duration<span class="token operator">:</span><span class="token operator">:</span>toMillis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>builder<span class="token operator">:</span><span class="token operator">:</span>setSocketTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>        proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//失败回调静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RestClientFallbackConfiguration</span> <span class="token punctuation">{</span>        <span class="token function">RestClientFallbackConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        RestClient <span class="token function">elasticsearchRestClient</span><span class="token punctuation">(</span>RestClientBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>        proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Rest高水平的客户端配置</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RestHighLevelClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RestHighLevelClientConfiguration</span> <span class="token punctuation">{</span>        <span class="token function">RestHighLevelClientConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        RestHighLevelClient <span class="token function">elasticsearchRestHighLevelClient</span><span class="token punctuation">(</span>RestClientBuilder restClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>restClientBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        RestClient <span class="token function">elasticsearchRestClient</span><span class="token punctuation">(</span>RestClientBuilder builder<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>RestHighLevelClient<span class="token operator">></span> restHighLevelClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RestHighLevelClient client <span class="token operator">=</span> <span class="token punctuation">(</span>RestHighLevelClient<span class="token punctuation">)</span>restHighLevelClient<span class="token punctuation">.</span><span class="token function">getIfUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> client <span class="token operator">!=</span> null <span class="token operator">?</span> client<span class="token punctuation">.</span><span class="token function">getLowLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Rest构建的配置文件，配置端口、连接时间、超时时间等信息</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>        proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RestClientBuilder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RestClientBuilderConfiguration</span> <span class="token punctuation">{</span>        <span class="token function">RestClientBuilderConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        RestClientBuilderCustomizer <span class="token function">defaultRestClientBuilderCustomizer</span><span class="token punctuation">(</span>ElasticsearchRestClientProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchRestClientConfigurations<span class="token punctuation">.</span>DefaultRestClientBuilderCustomizer</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        RestClientBuilder <span class="token function">elasticsearchRestClientBuilder</span><span class="token punctuation">(</span>ElasticsearchRestClientProperties properties<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>RestClientBuilderCustomizer<span class="token operator">></span> builderCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            HttpHost<span class="token punctuation">[</span><span class="token punctuation">]</span> hosts <span class="token operator">=</span> <span class="token punctuation">(</span>HttpHost<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>properties<span class="token punctuation">.</span><span class="token function">getUris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>createHttpHost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">[</span>x$<span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RestClientBuilder builder <span class="token operator">=</span> RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>hosts<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">setHttpClientConfigCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>httpClientBuilder<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builderCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>httpClientBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> httpClientBuilder<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">setRequestConfigCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>requestConfigBuilder<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builderCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>requestConfigBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestConfigBuilder<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builderCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> HttpHost <span class="token function">createHttpHost</span><span class="token punctuation">(</span>String uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createHttpHost</span><span class="token punctuation">(</span>URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> HttpHost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> HttpHost <span class="token function">createHttpHost</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> HttpHost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> HttpHost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类中，可以使用Autowired注入，类名方法名需要一致</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式一：类名+方法名匹配 </span><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> RestHighLevelClient restHighLevelClient<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者，自定义变量名称</span> <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"restHighLevelClient"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span></code></pre><h5 id="1-5-使用java操作索引"><a href="#1-5-使用java操作索引" class="headerlink" title="1.5 使用java操作索引"></a>1.5 使用java操作索引</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudyesApiApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//autowried需要指定类型以及相关的方法</span>    <span class="token comment" spellcheck="true">/*spring系列的配置类命名一般都是一下格式：        XXXAutoConfigration  xxxProperties    */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"restHighLevelClient"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试索引的创建  需要有REST请求 request请求</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testCreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建索引请求</span>        CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行创建请求</span>        CreateIndexResponse createIndexResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>createIndexResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//测试获取索引,只能够判断索引是否存在</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testExistIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指定需要获取的索引</span>        GetIndexRequest getIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getIndex<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试删除索引</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testDeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        DeleteIndexRequest delete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AcknowledgedResponse delete1 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>delete<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到删除对象，打印删除对象的isAcknowledged的结果，为true表示删除成功</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete1<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-6-使用java操作文档"><a href="#1-6-使用java操作文档" class="headerlink" title="1.6 使用java操作文档"></a>1.6 使用java操作文档</h5><p>创建实体类对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>文档的增、删、改、查以及批量插入操作操作</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//添加文档</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testCreateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建请求</span>        IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.设置规则  PUT /itxing_index/_doc/1</span>        request<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>TimeValue<span class="token punctuation">.</span><span class="token function">timeValueSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.放置请求的数据</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.客户端发送请求</span>        IndexResponse indexResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexResponse<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回命令的状态，第一次为created</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取文档  GET /index/doc/1</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testIsExist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        GetRequest getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取返回的_source的上下文</span>        getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getRequest<span class="token punctuation">.</span><span class="token function">storedFields</span><span class="token punctuation">(</span><span class="token string">"_none_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取文档的信息</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testDocInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        GetRequest getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GetResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取的文档内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的全部内容和命令是一样的</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新文档信息,Post /index/_doc/id/_update</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">updateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        UpdateRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        UpdateResponse update <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回更新的状态  成功返回OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除文档</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">deleteDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        DeleteRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DeleteResponse delete <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回删除的结果状态  成功返回OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//批量查询、插入</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testBulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bulkRequest<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"10s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三2"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李二狗"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//批量插入操作</span>            bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>                    <span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BulkResponse bulk <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bulk<span class="token punctuation">.</span><span class="token function">hasFailures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断结果是否失败，false 代表成功；true代表成功</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//查询操作</span>    <span class="token comment" spellcheck="true">/*    * SearchRequest 搜索请求    * SearchSourceBuilder 条件构造    * HighlightBuilder构建高亮    * TermQueryBuilder精确查询    * MatchAllQueryBuilder 全部匹配查询    * */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"itxing_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建搜索条件</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//term精确匹配</span>        TermQueryBuilder termQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匹配全部查询</span><span class="token comment" spellcheck="true">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeValue</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建分页，起始页，每页展示的条数</span><span class="token comment" spellcheck="true">//        sourceBuilder.from();</span><span class="token comment" spellcheck="true">//        sourceBuilder.size()</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse search <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>SearchHit document<span class="token operator">:</span>search<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-项目实战"><a href="#2-项目实战" class="headerlink" title="2. 项目实战"></a>2. 项目实战</h4><h5 id="2-1-爬虫"><a href="#2-1-爬虫" class="headerlink" title="2.1 爬虫"></a>2.1 爬虫</h5><p>从jd的网站获取自己想要的数据，最后将其创建索引放在自己的ES中，最后可以进行搜索，爬虫使用的是jsoup类。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--jsoup解析网页--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>爬去的页面主要是搜索的页面<a href="https://search.jd.com/Search" target="_blank" rel="noopener">jd搜索页面</a></p><p>使用F12可以查看元素中的信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/20071907.png" alt="查看京东官网的页面元素"></p><p>创建一个Content对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/7/19-studyes * 创建一个爬取内容的对象 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String img<span class="token punctuation">;</span>    <span class="token keyword">private</span> String price<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将其中的图片的地址信息、价格以及书名爬取下来。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/7/19-studyes */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HtmlParseUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlParseUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseJD</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Content<span class="token operator">></span> <span class="token function">parseJD</span><span class="token punctuation">(</span>String keyWords<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接网络，获取请求  不能获取ajax</span>        String url <span class="token operator">=</span> <span class="token string">"https://search.jd.com/Search?keyword="</span><span class="token operator">+</span>keyWords<span class="token operator">+</span><span class="token string">"&amp;enc=utf-8"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析网页</span>        Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所有js中的方法都能够获取，J_goodsList该参数是京东页面的商品信息的顶级div元素</span>        Element element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"J_goodsList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(element.html());</span>        <span class="token comment" spellcheck="true">//获取所有的li元素</span>        Elements li <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历所有的li标签</span>        <span class="token comment" spellcheck="true">//大部分的网站将资源延迟加载</span>        List<span class="token operator">&lt;</span>Content<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Element el<span class="token operator">:</span>li<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取商品图片的路径、价格、商品名</span>            String img <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String price <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String title <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span>price<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span>title<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Content content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span><span class="token function">setImg</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-2-前后端分离"><a href="#2-2-前后端分离" class="headerlink" title="2.2 前后端分离"></a>2.2 前后端分离</h5><p>前端使用vue，首先创建vue的项目导入vue的相关js库，创建一个空文件夹，cmd进入命令行，输入以下命令：</p><blockquote><p>npm install  vue    #前端框架</p><p>npm install  axios  #  这个是前后端通信的</p></blockquote><p>将创建的vue项目中的两个js文件放置在当前的springboot项目下使用，具体的springboot-ES仿jd项目完整版程序放置在gitee上，适用于新手练习使用。</p><p>前端的课程依旧推荐狂神说java系列的课程。</p><p><a href="https://www.bilibili.com/video/BV18E411a7mC" target="_blank" rel="noopener">vue学习视频</a></p><h5 id="2-3高亮显示"><a href="#2-3高亮显示" class="headerlink" title="2.3高亮显示"></a>2.3高亮显示</h5><p>高亮显示设置在于使用HighlightBuilder类对参数进行拼接、对高亮的结果进行解析，前端使用vue将前端信息嵌入，项目中的service文件中对不设置高亮以及设置高亮使用了两个方法（searchPage和searchPageHighLight）</p><p>后期的学习：Es的集群学习、ES大数据学习、ES的docker环境搭建</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>从2020年疫情期间遇到狂神，再也没有办法听别的老师的课程了，秦老师讲的是真的好，作为一个技术新人，如何在该行业走的久、走得远是一个值得思考的问题，对于高校的老师们真的很无语，要么就是研究所谓的人生哲学、有的就是金钱、有的就是职称，这个社会我们还是没有发言的权力，自己还是要努力，才能看起来没那么费力，一起努力！！！</p>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch(一)</title>
      <link href="/2020/07/18/elasticsearch/"/>
      <url>/2020/07/18/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><p><a href="https://www.bilibili.com/video/BV17a4y1x7zq?p=2" target="_blank" rel="noopener">狂神说ElasticSearch</a></p><p>大数据的时代发展</p><p>ElasticSearch是基于Lucene的一个封装的，Lunece是一个用于文本搜索的函数库，其目标是为各种小型应用软件加入全文检索功能。(作者Doug  Cutting)</p><p>Google针对Nutch中的一些问题，分享了一篇谷歌文件系统GFS(Google File System)，为了解决存储海量搜索的数据而设计的文件系统。随后基于GFS实现了分布式文件存储系统，并命名为NDFS(Nutch  Distributed File System)，还介绍了Mapreduce编程模型，用于大规模数据集的并行分析运算。</p><p>大数据发展，谷歌发表论文BigTable，是一种分布式数据存储系统，用来处理海量数据的非关系性数据库。Doug  Cutting 在Hadoop系统中加入了BigTable并命名为HBase。(Hadoop 、Hbase、MapReduce)。</p><h4 id="Lunece"><a href="#Lunece" class="headerlink" title="Lunece"></a>Lunece</h4><p><a href="https://itxingzai.xyz/2020/06/09/lunece-solr-gong-ju/" target="_blank" rel="noopener">lunece的简单使用</a> 自己看着之前的老师做的简单的实验，能够提供简单的入门。</p><p>lunece是一套信息检索工具包，jar包，不包含搜索引擎系统。其包含有索引结构、读写索引的工具、排序、搜索工具。</p><p>lunece和ElasticSearch关系：</p><p>ElasticSearch是基于Lucene的一个封装和增强。</p><p>Es是一个开源的分布式文件检索引擎，其近乎实时的存储、检索数据；本身扩展性好，可扩展到上百台服务器，处理pb级别的数据。使用Restful api来隐藏lunece的复杂性，让全文索引更简单。</p><p>ELK技术：ElasticSearch+logstash+Kibana</p><h4 id="ElasticSearch与Solr"><a href="#ElasticSearch与Solr" class="headerlink" title="ElasticSearch与Solr"></a>ElasticSearch与Solr</h4><blockquote><p>1.ElasticSearch解压就可以使用，Solr需要安装，稍微复杂</p><p>2.Solr利用Zookeeper进行分布式管理，ES自身携带分布式协调管理功能</p><p>3.Solr支持更多格式的数据，利用json、xml、csv,ES仅支持json文件格式</p><p>4.Solr官网提供的功能更多，ES本身侧重与核心功能，大多数使用第三方插件提供，使用Kibana</p><p>5.Solr查询更快，但更新索引慢，ES建立索引快，实时性查询快</p><p>6.Solr更加成熟，开源社区、用户更成熟，ES相对开发维护者较少，学习使用成本高</p></blockquote><p>ElasticSearch安装</p><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">官网下载地址</a></p><p>推荐网友提供的华为镜像下载地址(好用)：</p><p>windows下应该下载三个工具的zip文件，直接解压即用。</p><p><a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&O=D" target="_blank" rel="noopener">ElasticSearch</a></p><p><a href="https://mirrors.huaweicloud.com/logstash/?C=N&O=D" target="_blank" rel="noopener">logstash</a></p><p><a href="https://mirrors.huaweicloud.com/kibana/?C=N&O=D" target="_blank" rel="noopener">kibana</a></p><p>按照狂神的课程，个人下载的是7.6.2版本。</p><p>解压es，其目录结构</p><blockquote><p>bin 启动文件</p><p>config</p><p>​    log4j   日志配置文件</p><p>​    jvm.options  java虚拟机相关设置，如果买的阿里云等设备内存等较小，需将jvm参数调节</p><p>​    elasticsearch.yml elasticsearch的相关配置文件，默认端口号9200</p><p>lib 相关的jar包</p><p>modules  功能模块</p><p>plugins 插件</p></blockquote><p>启动bin目录下elasticsearch.bat，将es启动。</p><p>在浏览器端输入：localhost:9200会有</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"AFABW-809061946"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"cu6diFVuQ36nvenA9z2PPw"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.6.2"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"zip"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">}</span></code></pre><h4 id="安装可视化界面"><a href="#安装可视化界面" class="headerlink" title="安装可视化界面"></a>安装可视化界面</h4><p>课程中学习使用的head插件</p><p>依赖环境node.js</p><p>从github下载elasticsearch-head：<a href="https://github.com/mobz/elasticsearch-head">传送门</a></p><p>加压后进入目录，使用npm命令进行安装</p><blockquote><p>npm install </p><p>npm run start</p><p>##使用淘宝镜像更快一些</p><p>cnpm install </p><p>cnpm run start</p></blockquote><p>浏览器中的会出现跨域的问题，因此需要设置：elasticsearch.yml</p><pre class=" language-xml"><code class="language-xml">http.cors.enabled: truehttp.cors.allow-origin: "*"</code></pre><p>测试连接访问：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071801.png" alt="启动eshead"></p><p>将索引作为一个数据库。</p><h4 id="简单了解ELK"><a href="#简单了解ELK" class="headerlink" title="简单了解ELK"></a>简单了解ELK</h4><blockquote><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。</p></blockquote><p><a href="https://www.jianshu.com/p/d66bfe7e9127" target="_blank" rel="noopener">了解更多</a></p><p><img src="http://upload-images.jianshu.io/upload_images/17509846-c79fe100a45cc6f5.png" alt="结构图查看"></p><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在es索引中的数据。使用kibana，可以通过各种图表进行高级数据分析与展示，kibana使得海量数据更容易理解。操作简单、基于浏览器的用户界面可以快速穿件仪表板(dashboard)实时显示es查询动态。</p><p><a href="https://www.elastic.co/cn/kibana" target="_blank" rel="noopener">kibana官方网站</a></p><p>ELK基本为拆箱即用，解压后即可使用，kibana依赖node.js环境，解压时间比较长久，默认的端口是5601。</p><p>启动kibana，bin目录下的libana.bat，打开即可使用。</p><p>浏览器输入localhost:5601,可视化界面以及开发工具。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071802.png" alt="使用kibana自带开发工具"></p><p>开发工具(postman、head、谷歌插件)</p><p>该工具支持汉化，在config文件夹下找到kibana.yml文件，更改文件后重启</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span></code></pre><p>汉化后的kibana</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071803.png" alt="汉化的kibana"></p><h4 id="Es核心概念"><a href="#Es核心概念" class="headerlink" title="Es核心概念"></a>Es核心概念</h4><p>专业名词：集群、节点、索引、类型、文档、分片、映射。Es是面向文档</p><table><thead><tr><th>Relational DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>types (不常用，会被弃用)</td></tr><tr><td>行(rows)</td><td>documents</td></tr><tr><td>字段(columns)</td><td>fields</td></tr></tbody></table><p>Es中包含多个索引(数据库)，每个索引中可以包含多个类型，每个类型下又包含多个文档，每个文档包含有多个字段(列)。</p><p><strong>物理设计</strong> Es在后台把每个索引划分成多个分片，每份分片可以在集群中的不同服务器间迁移</p><p><strong>逻辑设计</strong> 一个索引类型中，包含有多个文档，当索引一篇文档时，寻找的顺序是索引&gt;&gt;类型&gt;&gt;文档id</p><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>lunece底层使用倒排序索引，这种结构适用于快速的全文索引，一个索引有文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。</p><p>举例：</p><blockquote><p>Study every day ,good good up to forever.</p><p>To forever,study every day,good good up.</p></blockquote><p>创建倒排序索引，首先将文档拆分成独立的词(tokens)，然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在那个文档中。下面的表格1表示出现过，0表示没有出现</p><table><thead><tr><th>term</th><th>doc1</th><th>doc2</th></tr></thead><tbody><tr><td>study</td><td>0</td><td>1</td></tr><tr><td>to</td><td>1</td><td>0</td></tr><tr><td>every</td><td>1</td><td>1</td></tr><tr><td>day</td><td>1</td><td>0</td></tr><tr><td>forever</td><td>1</td><td>1</td></tr><tr><td>Study</td><td>1</td><td>0</td></tr><tr><td>To</td><td>1</td><td>0</td></tr><tr><td>up</td><td>1</td><td>1</td></tr></tbody></table><p>例如搜索to forever时，文档1的匹配度更高，权重更大，文档二权重更低。</p><p>在Es中索引被分为多个分片，每份分片是lunece的索引，因此，一个elasticsearch索引是由多个lunece索引组成的。</p><p>Es核心是：索引、字段类型(映射关系)、文档</p><h4 id="IK分词插件"><a href="#IK分词插件" class="headerlink" title="IK分词插件"></a>IK分词插件</h4><p>0.ik分词器简单介绍</p><p>分词：即把中文或者别的划分为一个个关键字，我们在搜索时会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每一个字看做一个词，这是不符合中文分词的要求的，因此需要使用第三方的分词器解决分词问题。</p><p>ik分词器中的算法：ik_smart和ik_max_word，其中<strong>ik_smart为最少切分</strong>,<strong>ik_max_word为最细粒度划分</strong></p><p>1.下载ik分析器</p><p>下载对应的ik版本，个人使用的是ES7.6.2，因此下载的ik为7.6.2，视频中使用7.6.1</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.6.2">ik分析器7.6.2版本下载地址</a></p><p>2.将ik分词的jar包放在ES中的插件plugins目录下</p><p>3.重启Es、以及kibana</p><p>4.使用  elasticsearch-plugin  list  命令查看ik分词器插件是否安装</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071804.png" alt="查看ik插件"></p><p>5.使用kibana进行测试</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071805.png" alt="ik分词的两种算法"></p><p><strong>自己定义ik分词器字典</strong></p><p>在es的插件的ik分词文件夹下的config文件夹下有IKAnalyzer.cfg.xml将自己的词典配置在该文件中</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 自己定义的词典文件mytest.dic--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mytest.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071806.png" alt="自定义字典词汇"></p><p>如果自己有什么样的分词就自己定义分词的词典。</p><h4 id="Rust风格"><a href="#Rust风格" class="headerlink" title="Rust风格"></a>Rust风格</h4><p>Rust是一种软件架构风格，不是一种标准，是提供一组设计原则和约束条件。主要用于客户端和服务器之间的交互类的软件，基于该风格的软件更加简洁更有层次，易于实现缓存机制。</p><p>Rust命令说明：</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>创建文档(指定文档id)</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称</td><td>创建文档(随机文档id)</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_search</td><td>查询所有数据</td></tr></tbody></table><p><strong>1.创建一个索引</strong></p><blockquote><p>##向服务器发送一个创建索引的命令</p><p>PUT /索引名/<del>类型名</del>/文档id</p><p>{请求体}</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071807.png" alt="创建一个索引文档"></p><p>使用head查看如下，完成了索引的创建</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071808.png" alt="head查看文档信息"></p><p><strong>2.关于类型</strong></p><blockquote><p> 字符串类型:   text  keyword</p><p>数值类型：long、integer、short、byte、double、float、half float、scaled   float</p><p>日期类型：date</p><p>布尔类型：boolean</p><p>二进制类型：binary</p></blockquote><p><strong>3.创建索引规则</strong></p><p>类似于关系型数据库建表的过程</p><pre class=" language-json"><code class="language-json">PUT /test2<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建规则</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071809.png" alt="创建一个索引规则"></p><p>获取规则</p><blockquote><p>GET /test2</p></blockquote><p>查看默认的信息，默认会给定数据类型。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071810.png" alt="默认创建文档以及类型查看"></p><blockquote><p>#使用命令查看索引库信息</p><p>GET _cat/indices?v</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/es20071811.png" alt="kibana查看索引库信息"></p><p>修改操作：</p><pre class=" language-json"><code class="language-json">POST /test3/_doc/<span class="token number">1</span>/_update<span class="token punctuation">{</span>  <span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"星仔"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>删除索引</p><blockquote><p>##使用DELETE命令删除指定的索引或文档</p><p>DELETE test3</p></blockquote><h4 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h4><p>较难，需掌握，基本操作与之前的索引较为相似</p><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><p>1.添加一个用户(文档操作相当于关系型数据库中的一行数据)</p><pre class=" language-json"><code class="language-json">PUT /xing/user/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"最棒的星仔"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"技术学习者"</span><span class="token punctuation">,</span><span class="token string">"暖男"</span><span class="token punctuation">,</span><span class="token string">"阳光"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>2.更新数据</p><pre class=" language-json"><code class="language-json">PUT /xing/user/<span class="token number">3</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xiaomei"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"职业前台"</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"旅游"</span><span class="token punctuation">,</span><span class="token string">"美女"</span><span class="token punctuation">,</span><span class="token string">"会聊"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>POST更新</p><pre class=" language-json"><code class="language-json">POST /xing/user/<span class="token number">2</span>/_update<span class="token punctuation">{</span>  <span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"使用E滑步"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.简单的查询</p><blockquote><p>GET xing/user/2    ##使用id查询</p><p>GET xing/user/_search?q=name:itxing   ##name精确匹配</p></blockquote><h5 id="复杂操作"><a href="#复杂操作" class="headerlink" title="复杂操作"></a>复杂操作</h5><p>排序、分页、高亮、模糊查询、精准查询</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询自定义字段的信息</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"desc"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>对匹配的结果进行升序(asc)或降序(desc)排序，以及对数据分页，起始页以及每页显示的数据条数。</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"asc"</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>使用rust风格的分页：  /search/{current}/{pagesize}</p><p>多条件查询，使用布尔值进行查询</p><p><strong>must命令：</strong>多个条件全部符合，是一个且的关系</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">26</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>should命令:</strong>多个条件只要符合一个就将其返回，是一个或的关系</p><p><strong>must_not命令：</strong> 多个命令不符合的，相当于非的关系</p><p>过滤器</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"lt"</span><span class="token operator">:</span> <span class="token number">26</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>gt   大于</p><p>gte   大于等于</p><p>lt   小于</p><p>lte   小于等于</p></blockquote><p>匹配多个条件,多个条件使用空格分开</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token string">"男 技术"</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>精确查询</p><p>term命令：直接通过倒排序索引指定的词条进程精确查找的</p><p>关于分词：term直接查询精确的值  match会使用分词器解析(先分析文档，然后再通过分析的文档进行查询)</p><h5 id="两个类型-重要"><a href="#两个类型-重要" class="headerlink" title="两个类型(重要)"></a>两个类型(重要)</h5><p>text类型和keyword类型</p><pre class=" language-json"><code class="language-json">//该分词不会将text中的内容拆分进行处理GET _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"itxing学java"</span><span class="token punctuation">}</span>//该分词将每个字符拆分进行处理GET _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"itxing学java"</span><span class="token punctuation">}</span></code></pre><p><strong>keyword类型的字段不会被分词器解析</strong></p><p>多个值精确匹配解析</p><pre class=" language-json"><code class="language-json">GET testdb/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"t1"</span><span class="token operator">:</span> <span class="token string">"22"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"t2"</span><span class="token operator">:</span> <span class="token string">"25"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>高亮查询</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing学java"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义高亮条件</p><pre class=" language-json"><code class="language-json">GET xing/user/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing学java"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"pre_tags"</span><span class="token operator">:</span> <span class="token string">"&lt;p class='key' style='color:red'>"</span><span class="token punctuation">,</span>     <span class="token property">"post_tags"</span><span class="token operator">:</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">,</span>     <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机的相关知识点</title>
      <link href="/2020/06/27/ji-suan-ji-ji-chu/"/>
      <url>/2020/06/27/ji-suan-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="计算机中的相关知识点-较杂"><a href="#计算机中的相关知识点-较杂" class="headerlink" title="计算机中的相关知识点(较杂)"></a>计算机中的相关知识点(较杂)</h4><p>注：为了面试将计算机底层知识进行相关复习</p><h4 id="计算机的由来"><a href="#计算机的由来" class="headerlink" title="计算机的由来"></a>计算机的由来</h4><p>(听的是马老师的公开，讲的计算机的底层，但是课程较短)</p><p>cpu制作过程：沙子+铜+胶水+特定的工艺+特殊金属</p><blockquote><p>沙子脱氧-》石英-》二氧化硅-》提纯-》硅锭-》切割-》晶圆-》涂抹光刻胶-》光刻-》蚀刻-》清除光刻胶-》电镀-》抛光-》铜层-》测试-》切片-》封装</p></blockquote><p>计算机的发展：</p><blockquote><p> 硅-》加入特殊元素-》P、N半导体-》PN结-》二极管-》场效应管-》逻辑开关</p></blockquote><p>逻辑开关实现：与门、或门、非门（异或门）进而实现加法器，借助内存存储指令控制硬件</p><p>(图片来自马士兵课堂的ppt)</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/computer2020062707.png" alt="计算机底层"></p><p>ALU计算单元，PC存储指令当前的地址</p><p>计算机中各种存储器存取速度：</p><table><thead><tr><th></th><th>需要cpu周期</th><th>大约需要时间</th></tr></thead><tbody><tr><td>主存</td><td></td><td>约60-80纳秒</td></tr><tr><td>QPI总线传输</td><td></td><td>约20ns</td></tr><tr><td>L3 Cache</td><td>约40-45 cycles</td><td>约15ns</td></tr><tr><td>L2 Cache</td><td>约10cycles</td><td>约3ns</td></tr><tr><td>L1 Cache</td><td>约3-4 cycles</td><td>约1ns</td></tr><tr><td>寄存器</td><td>1 cycle</td><td>仅次于cpu</td></tr></tbody></table><p>一个cpu多核，每个核有自己的L1、L2缓存，共享L3缓存。</p><p>计算机的底层的缓存：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/computer20070101.png" alt="image-20200701193008397"></p><p>缓存一致性协议：一个cpu中的缓存经过修改(modified)那么就需要通过总线通知另一个cpu或者是另一个核与之相关的缓存设置为无效(invalid)，底层通过缓存锁来实现缓存的数据的一致性。</p><h4 id="相关的名词解释："><a href="#相关的名词解释：" class="headerlink" title="相关的名词解释："></a>相关的名词解释：</h4><p>MIPS(Million instructions per second):每秒处理的百万级的机器语言指令数</p><p>CPI(cycle per instruction)：每条指令执行时所花费的平均时钟数</p><p>IPC(Instruction per clock)每个时钟周期平均可执行的指令数量</p><p>MFLOPS(Million Floating - Point Operations per Second)每秒百万个浮点操作</p><p>GBN：后退N帧协议传输数据</p><p>FCFS：先来先服务</p><p>HRN：最高响应比优先</p><p>SPF：短作业优先</p><p>HPF：基于优先调度算法</p><p>ARP协议的功能：根据IP地址查询MAC地址</p><p>CSMA/CD：带冲突检测的载波侦听多路存取</p><p>SMTP：邮件传输协议</p><p>PPP：点到点协议</p><p>IP：网络间相互连协议</p><p>FTP：文件传输协议</p><p>FDDI：双环令牌传递拓扑结构</p><p>SDU(服务数据单元)：层与层之间</p><p>PDU(协议数据单元) ：同层之间</p><p>Seek time：寻道时间</p><p>Rotational delay 旋转延迟</p><p>Actual data transfer time 实际数据传输时间</p><p>Mutex：互斥锁</p><p>rdlock：读写锁</p><p>cond：条件变量</p><p>Semophone：信号量</p><h4 id="数据库的相关笔记简单梳理"><a href="#数据库的相关笔记简单梳理" class="headerlink" title="数据库的相关笔记简单梳理"></a>数据库的相关笔记简单梳理</h4><p>mysql中实现的四种通信协议：</p><blockquote><p>TCP/IP协议、Unix Socket协议 、share Memory协议、Name Pipes协议</p></blockquote><p>数据库的模式：是数据库全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图</p><p>1.内模式：</p><blockquote><p>又称存储模式，一个数据只有一个内模式，它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式</p></blockquote><p>2.外模式：</p><blockquote><p>又称子模式或用户模式，它是数据库用户能够看到和使用的局部数据的逻辑结构和特征描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p></blockquote><p>逻辑数据模型一般有：</p><blockquote><p>1.层次模型：有且仅有一个节点没有父节点，其余节点仅有一个父节点</p><p>2.网状模型：允许一个以上无双亲节点，一个节点可以有多个双亲节点</p><p>3.关系模型：单一的数据模型</p><p>4.面向对象数据模型：把实体表示为类，一个类表示实体属性和实体行为</p><p>5.对象关系数据模型</p><p>6.半结构化模型</p></blockquote><p>mysql中的键：</p><blockquote><p> 1.主键：当有多个候选码时，可以选择一个作为主码，选定的候选码称为主键</p><p>2.外键：关系R中的一个属性组，它不是R的一个候选码，但它与另一个关系S的候选码相对应</p><p>3.侯选建：关系中的一个属性组，其值能唯一标识一个元祖，若属性组中去掉任何一个属性，其不具备有这一性质</p></blockquote><p>索引：</p><blockquote><p>聚集索引：该索引中键值的逻辑顺序决定了表中相应的行的物理顺序</p><p>非聚集索引:数据存储在一个地方，索引存储另一个地方，索引带有指针指向数据的存储位置</p><p>Hash索引：利用哈希函数，计算存储地址，检索时不像BTree</p></blockquote><p>Hash数据结构与BTree数据结构的差异</p><blockquote><p>1.Hash索引只能用于等值的比较，不能满足范围查找</p><p>2.优化器不能使用Hash索引来加速orderby操作</p><p>3.使用Hash索引时，Mysql不能确定在两个值之间大约有多少行，如果将一个MyIsam表改为Hash索引的Memory表，会降低查询效率</p><p>4.Hash索引只能使用整个关键字来搜索一行</p></blockquote><h4 id="进程线程通信"><a href="#进程线程通信" class="headerlink" title="进程线程通信"></a>进程线程通信</h4><table><thead><tr><th></th><th>Windows</th><th>Linux</th></tr></thead><tbody><tr><td>线程</td><td>互斥量、信号量、临界区、事件</td><td>互斥量、信号量、条件变量</td></tr><tr><td>进程</td><td>管道、消息队列、共享内存、信号量、套接字</td><td>管道、信号、消息队列、共享内存、信号量、套接字</td></tr></tbody></table><p>死锁的原因</p><blockquote><p>1.系统资源不足</p><p>2.进程运行推进的顺序不合适</p><p>3.资源分配不当</p></blockquote><p>死锁的必要条件</p><blockquote><p>1.互斥条件</p><p>2.请求与保持</p><p>3.不可剥夺条件</p><p>4.循环等待条件</p></blockquote><p>两段锁协议:</p><blockquote><p>1.在对任何数据进行读、写操作之前，首先申请并获得对该数据的封锁</p><p>2.在释放一个封锁之后，事务不再申请和获得其他任何封锁</p></blockquote><h4 id="数制的转换"><a href="#数制的转换" class="headerlink" title="数制的转换"></a>数制的转换</h4><p>R进制转换成呢过十进制：按权展开法 </p><blockquote><p>二进制到十进制</p><p>10100.01 = 1*2^4+1*2^2+1*2^-2</p><p>八进制到十进制</p><p>604.01 = 6*8^2+4*8^0+1*8^-1</p></blockquote><p>十进制转R进制:短除法</p><blockquote><p>94(十进制)—-&gt; 1011110(二进制)</p></blockquote><p>二进制转八进制</p><blockquote><p>10001110(二进制)将其三位一划分，利用8421码进行计算</p><p>10(2) 001(1) 110(6) = 216(八进制)</p></blockquote><p>二进制转换十六进制</p><blockquote><p>10001110 将二进制以四位进行划分，利用8421码进行计算</p><p>1000(8) 1110(E) = 8E(十六进制)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机的相关知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文本处理</title>
      <link href="/2020/06/27/wen-ben-shu-ju-yu-chu-li/"/>
      <url>/2020/06/27/wen-ben-shu-ju-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<h4 id="文本数据预处理"><a href="#文本数据预处理" class="headerlink" title="文本数据预处理"></a>文本数据预处理</h4><p>毕业试验数据的要求被迫学习python处理数据</p><p>文本预处理一般包括分词、词形归一化、删除停用词。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062702.png" alt="文本处理流程"></p><p>中文分词没有明确的分割符，英文中以空格分词：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020060703.png" alt="中文分词"></p><p>安装Anaconda</p><p><a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">下载地址</a></p><p>个人环境：windows7+python3.8+Anaconda4.3.30版本</p><p>安装ntlk库</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##安装nltk并测试是否成功</span><span class="token keyword">import</span> nltknltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##测试</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> brownbrown<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用命令安装：</p><p>conda install ntlk</p><p>查看安装是否成功：</p><p>conda  list</p></blockquote><p>安装jieba分词库</p><blockquote><p>使用命令安装：</p><p>conda install  jieba</p><p>如果出现错误，使用以下命令：</p><p>pip install jieba</p></blockquote><p>打开jupyter  notebook</p><p>创建python文件，测试结巴分词：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jiebasentence <span class="token operator">=</span> <span class="token string">'谁都不要说抱歉'</span>term_list <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'全模式分词:'</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>term_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>词性标注：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062704.png" alt="中文分词词性"></p><p>ntlk中词性标注：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062705.png" alt="ntlk库词表"></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062706.png" alt="ntlk词表2"></p><p><img src="F:%5C%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%5Cblogimages%5Cpaper%5Cpython2020062708.png" alt="安装并测试词性标注"></p><p>归一化处理：</p><p>英文中单词的变种词汇，例如一个单词可以是一般现在时，过去式和将来时等，在信息检索和文本挖掘时，需要对一个词的不同形态进行规范化，以提高文本的处理效率。一般分为词干提取和词形还原。目前有波特词干提取器和拉卡斯特词干提取器，NLTK库中有一个强大的还原模块，使用WordNetLemmatizer类来获取根词。</p><p>词形还原是去除词缀以获得单词的基本形式，称之为根词，存在于字典，不同于词干，词干不一定是标准的单词，也可能不存在与词典中，获取单词的基本形式的方法是lemmatize()</p><p>使用波特词干提取器将单词还原词形</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>porter <span class="token keyword">import</span> PorterStemmerporter_obj <span class="token operator">=</span> PorterStemmer<span class="token punctuation">(</span><span class="token punctuation">)</span>porter_obj<span class="token punctuation">.</span>stem<span class="token punctuation">(</span><span class="token string">'watched'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##结果是watch</span></code></pre><p>使用兰卡斯特提取器将单词还原</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>lancaster <span class="token keyword">import</span> LancasterStemmerlan_obj <span class="token operator">=</span> LancasterStemmer<span class="token punctuation">(</span><span class="token punctuation">)</span>lan_obj<span class="token punctuation">.</span>stem<span class="token punctuation">(</span><span class="token string">'watching'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###结果是watch</span></code></pre><p>使用Snow提取器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> SnowballStemmersnow_obj <span class="token operator">=</span> SnowballStemmer<span class="token punctuation">(</span><span class="token string">"english"</span><span class="token punctuation">)</span>snow_obj<span class="token punctuation">.</span>stem<span class="token punctuation">(</span><span class="token string">'listened'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##结果是listen</span></code></pre><p>使用wordNet还原词形</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> WordNetLemmatizerword_obj <span class="token operator">=</span> WordNetLemmatizer<span class="token punctuation">(</span><span class="token punctuation">)</span>word_obj<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###book</span></code></pre><p>但是对于多词形的词汇需要传入参数：例如went</p><pre class=" language-python"><code class="language-python">word_obj<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span><span class="token string">"went"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##结果还是went</span><span class="token comment" spellcheck="true">##传入参数将其还原</span>word_obj<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span><span class="token string">"went"</span><span class="token punctuation">,</span>pos <span class="token operator">=</span> <span class="token string">'v'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##结果为go</span>word_obj<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">,</span>pos <span class="token operator">=</span> <span class="token string">'v'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##结果为do</span></code></pre><p>停用词处理</p><blockquote><p>文本中包含有大量的停用词，作为文本分析对于停用词多的文本处理结果可能会导致结果偏差较大，因此需要将文本中的停用词去除，停用词一般是人工产生的，因此需要自己去寻找一些停用词表</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##导入停用词包</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords<span class="token comment" spellcheck="true">##定义语句</span>text <span class="token operator">=</span> <span class="token string">'I hope I am not chosen,but loved.'</span><span class="token comment" spellcheck="true">##不使用停用词进行分词</span>words <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##获取停用词</span>stop_words <span class="token operator">=</span> stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">'english'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##去除停用词</span>remain_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">:</span>        remain_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>remain_list<span class="token punctuation">)</span></code></pre><p>文本情感分类：</p><p>大致分为两种分类：基于情感词典和基于机器学习</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062801.png" alt="文本分类"></p><p>情感词典：</p><blockquote><p>1.对文本进行分词操作，从中找出情感词、否定词以及程度副词</p><p>2.判断每个情感之前是否有否定词及程度副词，将它之前的否定词和程度副词划分为一组</p><p>3.将所有组的得分加起来，得分大于0的归于正向，小于0的归于负向</p></blockquote><p>基于机器学习的方式</p><p>朴素贝叶斯思想：</p><blockquote><p>对于给出的待分类项，求解在此项出现的条件下各个类别出现的概率，哪个最大，就认为此待分类项属于哪个类别</p></blockquote><p>nltk.classify模块中的NaiveBayesClassifiler类实现了朴素贝叶斯分类算法，该类中有一个类方法train()用于训练集来训练模型</p><blockquote><p>train(cls,labeled_featuresets,estimator = ELEProbDist)</p><p>labeled_featuresets   表示分类的特征集列表</p></blockquote><p>文本情感分类的测试：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> nltk  <span class="token comment" spellcheck="true"># 导入nlek库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> brown  <span class="token comment" spellcheck="true"># 导入brown模块</span><span class="token keyword">import</span> jieba  <span class="token comment" spellcheck="true"># 导入结巴分词库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> WordNetLemmatizer  <span class="token comment" spellcheck="true"># 导入词形还原库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords <span class="token comment" spellcheck="true"># 导入停用词</span><span class="token comment" spellcheck="true">##准备训练的数据</span>text_one <span class="token operator">=</span> <span class="token string">"This is wonderful book"</span>text_two <span class="token operator">=</span> <span class="token string">"I like reading this book very much"</span>text_three <span class="token operator">=</span> <span class="token string">"This book reads well."</span>text_four <span class="token operator">=</span> <span class="token string">"This book is not good"</span>text_five <span class="token operator">=</span> <span class="token string">"This is a very bad book."</span><span class="token comment" spellcheck="true"># 导入贝叶斯分类器</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>classify <span class="token keyword">import</span> NaiveBayesClassifier<span class="token comment" spellcheck="true"># 定义用作分类的函数</span><span class="token keyword">def</span> <span class="token function">pret_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 文本预处理</span>    words <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    wordnet <span class="token operator">=</span> WordNetLemmatizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span>wordnet<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 删除停用词操作</span>    remain_list <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span>         stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">"english"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>remain_list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 遍历得到对应的词是否在文本中</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>word<span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> remain_list<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 测试函数</span>pret_text<span class="token punctuation">(</span>text_one<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#构建训练文本，自定义训练集文本情感编码</span>train_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>pret_text<span class="token punctuation">(</span>text_one<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>pret_text<span class="token punctuation">(</span>text_two<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>pret_text<span class="token punctuation">(</span>text_three<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>pret_text<span class="token punctuation">(</span>text_four<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>pret_text<span class="token punctuation">(</span>text_five<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#得到训练模型</span>model <span class="token operator">=</span> NaiveBayesClassifier<span class="token punctuation">.</span>train<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型测试1  结果为1，表示好评</span>text_test <span class="token operator">=</span> <span class="token string">"I like this Movie very much"</span>model<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>pret_text<span class="token punctuation">(</span>text_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型测试2   结果为-1，表示差评</span>text_test <span class="token operator">=</span> <span class="token string">"This film is very bad"</span>model<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>pret_text<span class="token punctuation">(</span>text_test<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>文本相似度计算：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> nltk  <span class="token comment" spellcheck="true"># 导入nlek库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> brown  <span class="token comment" spellcheck="true"># 导入brown模块</span><span class="token keyword">import</span> jieba  <span class="token comment" spellcheck="true"># 导入结巴分词库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> WordNetLemmatizer  <span class="token comment" spellcheck="true"># 导入词形还原库</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords <span class="token comment" spellcheck="true"># 导入停用词</span><span class="token comment" spellcheck="true"># 文本相似度的计算</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> FreqDisttext1 <span class="token operator">=</span> <span class="token string">"John likes to watch movies"</span>text2 <span class="token operator">=</span> <span class="token string">"John also likes to watch football games"</span>all_text <span class="token operator">=</span> text1<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>text2<span class="token comment" spellcheck="true">#分词处理</span>words <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>all_text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建FreqDist对象，记录每个词出现的频率</span>freq_dist <span class="token operator">=</span> FreqDist<span class="token punctuation">(</span>words<span class="token punctuation">)</span>most_comman_words <span class="token operator">=</span> freq_dist<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到单词的位置</span><span class="token keyword">def</span> <span class="token function">find_postion</span><span class="token punctuation">(</span>comman_words<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    查找常用单词的位置    """</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    pos <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> comman_words<span class="token punctuation">:</span>        result<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> pos        pos<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true">##调用方法</span>pos_dict <span class="token operator">=</span> find_postion<span class="token punctuation">(</span>most_comman_words<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_to_vector</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将文本转换成词频向量    """</span>    freq_vec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>    <span class="token comment" spellcheck="true"># 在常用的单词列表中计算词频</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token keyword">in</span> list<span class="token punctuation">(</span>pos_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            freq_vec<span class="token punctuation">[</span>pos_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> freq_vec<span class="token comment" spellcheck="true"># 向量化</span>vec1 <span class="token operator">=</span> text_to_vector<span class="token punctuation">(</span>nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">)</span>vec2 <span class="token operator">=</span> text_to_vector<span class="token punctuation">(</span>nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#导入向量计算的包，计算文本相似度</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>util <span class="token keyword">import</span> cosine_distancecosine_distance<span class="token punctuation">(</span>vec1<span class="token punctuation">,</span>vec2<span class="token punctuation">)</span></code></pre><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>Matplotlib(Python2D绘图库)、Seaborn(专攻于统计可视化)、Bokeh(交互式绘图库)</p><p>常见的图形图标分为柱状图、折线图、条形图(横向柱状)、饼图、散点图箱型图</p><p>Matplotlib绘制图形，其使用figure()函数创建画布，该模块默认有一个Figure对象，该对象可以理解为一张空白的画布，用于容纳图表的各种组件。</p><p>figure函数中的参数有：</p><blockquote><p>num – 表示图形的编号或名称</p><p>figsize –用于设置画布尺寸</p><p>facecolor  – 用于设置画板的背景颜色</p><p>edgecolor  –用于显示边框颜色</p></blockquote><p>绘制简单的图像：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020262802.png" alt="绘制简单的图像"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#手动绘制画布对象,设置背景颜色</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>facecolor <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用subplot函数绘制单个子图</p><p>subplot()函数会将整个绘图区域等分为nrows*ncols的矩阵区域，从左到右、从上到下的顺序对每一个区域进行编号，依次递增。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062803.png" alt="subplot函数的示例"></p><p>subplots()函数绘制创建多个子图</p><blockquote><p>subplots()函数会返回一个元祖，元祖的第一个元素为Figure对象(画布)，第二个元素为Axes对象(子图)或Axes对象数组。如果创建的是单个子图，返回的是一个Axes对象，否则返回的是一个Axes对象数组。</p></blockquote><p>简单绘制四个图形：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062804.png" alt="创建多个子图"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  创建四个画布，将随机数绘制在最后一个画布中</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>random_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>random_arr<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>python的pyplot中的函数有</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062805.png" alt="pyplot中添加标签函数"></p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">,</span>data<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">'y=x^2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">,</span>data<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">'y = x^3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示中文，加入一下两行代码就可以在绘制ide图片中写入中文字符</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft YaHei'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#中文显示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 设置标题</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"title 标题"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x轴"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"y轴"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置刻度信息</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置显示图例说明</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc <span class="token operator">=</span> <span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>绘制不同图表的函数</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062806.png" alt="绘制不同图标的函数"></p><blockquote><ol><li>scatter方法</li></ol><p>matplotlib.pyplot.scatter(x,y,s=None,c=None,marker = None,alpha=None,linewidths=None,…,**kwargs)</p><p>x,y – 表示x轴和y轴对应的数据</p><p>s – 指定点的大小</p><p>c – 指定散点图的颜色</p><p>marker – 表示绘制的散点类型</p><p>alpha – 表示点的透明度，接受0-1之间的小数</p><p>2.bar方法</p><p>bar(x,height,width,<em>,align=’center’,*</em>kwargs)</p><p>x  – 表示x轴的数据</p><p>height –表示条形的高度</p><p>width   –表示条形的宽度，默认0.8</p><p>color   –表示条形的颜色</p><p>edgecolor  —表示条形边框的颜色</p></blockquote><table><thead><tr><th>颜色</th><th>说明</th></tr></thead><tbody><tr><td>b(blue)</td><td>蓝色</td></tr><tr><td>g(green)</td><td>绿色</td></tr><tr><td>r(red)</td><td>红色</td></tr><tr><td>c(cyan)</td><td>青色</td></tr><tr><td>m(magenta)</td><td>品红</td></tr><tr><td>y(yellow)</td><td>黄色</td></tr><tr><td>k(black)</td><td>黑色</td></tr><tr><td>w(white)</td><td>白色</td></tr></tbody></table><p>标记风格：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062808.png" alt="部分参数"></p><p>绘制直方图：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr_random <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 绘制直方图</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>arr_random<span class="token punctuation">,</span>bins <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'g'</span><span class="token punctuation">,</span>alpha <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062809.png" alt="柱状图"></p><p>散点图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr_random <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#散点图 scatter</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062811.png" alt="image-20200628115053640"></p><p>柱状图：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr_random <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 柱状图 对比两部电影在1 - 5月份的票房收入</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y2 <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 确定柱子的宽度</span>width <span class="token operator">=</span> <span class="token number">0.3</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>width <span class="token operator">=</span> width<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token operator">+</span>width<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>width <span class="token operator">=</span> width<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062812.png" alt="image-20200628115315615"></p><p>点线图：</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">,</span>linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/python2020062813.png" alt="image-20200628115603591"></p><p>保存图标使用savefig(),需要在show方法之前进行调用7yuhbn </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lence</title>
      <link href="/2020/06/09/lunece-solr-gong-ju/"/>
      <url>/2020/06/09/lunece-solr-gong-ju/</url>
      
        <content type="html"><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p><strong>全文检索：</strong></p><blockquote><p>全文索引时将存储在数据库中的整本书或整篇文章中的任意内容信息查找出来的技术。它可以根据需要获取全文中有关章，节，段，句，词等信息，也可以进行各种统计和分析。</p><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此又一定结构的数据进行搜索，从而达到搜索相对较快的目的。<strong>根据文档建立索引再通过索引搜索称为全文索引</strong></p></blockquote><p><strong>倒排索引：</strong></p><blockquote><p>全文索引通常使用倒排索引来实现。倒排索引同B+树索引一样，也是一种索引结构。</p><p>注意：创建索引是对语汇单元索引，<strong>通过词语找文档</strong></p></blockquote><p>全文索引的搜索流程：</p><p>原始文档===》创建索引===》建立索引库===》提供查询接口</p><p>创建索引的流程：</p><p>确定要搜索的内容===》获取原始文档===》创建文档===》分析文档===》索引文档</p><p>搜索的过程：</p><p>用户通过搜索界面===》创建查询===》执行搜索===》渲染结果</p><h4 id="原始文件的获取"><a href="#原始文件的获取" class="headerlink" title="原始文件的获取"></a>原始文件的获取</h4><p>原始文件可以使互联网的网页、数据库的数据、磁盘上的文件</p><p>互联网上的数据可以使用爬虫技术将网页内容存储：</p><blockquote><p>Nutch(<a href="http://lucene.apache.org/nutch" target="_blank" rel="noopener">http://lucene.apache.org/nutch</a>), Nutch是apache的一个子项目，包括大规模爬虫工具，能够抓取和分辨web网站数据。</p><p>​    jsoup（<a href="http://jsoup.org/" target="_blank" rel="noopener">http://jsoup.org/</a> ），jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><p>​    heritrix（<a href="http://sourceforge.net/projects/archive-crawler/files/），Heritrix" target="_blank" rel="noopener">http://sourceforge.net/projects/archive-crawler/files/），Heritrix</a> 是一个由 java 开发的、开源的网络爬虫，用户可以使用它来从网上抓取想要的资源。其最出色之处在于它良好的可扩展性，方便用户实现自己的抓取逻辑。</p></blockquote><h4 id="创建文档对象"><a href="#创建文档对象" class="headerlink" title="创建文档对象"></a>创建文档对象</h4><p> 获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。</p><p><strong>注意：</strong>每个Document可以有多个Field，不同的Document可以有不同的Field，同一个Document可以有相同的Field（域名和域值都相同）</p><p>每个文档都有一个唯一的编号，就是文档id。</p><h4 id="Lunece下载"><a href="#Lunece下载" class="headerlink" title="Lunece下载"></a>Lunece下载</h4><p>Lucene是开发全文检索功能的工具包，并解压。</p><p><a href="http://lucene.apache.org/" target="_blank" rel="noopener">官方网站</a></p><p>需要的jar包：</p><blockquote><p>Lucene包：</p><p>lucene-core-4.10.3.jar</p><p>lucene-analyzers-common-4.10.3.jar</p><p>lucene-queryparser-4.10.3.jar</p><p>其它：</p><p>commons-io-2.4.jar</p><p>junit-4.9.jar</p></blockquote><h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><blockquote><p>第一步: Eclipse创建java工程，导入jar包</p><p>第二步：创建一个indexwriter对象</p><p>​    1.指定索引库的存放位置Directory</p><p>​    2.指定一个分析器，对文档内容进行分析</p><p>第三步：创建document对象</p><p>第四步：创建field对象，将field添加到document对象中。</p><p>第五步：使用indexwriter对象将document对象写入索引库，此过程进行索引创建。并将索引和document对象写入索引库。</p><p>第六步：关闭IndexWriter对象。</p></blockquote><p>Field域的属性</p><table><thead><tr><th>Field类</th><th>数据类型</th><th>Analyzed是否分析</th><th>Indexed是否索引</th><th>Stored是否存储</th><th>说明</th></tr></thead><tbody><tr><td>StringField(FieldName, FieldValue,Store.YES))</td><td>字符串</td><td>N</td><td>Y</td><td>Y或N</td><td>这个Field用来构建一个字符串Field，但是不会进行分析，会将整个串存储在索引中</td></tr><tr><td>LongField(FieldName, FieldValue,Store.YES)</td><td>Long型</td><td>Y</td><td>Y</td><td>Y或N</td><td>这个Field用来构建一个Long数字型Field，是否存储在文档中用Store.YES或Store.NO决定</td></tr><tr><td>StoredField(FieldName, FieldValue)</td><td>重载方法，支持多种类型</td><td>N</td><td>N</td><td>Y</td><td>这个Field用来构建不同类型Field不分析，不索引，但要Field存储在文档中</td></tr><tr><td>TextField(FieldName, reader)或TextField(FieldName, FieldValue, Store.NO)</td><td>流或字符串</td><td>Y</td><td>Y</td><td>Y或N</td><td>如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.</td></tr></tbody></table><h5 id="编写程序建立索引文件"><a href="#编写程序建立索引文件" class="headerlink" title="编写程序建立索引文件"></a>编写程序建立索引文件</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建索引方法与步骤</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLucene</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建java工程，导入jar包</span>        <span class="token comment" spellcheck="true">// 2.创建一个indexwriter对象File System Directory(FSDirectory对象)</span>        <span class="token comment" spellcheck="true">//该路径是将创建的索引存放的位置</span>        Directory director <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\javacode\\fileupload\\tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标准分析器</span>        Analyzer analy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//索引写配置</span>        IndexWriterConfig condig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>Version<span class="token punctuation">.</span>LATEST<span class="token punctuation">,</span> analy<span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexWriter indexw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>director<span class="token punctuation">,</span> condig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建document对象</span>        Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.创建field域对象</span>        File ff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>                <span class="token string">"E:\\百度云\\00_黑马JavaEE32期\\02_2016年7月北京黑马32期就业班\\【阶段14】SSM综合练习\\ssm综合练习\\day77\\Lucene&amp;solr\\01.参考资料\\mysource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> listfile <span class="token operator">=</span> ff<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> listfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取文件姓名</span>            String file_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// lunece中对于域的存储Field有四个子类:</span>            <span class="token comment" spellcheck="true">// TextField是对文件该文件进行拆除，建立索引，并保存,常对于姓名等文件</span>            <span class="token comment" spellcheck="true">// LongField建立long型的域,用于建立文件大小的索引</span>            <span class="token comment" spellcheck="true">// StoredField表示不进行拆分不进行索引但是进行保存，用于路径的域索引</span>            <span class="token comment" spellcheck="true">//</span>            Field fileNameField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取文件大小</span>            <span class="token keyword">long</span> file_size <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            Field fileSizeField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongField</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 文件路径</span>            String file_path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field filePathField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoredField</span><span class="token punctuation">(</span><span class="token string">"filePath"</span><span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 文件内容</span>            String file_content <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">readFileToString</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            Field fileContentField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"fileContent"</span><span class="token punctuation">,</span> file_content<span class="token punctuation">,</span> Store<span class="token punctuation">.</span>NO<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileNameField<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileSizeField<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filePathField<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileContentField<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用Indexwriter索引对象将field添加到document对象中，创建索引并将源文件写入</span>            indexw<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 5.关闭Indexwriter对象</span>        indexw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用like查看索引</p><h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h5><blockquote><p>第一步：创建一个Directory对象，也就是索引库存放的位置。</p><p>第二步：创建一个indexReader对象，需要指定Directory对象。</p><p>第三步：创建一个indexsearcher对象，需要指定IndexReader对象</p><p>第四步：创建一个TermQuery对象，指定查询的域和查询的关键词。</p><p>第五步：执行查询。</p><p>第六步：返回查询结果。遍历查询结果并输出。</p><p>第七步：关闭IndexReader对象</p></blockquote><h5 id="IndexSearch搜索方法"><a href="#IndexSearch搜索方法" class="headerlink" title="IndexSearch搜索方法"></a>IndexSearch搜索方法</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>indexSearcher.search(query, n)</td><td>根据Query搜索，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, filter, n)</td><td>根据Query搜索，添加过滤策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(query, n, sort)</td><td>根据Query搜索，添加排序策略，返回评分最高的n条记录</td></tr><tr><td>indexSearcher.search(booleanQuery, filter, n, sort)</td><td>根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记录</td></tr></tbody></table><p>查询程序</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据索引库，进行搜索程序</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建一个Directory对象，指向索引库位置</span>        Directory directory <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\javacode\\fileupload\\tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建一个indexReader对象，需要指定的Directory对象</span>        IndexReader indexRead <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建一个indexSearcher对象，需要指定IndexReader对象</span>        IndexSearcher indexSearch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>indexRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.创建一个TermQuery对象，指定查找的关键词以及查找的域</span>        <span class="token comment" spellcheck="true">// 搜索的方法有四个：</span>        <span class="token comment" spellcheck="true">// 1.indexSearcher.search(query,n)返回最高的n条记录</span>        <span class="token comment" spellcheck="true">// 2.indexSearcher.search(query,filter,n)添加过滤策略，返回最高n条记录</span>        <span class="token comment" spellcheck="true">// 3.indexSearcher.search(query,n,sort)添加排序策略，返回评分最高n条记录</span>        <span class="token comment" spellcheck="true">// 4.indexSearcher.search(booleanQuery,filter,n,sort)添加过滤策略，添加排序策略，返回n条记录</span>        Query query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermQuery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> <span class="token string">"java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.执行查询</span>        TopDocs topres <span class="token operator">=</span> indexSearch<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.返回查询结果，遍历查询结果并输出</span>        ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> scoreDocs <span class="token operator">=</span> topres<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ScoreDoc scdoc <span class="token operator">:</span> scoreDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> doc <span class="token operator">=</span> scdoc<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>            Document document <span class="token operator">=</span> indexSearch<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String filePath <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"filePath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileSize <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fileContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileName"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"filePath"</span> <span class="token operator">+</span> filePath <span class="token operator">+</span> <span class="token string">"fileSize"</span> <span class="token operator">+</span> fileSize <span class="token operator">+</span> <span class="token string">"fileContent"</span>                    <span class="token operator">+</span> fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 7.关闭IndexReader对象</span>        indexRead<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>Search方法需要指定匹配记录数量：indexSearcer.search(query,n)</p><p>TopDocs.totalHits：匹配索引库中所有记录的数量</p><p>TopDocs.scoreDocs：匹配相关度高的前边记录数组，scoreDocs的长度小于等于search方法指定的参数n</p></blockquote><p>三种分词器的测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看标准分析器的分词效果</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTokenStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建一个标准分析器对象</span>        <span class="token comment" spellcheck="true">//Analyzer analyzer = new StandardAnalyzer();</span>        <span class="token comment" spellcheck="true">// 2.二分法分词器</span>        <span class="token comment" spellcheck="true">//    Analyzer analyzer = new CJKAnalyzer();</span>        <span class="token comment" spellcheck="true">// 3.SmartChineseAnalyzer分词器，不可扩展</span>        <span class="token comment" spellcheck="true">// 4.第三方分词器，可扩展</span>        Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得tokenStream对象</span>        <span class="token comment" spellcheck="true">// 第一个参数：域名，可以随便给一个</span>        <span class="token comment" spellcheck="true">// 第二个参数：要分析的文本内容</span>        TokenStream tokenStream <span class="token operator">=</span> analyzer<span class="token punctuation">.</span><span class="token function">tokenStream</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"我爱中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加一个引用，可以获得每个关键词</span>        CharTermAttribute charTermAttribute <span class="token operator">=</span> tokenStream<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>CharTermAttribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加一个偏移量的引用，记录了关键词的开始位置以及结束位置</span>        OffsetAttribute offsetAttribute <span class="token operator">=</span> tokenStream<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>OffsetAttribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将指针调整到列表的头部</span>        tokenStream<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历关键词列表，通过incrementToken方法判断列表是否结束</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenStream<span class="token punctuation">.</span><span class="token function">incrementToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关键词的起始位置</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start->"</span> <span class="token operator">+</span> offsetAttribute<span class="token punctuation">.</span><span class="token function">startOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取关键词</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charTermAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 结束位置</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end->"</span> <span class="token operator">+</span> offsetAttribute<span class="token punctuation">.</span><span class="token function">endOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tokenStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>IK分词器的配置：文件命名IKAnalyzer.cfg.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典,在同级目录下创建ext.dic，自定义扩展的词--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ext.dic;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典,自定义停用的词--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>stopword.dic;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>第三方分析器：</p><blockquote><p> paoding： 庖丁解牛 <a href="https://code.google.com/p/paoding/" target="_blank" rel="noopener">https://code.google.com/p/paoding/</a> </p><p>mmseg4j：<a href="https://github.com/chenlb/mmseg4j-solr">https://github.com/chenlb/mmseg4j-solr</a></p><p> IK-analyzer：<a href="https://code.google.com/p/ik-analyzer/" target="_blank" rel="noopener">https://code.google.com/p/ik-analyzer/</a></p><p>ansj_seg： <a href="https://github.com/NLPchina/ansj_seg">https://github.com/NLPchina/ansj_seg</a></p><p>Jcseg：开源中国中搜索jcseg</p></blockquote><h4 id="索引库的维护"><a href="#索引库的维护" class="headerlink" title="索引库的维护"></a>索引库的维护</h4><p>向索引库添加document对象：</p><blockquote><p>第一步：先创建一个indexwriter对象</p><p>第二步：创建一个document对象</p><p>第三步：把document对象写入索引库</p><p>第四步：关闭indexwriter</p></blockquote><p>新增索引</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//创建方法获取IndexWriter对象</span>    <span class="token keyword">public</span> IndexWriter <span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Directory directory<span class="token operator">=</span>FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\\\javacode\\\\fileupload\\\\tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Analyzer analyzer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexWriterConfig condig<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>Version<span class="token punctuation">.</span>LATEST<span class="token punctuation">,</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexWriter indexw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span>condig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexw<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//添加索引操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取IndexWriter</span>        IndexWriter indexw<span class="token operator">=</span><span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Document元素</span>        Document doc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"FileN"</span><span class="token punctuation">,</span><span class="token string">"测试文件名"</span><span class="token punctuation">,</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"FileC"</span><span class="token punctuation">,</span><span class="token string">"测试文件名"</span><span class="token punctuation">,</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        indexw<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        indexw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>删除索引 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取IndexReader对象</span>    <span class="token keyword">public</span> IndexSearcher <span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建Directory对象，索引库的位置</span>        Directory directory<span class="token operator">=</span>FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\\\javacode\\\\fileupload\\\\tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个IndexReader对象，需要指定Directory对象</span>        IndexReader indexR <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据IndexReader创建IndexSearch对象</span>        IndexSearcher indexSearch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>indexR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.返回该对象</span>        <span class="token keyword">return</span> indexSearch<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除索引（全部）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAllDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取indexReader对象</span>        IndexWriter indexw<span class="token operator">=</span><span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.删除所有索引</span>        indexw<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.关闭indexWriter对象</span>        indexw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//条件删除索引</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取indexReader对象</span>        IndexWriter indexw<span class="token operator">=</span><span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.添加条件</span>        Query query<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TermQuery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span><span class="token string">"apache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.删除所有索引</span>        indexw<span class="token punctuation">.</span><span class="token function">deleteDocuments</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.关闭indexWriter对象</span>        indexw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>修改索引库文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建方法获取IndexWriter对象</span>    <span class="token keyword">public</span> IndexWriter <span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Directory directory<span class="token operator">=</span>FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\\\javacode\\\\fileupload\\\\tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Analyzer analyzer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexWriterConfig condig<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>Version<span class="token punctuation">.</span>LATEST<span class="token punctuation">,</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexWriter indexw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span>condig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexw<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取IndexWriter</span>        IndexWriter indexw<span class="token operator">=</span><span class="token function">getIndexWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Document元素</span>        Document doc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"FileN"</span><span class="token punctuation">,</span><span class="token string">"测试文件名"</span><span class="token punctuation">,</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"FileC"</span><span class="token punctuation">,</span><span class="token string">"测试文件名"</span><span class="token punctuation">,</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更改名字为java的索引</span>        indexw<span class="token punctuation">.</span><span class="token function">updateDocument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>doc<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>查询索引(难点)</p><blockquote><p>1）使用Lucene提供Query子类</p><p>​    Query是一个抽象类，lucene提供了很多查询对象，比如TermQuery项精确查询，NumericRangeQuery数字范围查询等。</p><p>2）使用QueryParse解析查询表达式</p><p>​    QueryParse会将用户输入的查询表达式解析成Query对象实例。</p></blockquote><p><strong>Query子类查询</strong></p><p>1.查询索引目录中的所有文档</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询操作，使用IndexReader对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取indexReader对象</span>        IndexSearcher indexSearch <span class="token operator">=</span> <span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建Qurey对象</span>        Query query<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MatchAllDocsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印查询结果</span>        <span class="token function">printResult</span><span class="token punctuation">(</span>indexSearch<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭资源</span>        indexSearch<span class="token punctuation">.</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.Term查询</p><p>TermQuery不使用分析器所以建议匹配不分词的Field域查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用Termquery查询</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTermQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            IndexSearcher indexSearcher <span class="token operator">=</span> <span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建查询对象</span>            Query query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermQuery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token string">"lucene"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行查询</span>            TopDocs topDocs <span class="token operator">=</span> indexSearcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//共查询到的document个数</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果总数量："</span> <span class="token operator">+</span> topDocs<span class="token punctuation">.</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历查询结果</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> topDocs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Document document <span class="token operator">=</span> indexSearcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//System.out.println(document.get("content"));</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//关闭indexreader</span>            indexSearcher<span class="token punctuation">.</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>3.数值范围的查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据数值类型进行查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testresByNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取indexReader对象</span>                IndexSearcher indexSearch <span class="token operator">=</span> <span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.创建Qurey对象</span>                Query query<span class="token operator">=</span>NumericRangeQuery<span class="token punctuation">.</span><span class="token function">newLongRange</span><span class="token punctuation">(</span><span class="token string">"fieldSize"</span><span class="token punctuation">,</span> 50l<span class="token punctuation">,</span> 200l<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打印查询结果</span>                <span class="token function">printResult</span><span class="token punctuation">(</span>indexSearch<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭资源</span>                indexSearch<span class="token punctuation">.</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.组合查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//组合查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBooleanQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取搜索对象</span>        IndexSearcher indexs<span class="token operator">=</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建组合查询对象</span>        BooleanQuery booleanquery<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BooleanQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加索引查询条件</span>        Query query1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TermQuery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"filedName"</span><span class="token punctuation">,</span><span class="token string">"apache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TermQuery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">"fieldName"</span><span class="token punctuation">,</span><span class="token string">"lunece"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将查询呢条件添加到查询对象中</span>        booleanquery<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>query1<span class="token punctuation">,</span>Occur<span class="token punctuation">.</span>MUST<span class="token punctuation">)</span><span class="token punctuation">;</span>        booleanquery<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>query2<span class="token punctuation">,</span>Occur<span class="token punctuation">.</span>MUST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据搜索对象以及查询条件查询</span>        <span class="token function">printResult</span><span class="token punctuation">(</span>indexs<span class="token punctuation">,</span>booleanquery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭资源</span>        indexs<span class="token punctuation">.</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>QueryParse</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//条件解析的对象查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        IndexSearcher indexReader <span class="token operator">=</span> <span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数 默认查询的域</span>        QueryParser queryParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"fieldName"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//*:*  域：值</span><span class="token comment" spellcheck="true">//        Query query = queryParser.parse("*:*");</span>        <span class="token comment" spellcheck="true">//多个域查询使用MultiFieldQueryParser对象</span>        Query query <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"fieldName:apache AND fieldName:lunece"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printResult</span><span class="token punctuation">(</span>indexReader<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        indexReader<span class="token punctuation">.</span><span class="token function">getIndexReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><p>使用Lucene实现站内搜索需要开发的工作量较大，主要表现在：索引维护、索引性能优化、搜索性能优化等.</p><blockquote><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。 </p><p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况</p></blockquote><p>Solr与Lunece的区别</p><blockquote><p>Lucene是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索引擎，Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索引擎。</p><p> Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。</p></blockquote><p>Solr下载</p><p><a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">官网下载地址</a></p><p>文件夹结构：</p><blockquote><p>bin：solr的运行脚本</p><p>contrib：solr的一些贡献软件/插件，用于增强solr的功能。</p><p>dist：该目录包含build过程中产生的war和jar文件，以及相关的依赖文件。</p><p>docs：solr的API文档</p><p>example：solr工程的例子目录：</p><p>​    example/solr：</p><p>​    该目录是一个包含了默认配置信息的Solr的Core目录。</p><p>example/multicore</p><p>​    该目录包含了在Solr的multicore中设置的多个Core目录。 </p><p> example/webapps：</p><p>  该目录中包括一个solr.war，该war可作为solr的运行实例工程。</p><p>licenses：solr相关的一些许可信息</p></blockquote><p>(还不是很清楚，后期补充)</p>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java搜索工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="/2020/06/03/qian-duan-vue-de-xue-xi/"/>
      <url>/2020/06/03/qian-duan-vue-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>Jquery简化DOM操作，Angular增进了模块化开发、React提出虚拟DOM技术、Vue是一种渐进式javaScript框架，渐进式就是逐步实现新特性、Axios是前端的通信框架，为了处理DOM元素。</p><h5 id="UI框架："><a href="#UI框架：" class="headerlink" title="UI框架："></a>UI框架：</h5><blockquote><p>Ant-Design:阿里出品</p><p>ElementUI、iview、ice：基于Vue的UI框架</p><p>Bootstrap：前端开源框架</p><p>AmazeUI：HTML5跨屏前端框架</p></blockquote><h5 id="javaScript构建工具"><a href="#javaScript构建工具" class="headerlink" title="javaScript构建工具:"></a>javaScript构建工具:</h5><blockquote><p>Babel:编译工具，主要用于浏览器不支持的ES新特性</p><p>WebPack:模块打包器，主要是用于打包、压缩、合并及按序加载</p></blockquote><h5 id="混合开发："><a href="#混合开发：" class="headerlink" title="混合开发："></a>混合开发：</h5><blockquote><p>云打包：Hbuild-&gt;HBuildX</p><p>本地打包:Cordova</p></blockquote><h5 id="微信小程序："><a href="#微信小程序：" class="headerlink" title="微信小程序："></a>微信小程序：</h5><blockquote><p>微信UI框架：WeUI</p></blockquote><h5 id="后端技术："><a href="#后端技术：" class="headerlink" title="后端技术："></a>后端技术：</h5><blockquote><p>Express:NodeJS框架</p><p>NPM：项目综合工具，类似于maven</p><p>YARN：NPM的替代方案，类似于Maven和Gradle的关系</p></blockquote><h5 id="前端模式："><a href="#前端模式：" class="headerlink" title="前端模式："></a>前端模式：</h5><blockquote><p>MVC：同步通信，Model、view、Controller</p><p>MVP：异步通信为主，Model、View、Presenter</p><p>MVVM：异步通信，Model、view、ViewModel</p></blockquote><h5 id="第一个VUE程序"><a href="#第一个VUE程序" class="headerlink" title="第一个VUE程序"></a>第一个VUE程序</h5><p>Idea安装vue插件：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20060301.png" alt="vue.js插件安装"></p><p>创建一个html文件，引入vue.js文件</p><p><a href="https://www.bootcdn.cn/vue/" target="_blank" rel="noopener">cdn下载获取引入连接</a></p><p><a href="[https://vuejs.bootcss.com/guide/index.html#%E8%B5%B7%E6%AD%A5](https://vuejs.bootcss.com/guide/index.html#起步)">VUE中文文档</a></p><script src="https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"></script><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;div id = "app">    {{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--model数据层--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span><span class="token string">"hello,Vue!"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>MVVM：Model-View - ViewModel是一种软件的架构设计模式，是一种简化用户界面的事件驱动编程方式。</p><blockquote><p>优点是：</p><p>低耦合，视图独立于Model变化和修改，一个ViewModel可以绑定到不同的View上</p><p>可复用：将一个视图逻辑放在ViewModel里，多个视图可重用该视图逻辑</p><p>独立开发：开发人员可以专注于业务逻辑和数据的开发，设计人员可以专注于页面设计</p><p>可测试：测试针对ViewModel进行</p></blockquote><h6 id="简单v-bind-title标签"><a href="#简单v-bind-title标签" class="headerlink" title="简单v-bind:title标签"></a>简单v-bind:title标签</h6><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;div id = "app">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        鼠标移动过来会有提示信息！！！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token string">"hello"</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h6 id="前端的判断、循环"><a href="#前端的判断、循环" class="headerlink" title="前端的判断、循环"></a>前端的判断、循环</h6><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--根据条件显示--></span>        &lt;h1 v-if = "type==='A'">成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>失败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>还行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">'A'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--li标签，循环放置数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{item.message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            items<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"星仔学vue"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"星仔学java"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"星仔学大数据"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--ol与ul标签ol显示带有数字ul显示带有小黑原点--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         {{item.message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         {{item.message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20060302.png" alt="代码样例"></p><h5 id="Vue的常用属性"><a href="#Vue的常用属性" class="headerlink" title="Vue的常用属性"></a>Vue的常用属性</h5><blockquote><p>1.el属性：用来指示vue编译器从什么位置解析vue语法，一个占位符</p><p>2.data属性:用来组织view中抽象出来的属性，将视图数据抽象出来存放到data中</p><p>3.template属性:用来设置模板，会替换页面元素，包括占位符</p><p>4.methods属性:放置页面中的业务逻辑，js方法一般都放置在methods中</p><p>5.render属性:创建真正的Virtual Dom</p><p>6.computed属性 : 用来计算</p><p>7.watch属性：监听数据变化  watch:function(new ,old){}</p></blockquote><p>Vue数据双向绑定</p><blockquote><p>vue.js是一个Mvvm框架，即<strong>数据双向绑定</strong>,双向绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。接受三个参数，要操作的对象、要定义或修改的对象属性名、属性描述符。</p></blockquote><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--数据双向绑定的小实例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;div id ="app">    <span class="token comment" spellcheck="true">&lt;!--下拉选择框的数据双向绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>---请选择---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>value:{{selected}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                selected<span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>Vue组件</p><blockquote><p>组件是可复用的Vue实例，将原始的html元素屏蔽.对于同一部分使用在多个场景中的代码进行抽取，进行组件的复用，提高代码的复用率</p></blockquote><p>vue自定义组件</p><p>需要注意：**命名是名字中间不能产生大写的字母，否则显示不出来</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nnnn</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in groceryList<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nnnn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//Vue.component("命名",{})，命名中不能有大小写字母不规范的使用，可以使用小写的段横斜风格：item-name</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'nnnn'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{ todo.text }}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            groceryList<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>text<span class="token punctuation">:</span><span class="token string">'瓜皮'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>text<span class="token punctuation">:</span><span class="token string">'憨皮'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>text<span class="token punctuation">:</span><span class="token string">'愁皮'</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>Axios异步通信</p><p>与ajax相比较：Ajax是一个异同网络请求，区别于传统的web开发中采用的同步方式，异步可以使的页面不用刷新也能实现数据的传输，用户体验感较好，但是其频繁地操作Dom元素</p><p>axios是基于Promise用于浏览器和nodejs的Http客户端，本质是对XHR的封装。面向新的浏览器旧版本不支持</p><p>fetch：前端技术发展的产物，Fetch API提供一个javaScript接口，用于访问和操作HTTP管道的部分。</p><p>Vue的生命周期</p><blockquote><p>Vue实例生命周期包含创建、初始化数据、编译模板、挂载DOM、渲染–更新–渲染、卸载等一系列过程。</p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="noopener">vue实例的生命周期</a></p><p>vue通过通信获取数据或者使用通信获取数据(json)，并显示</p><p>在自己的类路径下创建数据文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxing"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"balb "</span><span class="token punctuation">,</span>  <span class="token property">"page"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"isNonProfit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"韩城"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"xizhao"</span><span class="token punctuation">,</span>    <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"china"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"itxingzai"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"http://itxiangzai.xyz"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"itxing"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"http://itxiangzai.xyz"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"http://itxiangzai.xyz"</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>使用流式编程，设置自己的javaScript版本为ES6</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">v-clock</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{info.address.street}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//data方法，用于接受钩子方法的数据</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//请求参数放回的参数需要和json字符串一样</span>                info<span class="token punctuation">:</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        street<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                        city<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                        country<span class="token punctuation">:</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    url<span class="token punctuation">:</span> <span class="token keyword">null</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//钩子方法 链式编程是ES6的新特性axios.get('../data/data.json').then(response=>(console.log(response.data)));</span>            axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'../data/data.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>计算属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;div id = "app">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime1 :{{currentTime1()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime2 :{{currentTime2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//属性data</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">"Hello itxing"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            currentTime1<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回当前的时间戳</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span><span class="token punctuation">{</span>            currentTime2<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>插槽Slot,自定义组件，便于扩展</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;div id = "app">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in todoItems<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//为了扩展使用插槽的该娘</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;div>\                &lt;slot name="todo-title">&lt;/slot>\                &lt;ul>\                    &lt;slot name="todo-items">&lt;/slot>\                &lt;/ul>\            &lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-title"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{title}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;li>{{item}}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">"标题"</span><span class="token punctuation">,</span>            todoItems<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'linux'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h5 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h5><p>Vue-cli项目，前提是自己安装过node.js以及npm，可以切换到阿里的镜像，安装成功后，win+R输入cmd在命令行输入node   -v以及npm - v检测自己的环境是否安装成功</p><blockquote><p>1.配置中国镜像源</p><p>npm  install  cnpm   -g</p><p>或者，每次输入命令</p><p>npm install –registry = http: //registry.npm.taobao.org</p><p>2.安装脚手架</p><p>cnpm install vue-cli -g</p><p>测试安装： vue   list</p></blockquote><p>创建自己的项目</p><blockquote><p>vue init webpack  yourproject</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/vue20060501.png" alt="创建vue-cli项目"></p><blockquote><p>按照提示进入项目输入：</p><p>npm run dev</p></blockquote><p>根据提示的地址就可以访问了。</p><p>webpack</p><blockquote><p>npm install webpack -g</p><p>npm -install webpack-cli -g</p><p>测试:</p><p>webpack -v</p><p>webpack-cli -v</p></blockquote><p>使用webPack</p><p>1.创建一个空目录</p><p>2.创建一个modules文件夹，在下面创建一个hello.js文件,将文件使用exports暴露出去</p><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>itxing学java&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>3.同样目录下创建main.js文件,使用require命令引入之前的文件</p><pre class=" language-java"><code class="language-java">var hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hello<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.在项目路径下创建webpack.config.js文件名不可以改变,支出打包的文件以及输出的结果位置</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token string">'./modules/main.js'</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span><span class="token string">'./js/bundle.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>5.测试打包的文件</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist/js/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>vue的router路由</p><p>1.npm install vue-router  –save-dev </p><p>2.安装 element-ui -S</p><p>3.安装依赖</p><p>npm install</p><p>4.安装SASS加载器</p><p>cnpm install sass-loader node-sass –save-dev</p><p>5.启动测试</p><p>npm run dev</p></blockquote><p>Npm命令解释</p><blockquote><p>1.npm install moduleName  安装模块到项目目录下</p><p>2.npm install -g moduleName ：-g是将模块安装到全局，具体安装到那一个目录和npm  config  prefix有关</p><p>3.npm install -save moduleName : –save的意思是将模块安装到项目目录下，并在package文件的depencies节点写入依赖，-S为该命令的缩写</p><p>4.npm install -save-dev moduleName : –save-dev的意思是将模块安装到项目目录下，并在package文件的devDependence节点写入依赖，-D为该命令的缩写</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb基础 (二)</title>
      <link href="/2020/05/31/javaweb-ji-chu-er/"/>
      <url>/2020/05/31/javaweb-ji-chu-er/</url>
      
        <content type="html"><![CDATA[<p><a href="https://itxingzai.xyz/2020/05/29/javaweb-ji-chu/" target="_blank" rel="noopener">web基础一笔记</a></p><h5 id="1-Session、Cookie"><a href="#1-Session、Cookie" class="headerlink" title="1.Session、Cookie"></a>1.Session、Cookie</h5><p>会话：用户通过浏览器，访问web资源，关闭浏览器，此过程称之为会话。</p><p>为什么需要使用会话技术？</p><blockquote><p>因为<strong>Http协议是无状态</strong>的，也就是说每个客户访问服务器端资源时，服务器并不知道该客户端是谁，所以需要会话技术识别客户端的状态。<strong>会话技术是帮助服务器    记住客户端状态</strong>（区分客户端）</p></blockquote><p>会话技术有两种：Cookie和Session</p><blockquote><p><strong>Cookie</strong>：<strong>数据存储在客户端本地</strong>，减少服务器端的存储的压力，安全性不好，客户端    可以清除cookie</p><p><strong>Session</strong>：将<strong>数据存储到服务器端</strong>，安全性相对好，增加服务器的压力</p></blockquote><p>cookie简单实例，在一个Servlet的doGet方法中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 服务器</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文本输出流打印对象</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从客户端获取cookie</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"您上一次的访问时间是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断客户端是否有cookie</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取客户端传递的cookie对象数组</span>                Cookie cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取自己想要的cookie对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> lan <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lan<span class="token punctuation">)</span><span class="token punctuation">;</span>                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首次访问</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"欢迎您"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 服务器给客户端分配一个cookie</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义cookie的有效期</span>        <span class="token comment" spellcheck="true">//cookie.setMaxAge(24 * 60 * 60);</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>一个网站是否存在上限：</p><blockquote><p>一个cookie只能保存一个信息</p><p>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</p><p>Cookie大小有限制4kb</p><p>300个cookie是浏览器上限</p></blockquote><p>删除cookie</p><blockquote><p>不设置有效期，关闭浏览器时自动删除</p><p>有效期设置为0，相当于删除cookie</p></blockquote><p>Cookie常用的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建cookie</span>Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取客户端的cookie</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置cookie的有效期</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置cookie的携带路径</span>cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向客户端发送cookie</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>Cookie cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-Session回话"><a href="#2-Session回话" class="headerlink" title="2.Session回话"></a>2.Session回话</h5><blockquote><p>Session技术是将数据存储在服务器端的技术，会为每一个客户端都创建一个内存空间存储客户端的数据，但是客户端需要每次携带一个标识去服务器寻找自己的内存空间，所以Session是基于Cookie实现的，Session需要借助Cookie存储客户端唯一标示JSESSIONID</p></blockquote><p>session主要的问题:</p><blockquote><p>1.怎样获得属于本客户端的session对象（内存区域）？</p><p>2.怎样向session中存取数据（session也是一个域对象）？</p><p>3.session对象的生命周期？</p></blockquote><p>session的简单使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建session</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// geiSession中存储东西</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"星仔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Session的ID</span>        String id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断session是不是新创建的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session成功创建"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>http包中的信息：</p><p><img src="F:%5C%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%5Cblogimages%5CjavaBasic%5Cweb20053101.png" alt="image-20200531173749797"></p><p>session与cookie的区别</p><blockquote><p>1.Cookie是把用户数据写给用户的浏览器，客户端保存数据</p><p>2.Session把用户数据写到独占的Session中，服务器端保存</p><p>3.Session对象由服务器创建</p></blockquote><p>Session使用场景：</p><p>保存一个登录用户的信息、购物车信息</p><p>常用的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建session</span>HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// geiSession中存储自定义的数据</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取Session的ID</span>String id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取session</span>HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的数据放在session域中，使用session进行获取</span>Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除session域中的数据信息</span>session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// session注销</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>常见面试题:</p><blockquote><p>Session的生命周期：</p><p>创建：第一次执行request.getSession()时创建</p><p>销毁：</p><pre><code> 1.服务器关闭时销毁</code></pre><p>​    2.设置session的过期时间</p><p>​    3.手动销毁session  session.invalidate();</p><p>session的作用范围：</p><p>默认在一次会话中，一次会话中任何资源公用一个Session对象</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span></code></pre><p>前面的问题已经可以回答了：</p><p><strong>问题1.怎样获得属于本客户端的session对象（内存区域）？</strong></p><blockquote><p>HttpSession session = req.getSession();</p></blockquote><p><strong>问题2.怎样向session中存取数据（session也是一个域对象）？</strong></p><blockquote><p>// geiSession中存储自定义的数据<br>Person person = new Person(“星仔”, 25);<br>session.setAttribute(“name”, person);</p><p>//获取信息</p><p>erson person = (Person) session.getAttribute(“name”);</p><p>//删除数据</p><p>session.removeAttribute(String name);</p></blockquote><p><strong>问题3.session对象的生命周期？</strong> 见上面(何时创建？何时销毁？作用范围？)</p><h5 id="3-JSP技术"><a href="#3-JSP技术" class="headerlink" title="3.JSP技术"></a>3.JSP技术</h5><p>java Server pages：java服务端页面，和Servlet一样，用于动态web技术</p><p>jsp脚本：</p><blockquote><p>&lt;%java代码%&gt;    内部的java代码翻译到service方法内部</p><p>&lt;%=java变量或表达式%&gt;  会被翻译到service方法内部out.print()；</p><p>&lt;%！java代码%&gt;    会被翻译成servlet的成员的内容</p></blockquote><p>jsp注释：不同的注释可见范围是不同的</p><blockquote><p>1.使用html的注释：&lt;！–注释–&gt;  可见范围jsp源码、翻译后servlet、页面html源码</p><p>2.使用java的注释：//注释   /*多行注释*/  可见范围jsp  翻译后的servlet</p><p>3.jsp注释：&lt;%–注释–%&gt;  可见范围  jsp源码可见</p></blockquote><p>jsp的本质就是servlet  (jsp运行原理)</p><blockquote><p>jsp在第一次被访问时会被Web容器翻译成servlet。</p><p>第一次访问—-&gt;helloServlet.jsp—-&gt;helloServlet_jsp.java—-&gt;编译运行</p></blockquote><pre class=" language-java"><code class="language-java">Eclipse查看自己项目编译后的jsp文件转换成的java源码，其放置路径\workspace\<span class="token punctuation">.</span>metadata\<span class="token punctuation">.</span>plugins\org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>wst<span class="token punctuation">.</span>server<span class="token punctuation">.</span>core\tmp0\work\Catalina\localhost\自己的项目名\org\apache\jsp</code></pre><p>idea只不过jsp源码位置</p><pre class=" language-java"><code class="language-java">C<span class="token operator">:</span>\Users\Administrator\<span class="token punctuation">.</span>IntelliJIdea2018<span class="token number">.2</span>\system\tomcat\Unnamed_ideaproject\work\Catalina\localhost\JavaWeb\org\apache\jsp</code></pre><p>例如：index.jsp被翻译成一个Servlet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">index_jsp</span> <span class="token keyword">extends</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>HttpJspBase</span>    <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>JspSourceDependent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//逻辑代码</span><span class="token punctuation">}</span></code></pre><p>jsp被翻译为Servlet后其中的方法有：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//jsp的初始化方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jsp的service方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jsp的Destory方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>jsp被翻译后，内置的对象有:(9大内置对象)</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>PageContext pageContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上下文对象</span>    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession session <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//session</span>    <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext application<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//applicationContext</span>    <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletConfig config<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//config</span>    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>JspWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//out</span>    <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//page</span><span class="token comment" spellcheck="true">//还有service方法传入的request对象和response对象</span><span class="token comment" spellcheck="true">//HttpServletRequest request;HttpServletResponse response;</span></code></pre><p>jsp被翻译后，输出页面的增加的代码有：</p><pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pageContext <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getPageContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span>                  null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> _jspx_page_context <span class="token operator">=</span> pageContext<span class="token punctuation">;</span>application <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_jspx_out <span class="token operator">=</span> out<span class="token punctuation">;</span></code></pre><p>在jsp中的java代码和html代码进行分开输出</p><p>jstl、EL表达式：导入maven的依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入jstl便签库的头：</p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %></code></pre><p>引入是如果出错为JSTL解析错误，将jstl的包和stand的jar包放在tomcat中的lib中。</p><p>javaBean：java的实体类，便于与关系型数据库做映射</p><p>有特定的写法：</p><blockquote><p>必须有无参构造函数</p><p>属性必须私有化</p><p>必须有对象的get/set方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb基础 (一)</title>
      <link href="/2020/05/29/javaweb-ji-chu/"/>
      <url>/2020/05/29/javaweb-ji-chu/</url>
      
        <content type="html"><![CDATA[<p><strong>注：之前学过，再次进行复习与巩固</strong></p><h4 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h4><h5 id="1-基本概念："><a href="#1-基本概念：" class="headerlink" title="1.基本概念："></a>1.基本概念：</h5><h6 id="1-1-简单介绍"><a href="#1-1-简单介绍" class="headerlink" title="1.1 简单介绍"></a>1.1 简单介绍</h6><p>静态web：html、css，提供给所有人看的数据始终不会发生改变</p><p>动态的web：提供给所有人的数据始终发生变化，每个人不同时间，不同地点看到也不同，技术有Servlet/jsp，ASP,PHP</p><h6 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h6><p>可以提供浏览器访问的程序，资源存放在某一个ip之上，使用URL进行访问，使用tomcat将应用程序放在服务器上。</p><blockquote><p>一个web应用包含有：html、css、js、jsp、servlet、jar包、配置文件</p></blockquote><h6 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h6><blockquote><p>*.htm  *.html  直接使用浏览器访问的静态页面</p></blockquote><p>静态web的缺点：Web页面无法动态更新，所有用户看到同一个页面，使用前端技术js等伪动态，并且无法与数据库交互</p><h6 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h6><p>缺点是：动态资源出错需要系统重新更新和维护</p><p>优点是：可以与数据库交互，页面数据动态，用户界面显示不同</p><h5 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2.web服务器"></a>2.web服务器</h5><p>ASP：微软，国内最早流行的  在html中嵌入VB脚本，可以放在IIS服务器上运行</p><p>PHP：开发速度快，功能强，代码简单，但无法承载大的访问量</p><p>jsp/servlet：基于java语言的，可以承担三高问题</p><p>服务器Tomcat：服务器是一种被动的操作，用来处理用户的一些请求和用户一些响应信息。(安装前需要有jdk环境)</p><h5 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h5><h6 id="3-1下载地址：官方地址"><a href="#3-1下载地址：官方地址" class="headerlink" title="3.1下载地址：官方地址"></a>3.1下载地址：<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="noopener">官方地址</a></h6><h6 id="3-2-tomcat目录结构："><a href="#3-2-tomcat目录结构：" class="headerlink" title="3.2 tomcat目录结构："></a>3.2 tomcat目录结构：</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20052901.png" alt="tomcat文件目录"></p><blockquote><p>bin：脚本目录</p><p>​    启动脚本：startup.bat</p><p>​    停止脚本：shutdown.bat</p><p>conf：配置文件目录 (config /configuration)</p><p>​    核心配置文件：server.xml</p><p>​    用户权限配置文件：tomcat-users.xml</p><p>​    所有web项目默认配置文件：web.xml</p><p>lib：依赖库，tomcat和web项目中需要使用的jar包</p><p>logs：日志文件.</p><p>​    localhost_access_log.<em>.txt tomcat记录用户访问信息，星</em>表示时间。</p><p>​    例如：localhost_access_log.2016-02-28.txt</p><p>temp：临时文件目录，文件夹内内容可以任意删除。</p><p>webapps：默认情况下发布WEB项目所存放的目录。</p><p>work：tomcat处理JSP的工作目录。</p></blockquote><h5 id="4-Http协议"><a href="#4-Http协议" class="headerlink" title="4.Http协议"></a>4.Http协议</h5><h6 id="4-1-简单介绍："><a href="#4-1-简单介绍：" class="headerlink" title="4.1 简单介绍："></a>4.1 简单介绍：</h6><blockquote><p>HTTP，超文本传输协议（HyperText Transfer Protocol)是互联网上应用最为广泛的    一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为    了提供一种发布和接收HTML页面的方法</p></blockquote><h6 id="4-2-http协议的组成"><a href="#4-2-http协议的组成" class="headerlink" title="4.2 http协议的组成"></a>4.2 http协议的组成</h6><blockquote><p>Http协议由<strong>Http请求和Http响应组成</strong>，当在浏览器中输入网址访问某个网站时，    你的浏览器会将你的请求封装成一个<strong>Http请求发送给服务器</strong>站点，服务器接收到请    求后会组织响应数据封装成<strong>一个Http响应返回给浏览器</strong>。即没有请求就没有响应。 </p></blockquote><h6 id="4-3http请求"><a href="#4-3http请求" class="headerlink" title="4.3http请求"></a>4.3http请求</h6><p>请求行、请求头、空行、请求体</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20052902.jpg" alt="http请求"></p><p>请求行：</p><blockquote><p>请求方式：POST、GET</p><p>请求的资源：/DemoEE/form.html</p><p>协议版本：HTTP/1.1</p><p>​     HTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开。</p><p>​     HTTP/1.1，发送请求，创建一次连接，获得多个web资源，保持连接。</p></blockquote><p>请求头：是一种键值对形式表示的客户端信息</p><table><thead><tr><th>常见请求头</th><th>描述</th></tr></thead><tbody><tr><td>Referer</td><td>浏览器通知服务器，当前请求来自何处。</td></tr><tr><td>Cookie</td><td>与会话有关技术，用于存放浏览器缓存的cookie信息</td></tr><tr><td>User-Agent</td><td>浏览器通知服务器，客户端浏览器与操作系统相关信息</td></tr><tr><td>Connection</td><td>保持连接状态。Keep-Alive 连接中，close 已关闭</td></tr><tr><td>Host</td><td>请求的服务器主机名</td></tr><tr><td>Content-Type</td><td>如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码</td></tr><tr><td>Accept</td><td>浏览器可支持的MIME类型。文件类型的一种描述方式</td></tr><tr><td>Accept-Encoding</td><td>浏览器通知服务器，浏览器支持的数据压缩格式</td></tr><tr><td>Accept-Language</td><td>浏览器通知服务器，浏览器支持的语言。</td></tr></tbody></table><p>请求体：</p><p>当请求方式是<strong>post</strong>的时，<strong>请求体会有请求的参数</strong>；如果请求方式为<strong>get</strong>，那么请求参数不会出现在请求体中，会<strong>拼接在url地址</strong>后面</p><h6 id="4-4-http响应"><a href="#4-4-http响应" class="headerlink" title="4.4 http响应"></a>4.4 http响应</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20052903.jpg" alt="http响应"></p><p>响应行 : http协议、状态码、状态信息</p><blockquote><p>常见状态码：</p><p>200 :请求成功     302 :请求重定向     304 :请求资源没有改变，访问本地缓存</p><p>404 :请求资源不存在。通常是用户路径编写错误,也可能是服务器资源已删除</p><p>500 ：服务器内部错误。通常程序抛异常</p></blockquote><p>响应头:键值对形式的信息</p><table><thead><tr><th>常见请求头</th><th>描述</th></tr></thead><tbody><tr><td>Location</td><td>指定响应的路径，需要与状态码302配合使用，完成跳转</td></tr><tr><td>Content-Type</td><td>响应正文的类型（MIME类型）</td></tr><tr><td>Content-Disposition</td><td>通过浏览器以下载方式解析正文取值：attachment;filename=xx.zip</td></tr><tr><td>Set-Cookie</td><td>与会话相关技术。服务器向浏览器写入cookie</td></tr></tbody></table><p>响应体:响应体是服务器回写给客户端的页面正文，浏览器将正文加载到内存，然后解析渲染,显示页面内容</p><h5 id="5-Servlet-web核心技术"><a href="#5-Servlet-web核心技术" class="headerlink" title="5.Servlet(web核心技术)"></a>5.Servlet(web核心技术)</h5><h6 id="5-1-简介："><a href="#5-1-简介：" class="headerlink" title="5.1 简介："></a>5.1 简介：</h6><blockquote><p> Servlet 运行在服务端的Java小程序，是sun公司提供一套规范（接口），用来处理客户端请求、响应给浏览器的动态资源。但servlet的实质就是java代码，通过java的API    动态的向客户端输出内容</p></blockquote><h6 id="5-2-Servlet使用"><a href="#5-2-Servlet使用" class="headerlink" title="5.2 Servlet使用"></a>5.2 Servlet使用</h6><blockquote><p>1.创建类实现Servlet接口</p><p>2.覆盖尚未实现的service方法</p><p>3.在web.xml中进行servlet的相关配置</p></blockquote><p>(注：实际开发中的自定义的Servlet不会实现Servlet接口，因为其中需要实现的方法过多，一般<strong>继承HttpServlet类</strong>)</p><blockquote><p>1.创建类继承HttpServlet接口</p><p>2.覆盖doGet和doPost方法</p><p>3.在web.xml中进行servlet的相关配置</p></blockquote><h6 id="5-3-Servlet的API"><a href="#5-3-Servlet的API" class="headerlink" title="5.3 Servlet的API"></a>5.3 Servlet的API</h6><p>Servlet接口中的方法有：init、service、destory</p><blockquote><p>init(ServletConfig  config)方法：第一次创建Servlet对象的时候执行</p><p>service(ServletRequest   request,ServletResponse  response)每次有请求时都会执行</p><p>destory()：servlet销毁时执行</p></blockquote><p>HttpServlet类中的方法：</p><blockquote><p>init()、doGet(HttpServletRequest  req ,HttpServletResponse  req)、doPost(HttpServletRequest  req ,HttpServletResponse  rep)、destory()</p></blockquote><p>Servlet的生命周期：</p><blockquote><p>何时创建？ 默认第一次访问时创建</p><p>何时销毁？服务器关闭时销毁</p><p>每次必须执行的方法是：service(ServletRequest   req,ServletResponse  rep)方法</p></blockquote><h6 id="5-4-Servlet的配置"><a href="#5-4-Servlet的配置" class="headerlink" title="5.4 Servlet的配置"></a>5.4 Servlet的配置</h6><p>配置文件web.xml中servlet配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>全类名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servler-name</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servler-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>其中url-pattern的配置方式：</p><blockquote><p>1.完全匹配   <url-pattern>/helloServlet</url-pattern></p><p>2.目录匹配  <url-pattern>/aaa/bbb/*</url-pattern></p><p>3.扩展名匹配  <url-pattern>*.abc</url-pattern></p></blockquote><p><strong>不可混用</strong></p><p>服务器启动实例化Servlet配置：servlet默认第一次访问时创建</p><p>缺省Servlet：当所有访问的资源都不匹配时，在配置中的/匹配为缺省的Servlet，不匹配的访问有其负责</p><p>欢迎页面配置:</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20052904.jpg" alt="web.xml欢迎页配置"></p><h6 id="5-5-ServletContext对象"><a href="#5-5-ServletContext对象" class="headerlink" title="5.5 ServletContext对象"></a>5.5 ServletContext对象</h6><blockquote><p>1.什么是ServletContext对象?</p><p>ServletContext代表是一个web应用的环境（上下文）对象，ServletContext对象    内部封装是该web应用的信息，ServletContext对象一个web应用只有一个</p><p>2.ServletContext对象的生命周期？</p><p>创建：该web应用被加载、销毁：web应用被卸载</p><p>3.怎样获得ServletContext对象？</p><p>1）ServletContext servletContext = config.getServletContext();</p><p>2）ServletContext servletContext = this.getServletContext();</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this.getInitParameter(name);  初始化参数</span>        <span class="token comment" spellcheck="true">//this.getServletConfig();      servlet配置</span>        <span class="token comment" spellcheck="true">//this.getServletContext();    上下文描述</span>    <span class="token punctuation">}</span></code></pre><p>ServletContext的作用域</p><ol><li>xml中配置全局初始化参数</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><p>java程序获取全局的信息</p><pre class=" language-java"><code class="language-java">ServletContext  context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String param <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>获取web应用资源的绝对路径(重点)</li></ol><pre class=" language-java"><code class="language-java">String path <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>路径地址<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>ServletContext是一个域对象(重点)</li></ol><p>域对象就是存储数据的区域。<strong>ServletContext的作用范围是：</strong>整个Web应用(整个web资源都可以向servletcontext中存取数据，<strong>数据可以共享、获取初始化参数、请求和转发、读取配置文件</strong>)</p><p>域对象的通用方法：</p><blockquote><p>ServletContext.setAttribute(String  name, Object  obj);</p><p>ServletContext.getAttribute(String name);</p><p>ServletContext.removeAttribute(String name);</p><p>ServletContext.getRequestDispatcher(path);</p><p>//转发，url地址不会发生改变，区别于重定向</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20053008.png" alt="ServletContext域对象"></p><p>ServletContext读取配置文件：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this.getInitParameter(name); 初始化参数</span>        <span class="token comment" spellcheck="true">// this.getServletConfig(); servlet配置</span>        <span class="token comment" spellcheck="true">// this.getServletContext(); 上下文描述</span>        <span class="token comment" spellcheck="true">// 响应文件类型</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 响应编码类型</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置上下文内容</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"星仔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取配置文件的内容,可以是类路径也可以是java的路径</span>        InputStream resourceAsStream <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/com/itxing/hello/db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出信息</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello:&lt;/h1>"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"您的密码是："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="5-6-maven项目的创建"><a href="#5-6-maven项目的创建" class="headerlink" title="5.6 maven项目的创建"></a>5.6 maven项目的创建</h6><p>之前介绍过一个idea创建maven的项目记录，今天再使用eclipse进行创建项目：</p><p><a href="https://itxingzai.xyz/2020/05/14/maven-gong-ju/" target="_blank" rel="noopener">idea使用maven</a></p><p>1.maven与eclipse配置</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20053007.png" alt="eclipse创建maven项目"></p><p>1.创建一个maven项目</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20053001.png" alt="创建maven项目"></p><p>2.跳过骨架，否则创建的项目目录结构不完整</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20053002.png" alt="跳过骨架"></p><p>3.填写项目信息</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/web20053004.png" alt="信息设置"></p><p>出错记录：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/erroe20053005.png" alt="错误记录"></p><p>解决办法：创建文件时，将工作空间选中</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/solve20053006.png" alt="解决方案"></p><p>创建项目后，手动在webapp目录下创建文件夹WEB-INF并添加web.xml</p><p>web项目需要注意的有，添加pom文件时：将javax.servlet的范围指定为provided，否则会与服务器端冲突</p><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--maven由于约定大于配置，有可能maven项目的配置文件无法被导出或者生效，需要配置builder--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  </code></pre><p>创建一个servlet，继承HttpServlet，重写doGet和doPost方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 响应文件类型</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 响应编码类型</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出信息</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>web.xml文件中的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>web</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置默认的首页--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置servlet映射--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itxing.hello.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h6 id="5-7-HttpServletResponse"><a href="#5-7-HttpServletResponse" class="headerlink" title="5.7 HttpServletResponse"></a>5.7 HttpServletResponse</h6><p>创建Servlet时会覆盖service()方法，或doGet()/doPost(),这些方法都有两个参数，一个为代表请求的request和代表响应response。</p><p>service方法中的response的类型是ServletResponse，而doGet/doPost方法的response的类型是HttpServletResponse，HttpServletResponse是ServletResponse的子接口，功能和方法更加强大</p><p>类中定义了常用的类方法(是一个接口)和状态码常量</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//设置响应行的状态码</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置response响应头</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addDateHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setIntHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addIntHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>ServletOutputStream  <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应头设置字节</span><span class="token comment" spellcheck="true">//设置响应体</span><span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>String charset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setContentType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>实际开发中解决中文乱码问题使用的是</p><pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>常用应用：下载文件</strong></p><p>步骤： </p><blockquote><p>1.获取下载文件的路径    2.  下载文件名</p><p>3.设置让浏览器能够支持下载  4.  获取下载文件的输入流</p><p>5.创建缓冲区         6.获取OutputStream对象</p><p>7.将FieldOutputStream流写入到buffer缓冲区</p><p>8.使用OutputStream将缓冲区数据输出到客户端</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取下载文件的路径</span>        <span class="token comment" spellcheck="true">// String path = "G:\\Leisure\\Callname\\img\\dog.jpg";</span>        String path <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"G:\\Leisure\\Callname\\img\\dog.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件名</span>        String filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置下载文件的头</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename"</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件的输入流</span>        FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建缓冲区</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取outputStream对象</span>        ServletOutputStream out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将文件输出流写入缓冲区</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用输出流将缓冲区中的数据输出到客户端</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// out.close(); response获得流不需要手动关闭</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下载文件的相关问题：</p><blockquote><p>如果下载中文文件，页面在下载时会出现中文乱码或不能显示文件名的情况，    原因是不同的浏览器默认对下载文件的编码方式不同，ie是UTF-8编码方式，而火狐    浏览器是Base64编码方式。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以下agent就是请求头User-Agent的值</span>String agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"MSIE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// IE浏览器</span>        filename <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 火狐浏览器</span>BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> <span class="token string">"=?utf-8?B?"</span>                <span class="token operator">+</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 其它浏览器</span>        filename <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p><strong>response验证码功能</strong>，用到java的图片类，产生一个图片，主要是为了理解响应(非重点)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 让浏览器自动3秒刷新一次</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在内存中创建一张图片</span>        BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到图片</span>        Graphics2D graphics <span class="token operator">=</span> <span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置图片背景颜色</span>        graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>        graphics<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给图片写数据</span>        graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        graphics<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphics<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 告知浏览器，这个请求使用图片方式代开</span>        resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"expires"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 网站存在缓存，不让浏览器缓存</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Progma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把图片写给浏览器</span>        ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9999999</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token operator">-</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Response<strong>重定向(地址会变化)</strong>：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        resp.setHeader("Location", "/mavenWeb/hello");</span><span class="token comment" spellcheck="true">//        resp.setStatus(302);</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/mavenWeb/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>面试题：转发与重定向的相同点与不同点</p><p>相同点：</p><blockquote><p>页面都会实现跳转</p></blockquote><p>不同点：</p><blockquote><p>请求转发时，url页面不会变化</p><p>重定向时url地址栏会变化</p></blockquote><h6 id="5-8-HttpServletRequest"><a href="#5-8-HttpServletRequest" class="headerlink" title="5.8 HttpServletRequest"></a>5.8 HttpServletRequest</h6><p>service方法中的request的类型是ServletRequest，而doGet/doPost方法的request的类型是HttpServletRequest，HttpServletRequest是ServletRequest的子接口，功能和方法更加强大</p><blockquote><p>request的相关方法</p><p>1.请求行：</p><p>获得客户端请求：String  getMethod()    </p><p>获得请求资源: String  getRequestURI()  ；String  getRequestURI()；</p><p>String  getContextPath()Web应用的名称   </p><p>String  getQueryString()  获取get请求提交的url地址后的参数字符串</p><p>request.getRemoteAddr()获取客户的ip地址</p><p>2.请求头：</p><p>long     getDataHeader(String name)               String  getHeader(String name)</p><p>Enumeration getHeaderNames()           Enumeration   getHeaders(String name)</p><p>int getIntHeader(String name)</p><p>3.请求体</p><p>String  getParameter(String name)     String[]  getParameterValues(String name)</p></blockquote><p>get提交与post提交时解决乱码问题：</p><blockquote><p>post提交乱码：request.setCharacterEncoding(“UTF-8”);</p><p>get提交乱码：parameter = new String(parameter.getbytes(“iso8859-1”),”utf-8”);</p></blockquote><p>获取前端参数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接收参数中文乱码进行处理</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobbys <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后台接收参数中文乱码问题</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobbys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 响应编码处理</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>前端：</p><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>Insert title here</title></head><body>    <form action="${pageContext.request.contextPath}/request" method="get">        用户名：<input type="text" name="username"><br>        密码：<input type = "password" name = "password"> <br>        <input type="submit" name="提交">    </form></body></html></code></pre><blockquote><p>2.request是一个能够存储数据的域对象，因此有如下方法：</p><p>setAttribute(String name,Object o)          get Attribute(String name)     removeAttribute(String name)         </p><p>2.request完成请求转发</p><p>RequestDispatcher   getRequestDispatcher(String path)  转发的是地址</p><p>requestDispatcher.forward(ServletRequest  req,ServletResponse resp)</p></blockquote><p>面试题：</p><p><strong>ServletContext域与Request域的生命周期比较</strong></p><table><thead><tr><th>ServletContext</th><th>Request</th></tr></thead><tbody><tr><td>创建：服务器启动时；销毁：；服务器关闭；域的作用范围：整个web应用</td><td>创建：访问时创建；销毁：响应结束request销毁；域的作用范围：一次请求总</td></tr></tbody></table><p><strong>再谈转发和重定向</strong>：</p><blockquote><p>1.重定向两次求情，转发一次请求</p><p>2.重定向地址栏地址变化，转发地址不变</p><p>3.重定向可以访问外部网站，转发只能访问内部资源</p><p>4.转发的性能要优于重定向</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI编程</title>
      <link href="/2020/05/27/gui-bian-cheng/"/>
      <url>/2020/05/27/gui-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>GUI编程(纯属个人喜好)</p><p>窗口、弹窗、面板、文本框、列表框、按钮、图片、监听事件、鼠标、键盘事件、破解工具</p><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>GUI核心技术：Swing 、AWT、界面不美观</p><p>GUI编程的学习主要是一些思想：MVC架构，了解监听</p><h4 id="2-AWT"><a href="#2-AWT" class="headerlink" title="2.AWT"></a>2.AWT</h4><h5 id="2-1简单介绍"><a href="#2-1简单介绍" class="headerlink" title="2.1简单介绍"></a>2.1简单介绍</h5><p>awt是抽象的窗口工具，包含了很多的类和接口。</p><p>组件Component：基本组件button、textArea、Label等；容器有Container，Window(Frame、Dialog)和面板(Applet)</p><h5 id="2-1组件"><a href="#2-1组件" class="headerlink" title="2.1组件"></a>2.1组件</h5><p>1.Frame</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"我的第一个java图像界面窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见性</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置背景颜色</span>        <span class="token comment" spellcheck="true">// Color color = new Color();</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 弹出初始位置</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小固定</span>        frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>多个Frame</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFrame2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyFrame frame1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyFrame frame2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyFrame frame4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>darkGray<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyFrame frame3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可能存在多个窗口</span>    <span class="token keyword">public</span> <span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> Color color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Myframe"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.Pannel</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Pannel 可以看做是一个空间，不能单独存在，需要嵌入frame中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 布局</span>        Panel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置布局,布局出设置需要设置frame的布局，否则会被覆盖</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// frame设置坐标</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// panel设置坐标</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// frame中嵌入面板</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见性</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听事件，监听窗口关闭时间,采用的是适配器模式，只需要实现自己需要的方法计科</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.布局管理器</p><p>流式布局</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置流式布局</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加按钮</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn3<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>东西南北中布局：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"布局管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button east <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button west <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"West"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button north <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"North"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button south <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Center"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将按钮放入窗体中</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>east<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>west<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>north<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>south<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置窗口的大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置窗口的位置</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加关闭事件</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>GridLayout</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"布局管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button east <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button west <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button north <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按钮3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button south <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按钮4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按钮5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置按钮填入三行两列的形式</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将按钮放入窗体中</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>east<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>west<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>north<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>south<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// java的函数</span>        frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置位置</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口关闭事件监听</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>练习题：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/gui052701.png" alt="image-20200527135949817"></p><p>自己先编写，代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"练习小窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置位置</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建按钮</span>        Button btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建两个pannel用来存放按钮</span>        Panel panel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Panel panel2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置背景颜色</span>        panel1<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel2<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>DARK_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一次向frame嵌入组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 嵌入panel组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel1<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 嵌入panel组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel2<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn5<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn6<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn7<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn8<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn9<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn10<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗大小</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗体两行三列</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口关闭监听事件</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.事件监听</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestActiontwo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"事件监听"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn1<span class="token punctuation">.</span><span class="token function">setActionCommand</span><span class="token punctuation">(</span><span class="token string">"task.start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setActionCommand</span><span class="token punctuation">(</span><span class="token string">"task.stop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 两个按钮共享一个事件</span>        MyMoniter monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMoniter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>monitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>monitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">windowClose</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClose</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyMoniter</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按钮被点击：msg = "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>文本框练习：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestText01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyFrame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TextField textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听文字输入文本框</span>        MyActionListener2 action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyActionListener2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 回车键按下时，会触发该事件发生</span>        textField<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 替换编码</span>        textField<span class="token punctuation">.</span><span class="token function">setEchoChar</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyActionListener2</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取一些资源</span>        TextField text <span class="token operator">=</span> <span class="token punctuation">(</span>TextField<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小练习：一个label、三个text、一个按钮制作一个简单的+法操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>lession02<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>FlowLayout<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Label<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>TextField<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowEvent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Class_Name CaculateDemo * @Class_Desc (简单的小实验) * @author it星 * @date 2020年5月27日下午3:52:59 * @Version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaculateDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Caclutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设计计算器类</span><span class="token keyword">class</span> <span class="token class-name">Caclutate</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    TextField num1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    TextField num2 <span class="token operator">=</span> null<span class="token punctuation">;</span>    TextField num3 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 三个文本框</span>        num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一个按钮</span>        Button btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一个便签</span>        Label label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按钮添加监听事件</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCaculAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口关闭时间</span>        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用组合模式</span><span class="token keyword">class</span> <span class="token class-name">MyCaculAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取三个变量</span>    <span class="token comment" spellcheck="true">// private TextField num1, num2, num3;</span>    Caclutate caclu <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token function">MyCaculAction</span><span class="token punctuation">(</span>Caclutate caclu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>caclu <span class="token operator">=</span> caclu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取加数和被加数</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>caclu<span class="token punctuation">.</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>caclu<span class="token punctuation">.</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取+运算后放入第三个框</span>        caclu<span class="token punctuation">.</span>num3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除前两个框的内容</span>        caclu<span class="token punctuation">.</span>num1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caclu<span class="token punctuation">.</span>num2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPaint</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPaint</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 空心圆</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// g.drawOval(100, 100, 100, 100);</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 画笔用完将其还原</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>鼠标监听事件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>lession03<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Color<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Point<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MouseAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Class_Name TestMouseListener * @Class_Desc (鼠标监听,画笔每次只能画一次，因此每次点击完需要重新repaint) * @author it星 * @date 2020年5月27日下午4:09:12 * @Version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMouseListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token string">"鼠标点击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自己的窗体类</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Point<span class="token operator">></span> points <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyFrame</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储鼠标点击的位置</span>        points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 鼠标监听事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口关闭事件</span>        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 画笔,监听事件</span>        Iterator<span class="token operator">&lt;</span>Point<span class="token operator">></span> iterator <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Point point <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// g.setColor(Color.RED);</span>            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加一个点到画板上</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPaint</span><span class="token punctuation">(</span>Point point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        points<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyMouseListener</span> <span class="token keyword">extends</span> <span class="token class-name">MouseAdapter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            MyFrame frame <span class="token operator">=</span> <span class="token punctuation">(</span>MyFrame<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 点击时，界面画笔上产生一个点</span>            <span class="token function">addPaint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 鼠标点击后重新绘制</span>            frame<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>窗口监听：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>lession03<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Color<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestWindow</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">WindowFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">WindowFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">WindowFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addWindowListener(new MyWindowListener());</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您点击关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                WindowFrame source <span class="token operator">=</span> <span class="token punctuation">(</span>WindowFrame<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                source<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"被激活"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowsActivited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyWindowListener</span> <span class="token keyword">extends</span> <span class="token class-name">WindowAdapter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 隐藏窗口</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正常退出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>键盘监听：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>lession03<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Frame<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>KeyAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextKeyListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">KeyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">KeyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">KeyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前键盘的编码</span>                <span class="token keyword">int</span> keyCode <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您按了上键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-Swing"><a href="#3-Swing" class="headerlink" title="3.Swing"></a>3.Swing</h4><p>Swing对awt进行了封装</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>swinglession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Color<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Container<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JLabel<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>SwingConstants<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>WindowConstants<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JframeDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyJframe2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyJframe2</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置文字</span>        JLabel jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"欢迎来到java的学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 让文本标签居中</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取一个容器</span>        Container contentPane <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>弹窗：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>swinglession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Container<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Label<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JDialog<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>WindowConstants<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Class_Name DialogDemo * @Class_Desc (弹窗设置) * @author 冯雁星 * @date 2020年5月27日下午5:43:18 * @Version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DialogDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JFrame</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按钮</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"点击弹出一个对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 点击按钮创建一个弹窗</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 弹窗</span>                <span class="token keyword">new</span> <span class="token class-name">MyDialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyDialogDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyDialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"好好学习天天向上"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>标签：JLabel</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageIconDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ImageIconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JLabel jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"ImageIconDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> ImageIconDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"dog1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageIcon imageIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        jLabel<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>imageIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container contentPane <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ImageIconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>面板：JPanel</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>swingpanel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Container<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>GridLayout<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JPanel<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>WindowConstants<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JPanelDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">JPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JPanel jPanel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取容器</span>        Container contentPane <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加组件</span>        <span class="token comment" spellcheck="true">// 创建按钮组件放入Panel中</span>        JButton jButton1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jButton2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton jButton3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton1<span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton2<span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton3<span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jPanel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jPanel1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JScrollPane侧边栏滚动条</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JScrollDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">JScrollDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container contentPane <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextArea jTextArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jTextArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"你好，java工程师必须要走的路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane jScrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>jTextArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jScrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JScrollDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>按钮(单选按钮、多选按钮)</p><p>图片按钮:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JButtonDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">JButtonDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container contain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL resource <span class="token operator">=</span> JButtonDemo01<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageIcon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把这个图标放在按钮上</span>        JButton jbutton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jbutton<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        jbutton<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"图片按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbutton<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JButtonDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>单选框：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JButtonDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">JButtonDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container contain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL resource <span class="token operator">=</span> JButtonDemo01<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageIcon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把这个图标放在按钮上</span>        JRadioButton jbtn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton jbtn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton jbtn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ButtonGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn1<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn2<span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn3<span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn1<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn2<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbtn3<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JButtonDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多选框：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MulButtonDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">MulButtonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container contain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL resource <span class="token operator">=</span> JButtonDemo01<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Icon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把这个图标放在按钮上</span>        JCheckBox jCheckBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"checkBox1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox jCheckBox2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"checkBox2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox jCheckBox3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"checkBox3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jCheckBox1<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jCheckBox2<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        contain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jCheckBox3<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MulButtonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>列表：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下拉框</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComboxDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">TestComboxDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JComboBox jComBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        jComBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"唱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"跳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"rap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jComBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">TestComboxDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//列表框</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">TestListDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成列表元素，并将其加入到列表控件</span>        Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        content<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"课程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        content<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"课程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        content<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"课程3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JList jList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">TestListDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>文本框以及密码框：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTextDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token function">JTextDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文本框</span>        JTextField jtext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JTextField jtext2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 密码框</span>        JPasswordField password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password<span class="token punctuation">.</span><span class="token function">setEchoChar</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtext<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtext2<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JTextDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小游戏贪吃蛇小游戏：<a href="https://www.bilibili.com/video/BV1HE41127CV" target="_blank" rel="noopener">狂神说java</a></p><p>推荐看秦老师的视频学习，通俗易懂，还是要多看书，多看底层知识。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB学习</title>
      <link href="/2020/05/24/mongodb-xue-xi/"/>
      <url>/2020/05/24/mongodb-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>第一步：下载，mongoDB(64位)下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">MongoDB下载路径</a></p><p>第二步：安装，windows版的安装，就像安装一般的软件一样进行next进行安装，安装步骤可以参照：<a href="https://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">mongodb安装</a></p><p>第三步：配置环境，mongodb需要配置环境变量：</p><blockquote><p>我的的安装路径是    D:\Program Files (x86)\MongoDB\bin</p></blockquote><p>计算机，右键—选择属性——选择高级系统设置——选择环境变量——选择path——编辑</p><p>将自己的地址加入到环境变量中。</p><p>第四步：在c盘的根目录下创建一个data文件夹，在文件夹中创建一个db文件夹，在启动时可以指定位置，不一定需要在c盘路径下</p><blockquote><p>开启指定数据库路径：mongod   –dbpath  D:\data\db </p><p>开启时指定端口号：mongod   –dbpath  D:\data\db  –port    10021</p></blockquote><p>第五步：测试，win+r打开命令行，cmd中输入mongod，启动服务器。</p><p>第六步：连接服务器，重新启动命令窗口输入mongo，连接服务器</p><p><strong>设置mongodb为系统服务，不需要手动启动。</strong></p><p>步骤一：在之前的data文件夹下创建log文件夹</p><p>步骤二：在自己的安装路径下创建一个配置文件</p><blockquote><p>D:\Program Files (x86)\MongoDB\mongod.cfg</p></blockquote><p>配置文件中写入：</p><pre class=" language-yml"><code class="language-yml">systemLog:    destination: file    path: c:\data\log\mongod.logstorage:    dbPath: c:\data\db</code></pre><p>步骤三：管理员身份开启命令行工具</p><p>步骤四：执行以下的命令</p><blockquote><p>mongod.exe –logpath C:\data\log\mongodb.log –logappend –dbpath C:\data\ –directoryperdb –serviceName MongoDB –install</p></blockquote><p>在服务中可以看到MongoDB服务启动起来将其设置为手动启动</p><p>如果出错后将c盘中的data中的文件进行清理，重新开始设置。</p><p>MongoDB中的三个概念：</p><blockquote><p>数据库(database)：数据库是一个仓库，在仓库中可以存放集合</p><p>集合(collection)：集合中可以存放文档</p><p>文档(document)：文档是mongodb中的最小单位</p></blockquote><p>基本的指令：</p><blockquote><p>1.显示所有的数据库：show dbs      </p><p> 2.进入一个数据库：use   数据库名(也可以不存在，使用时创建)</p><p>3.查看当前所处的数据库 ：db   </p><ol start="4"><li>查看数据库中所有的集合 ： show  collections</li></ol></blockquote><p>数据库CRUD操作</p><pre class=" language-json"><code class="language-json">db.&lt;collection名>.insert(doc<span class="token punctuation">)</span>&lt;!--举例，向test数据库中插入一个学生对象-->db.stus.insert(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&lt;!--查看数据库-->show dbs&lt;!--查看集合-->show collections&lt;!--查看文档-->db.集合名.find(<span class="token punctuation">)</span></code></pre><p>数据库管理工具的安装：</p><p>我的网盘有安装包：链接：<a href="https://pan.baidu.com/s/1pjb6y-Yq99Dy_-uL1fhS8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1pjb6y-Yq99Dy_-uL1fhS8Q</a> </p><blockquote><p>提取码：8ns4 </p></blockquote><p>安装如果出现问题：可以将软件进行更新重新安装。</p><p>点击软件中的help——选择check   for  updates…自动下载罪行的工具，安装好之后就可以进行使用了</p><p>管理工具更改字体：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/nosql052501.png" alt="image-20200525075639998"></p><p>新增数据：</p><pre class=" language-json"><code class="language-json">/**新增数据<span class="token operator">:</span>新增一条数据和新增多条数据，多条数据添加时是一个数组的形式*/db.stus.insert(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.stus.insert(<span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"han"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"chen"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/**自动产生一个_id，保证每个文档或对象唯一，该字段也可以自动以产生，但是必须暴增其唯一性*/ObjectId(<span class="token punctuation">)</span><span class="token punctuation">;</span>//新增一条数据insertOne(<span class="token punctuation">)</span>和新增多条数据，只传入数组insertMany(<span class="token punctuation">)</span>db.collection.insertOne(<span class="token punctuation">)</span><span class="token punctuation">;</span>db.collection.insertMany(<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查询数据：</p><pre class=" language-json"><code class="language-json">/**查询数据* db.collection.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>* 查询集合中符合条件的文档，可传可不传，不传时查询所有*db.collection.find(<span class="token punctuation">{</span>字段名<span class="token operator">:</span>值<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>*/db.stus.find(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.stus.find(<span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.stus.find(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"han"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//db.collection.findOne(<span class="token punctuation">{</span>属性名<span class="token operator">:</span>属性值<span class="token punctuation">}</span><span class="token punctuation">)</span>  查找文档中的符合条件的第一个数据，返回的是文档对象//find(<span class="token punctuation">)</span>查询结果为数组，可以获取数组中的对象元素db.stus.find(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.name<span class="token punctuation">;</span>//查询满足条件的记录条数db.stus.find(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.length(<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改数据：</p><pre class=" language-json"><code class="language-json">/** 修改数据* db.collection.update(查询条件，新对象<span class="token punctuation">)</span><span class="token punctuation">;</span>* 该语句会将满足条件的对象全部替换成新对象，不常用* 只更改对象的部分属性* db.collection.update(查询条件<span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>新对象<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>* 删除对象的某一个属性* db.collection.update(查询条件<span class="token punctuation">,</span><span class="token punctuation">{</span>$unset<span class="token operator">:</span><span class="token punctuation">{</span>新对象<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>* updateOne(<span class="token punctuation">)</span>* 修改多个符合条件的文档<span class="token punctuation">,</span>update默认只改变满足条件的第一个文档，* 使用以下语句将符合条件的都进行更改* db.collection.updateMany(查询条件<span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>新对象<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>* 根据参数multi设置update方法，修改单个数据或多个数据* 替换方法replaceOne(<span class="token punctuation">)</span>*/db.stus.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.stus.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//只改变单个属性的值db.stus.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//设置一个不存在的列，相当于给文档对象添加一个列db.stus.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>addr<span class="token operator">:</span><span class="token string">"shanxi"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除addr列db.stus.update(    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$unset<span class="token operator">:</span><span class="token punctuation">{</span>addr<span class="token operator">:</span><span class="token string">"shanxi"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//设置多个数据db.stus.update(    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>addr<span class="token operator">:</span><span class="token string">"shanxi"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>multi<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除数据：</p><pre class=" language-json"><code class="language-json">/*删除数据 必须传递参数，如果传入<span class="token punctuation">{</span><span class="token punctuation">}</span>表示全部删除* db.collection.remove(<span class="token punctuation">)</span><span class="token punctuation">;</span>默认删除多个* db.collection.removeMany(<span class="token punctuation">)</span><span class="token punctuation">;</span>* db.collection.removeOne(<span class="token punctuation">)</span><span class="token punctuation">;</span>*/db.stus.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>db.stus.remove(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除一个db.stus.remove(<span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除所有，性能比较差db.stus.remove(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show collections<span class="token punctuation">;</span>//删除集合<span class="token punctuation">,</span>db.stus.drop(<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>练习一：</p><pre class=" language-json"><code class="language-json">//<span class="token number">1</span>.进入my_test数据库use my_test//向数据库中的user集合中插入一个文档db.users.insert(<span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"hahah"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询user集合中的文档db.users.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//向数据库中的user集合中插入一个文档db.users.insert(<span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"lalal"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//统计数据库user集合的文档数量db.users.find(<span class="token punctuation">)</span>.count(<span class="token punctuation">)</span><span class="token punctuation">;</span>//查询数据库users集合中的username为xing的文档db.users.find(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//向数据库users集合中的username为xing的文档添加一个addr属性，值为xiandb.users.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>addr<span class="token operator">:</span><span class="token string">"xian"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//使用username<span class="token operator">:</span><span class="token string">"tang"</span>替换username：“xing”db.users.replaceOne(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"tang"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除username为xing的addr属性db.users.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$unset<span class="token operator">:</span><span class="token punctuation">{</span>addr<span class="token operator">:</span><span class="token string">"xian"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//向username为xing的文档中，添加一个hobby<span class="token operator">:</span><span class="token punctuation">{</span>cities<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"beijign"</span><span class="token punctuation">,</span><span class="token string">"shanghai"</span><span class="token punctuation">,</span><span class="token string">"shenzhen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"huan"</span><span class="token punctuation">,</span><span class="token string">"pian"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>//当一个文档的属性的值是一个文档时，称为内嵌文档db.users.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"xing"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>hobby<span class="token operator">:</span><span class="token punctuation">{</span>cities<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"xian"</span><span class="token punctuation">,</span><span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"sanghai"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>movies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"huan"</span><span class="token punctuation">,</span><span class="token string">"pian"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//向username为tang的文档中，添加一个hobby<span class="token operator">:</span><span class="token punctuation">{</span>movies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"chinese"</span><span class="token punctuation">,</span><span class="token string">"King"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>db.users.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"tang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$set<span class="token operator">:</span><span class="token punctuation">{</span>hobby<span class="token operator">:</span><span class="token punctuation">{</span>movies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"chinese"</span><span class="token punctuation">,</span><span class="token string">"King"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询喜欢电影为huan的文档<span class="token punctuation">,</span>mongodb支持通过内嵌文档进行查询，如果查询内嵌文档，可以通过.的形式//如果通过内嵌文档查询时，需要对属性是使用引号(单引号和双引号均可<span class="token punctuation">)</span>db.users.find(<span class="token punctuation">{</span>'hobby.movies'<span class="token operator">:</span><span class="token string">"huan"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//向tang中添加一个新的电影Interstellar<span class="token punctuation">,</span>内嵌文档的新增数据，使用的是$push操作符//向数组中添加元素$push，还有一种操作，$addToSet<span class="token punctuation">,</span>区别是，set添加时数组中已经有该元素则添加失败db.users.update(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"tang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$push<span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"hobby.movies"</span><span class="token operator">:</span><span class="token string">"Interstellar"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除喜欢beijing的用户db.users.remove(<span class="token punctuation">{</span><span class="token property">"hobby.cities"</span><span class="token operator">:</span><span class="token string">"beijing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除users集合db.users.remove(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//数据集合删除另一种方式db.users.drop(<span class="token punctuation">)</span><span class="token punctuation">;</span>show dbs<span class="token punctuation">;</span></code></pre><p>练习二：</p><pre class=" language-json"><code class="language-json">//向numbers插入<span class="token number">20000</span>条数据var arr = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for(var i = <span class="token number">1</span><span class="token punctuation">;</span>i&lt;=<span class="token number">20000</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr.push(<span class="token punctuation">{</span>num<span class="token operator">:</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>db.numbers.insert(arr<span class="token punctuation">)</span><span class="token punctuation">;</span>db.numbers.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers中num为<span class="token number">500</span>的文档db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$eq<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers中num大于<span class="token number">5000</span>的文档db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$gt<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers中num小于<span class="token number">30</span>的文档db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$lt<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers中num大于<span class="token number">40</span>小于<span class="token number">50</span>的文档db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$gt<span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span>$lt<span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers中num大于<span class="token number">19996</span>文档db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$gt<span class="token operator">:</span><span class="token number">19996</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers集合中的前<span class="token number">10</span>条数据db.numbers.find(<span class="token punctuation">{</span>num<span class="token operator">:</span><span class="token punctuation">{</span>$lte<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//分页查询<span class="token punctuation">,</span>skip((页码-<span class="token number">1</span><span class="token punctuation">)</span>*每页条数<span class="token punctuation">)</span>跳过，limit表示每页显示条数db.numbers.find(<span class="token punctuation">)</span>.skip(<span class="token number">10</span><span class="token punctuation">)</span>.limit(<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers集合中的<span class="token number">11</span>到<span class="token number">20</span>条数据db.numbers.find(<span class="token punctuation">)</span>.skip(<span class="token number">20</span><span class="token punctuation">)</span>.limit(<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询numbers节中的第<span class="token number">21</span>条到<span class="token number">30</span>条数据db.numbers.find(<span class="token punctuation">)</span>.skip(<span class="token number">30</span><span class="token punctuation">)</span>.limit(<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>文档之间的关系：</p><p>一对一：文档可以通过内嵌文档体现出一对一的关系</p><pre class=" language-json"><code class="language-json">use test<span class="token punctuation">;</span>db.rele.insert(    <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"黄蓉"</span><span class="token punctuation">,</span>husband<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"郭靖"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"潘金莲"</span><span class="token punctuation">,</span>husband<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"武大"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.rele.find(<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一对多：场景，应用和订单</p><pre class=" language-json"><code class="language-json">db.users.insert(<span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"sun"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"zhu"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//映射sun的订单db.order.insert(    <span class="token punctuation">{</span>    list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span><span class="token string">"菠萝"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    user_id<span class="token operator">:</span> ObjectId(<span class="token string">"5ecb2e1f40a59be8c08091d4"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//映射zhu的订单db.order.insert(    <span class="token punctuation">{</span>    list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"人参果"</span><span class="token punctuation">,</span><span class="token string">"黄瓜"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    user_id<span class="token operator">:</span> ObjectId(<span class="token string">"5ecb2e1f40a59be8c08091d5"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.users.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>db.order.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//查询用户sun的订单var user_id = db.users.findOne(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"sun"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>._id<span class="token punctuation">;</span>db.order.find(<span class="token punctuation">{</span>user_id<span class="token operator">:</span>user_id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询zhu用户的订单var user_id = db.users.findOne(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"zhu"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>._id<span class="token punctuation">;</span>db.order.find(<span class="token punctuation">{</span>user_id<span class="token operator">:</span>user_id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>多对多：场景,多个来时教多个徒弟</p><pre class=" language-json"><code class="language-json">db.teachers.insert(   <span class="token punctuation">[</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"太白"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"太乙"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"白眉"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.teachers.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>db.student.insert(<span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"sun"</span><span class="token punctuation">,</span>    tech_id<span class="token operator">:</span><span class="token punctuation">[</span>        ObjectId(<span class="token string">"5ecb32d740a59be8c08091d8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ObjectId(<span class="token string">"5ecb32d740a59be8c08091d9"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"nezha"</span><span class="token punctuation">,</span>    tech_id<span class="token operator">:</span><span class="token punctuation">[</span>       ObjectId(<span class="token string">"5ecb32d740a59be8c08091d8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       ObjectId(<span class="token string">"5ecb32d740a59be8c08091d9"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       ObjectId(<span class="token string">"5ecb32d740a59be8c08091da"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.student.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//查看太白的徒弟var tech_id = db.teachers.findOne(<span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"太白"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>._id<span class="token punctuation">;</span>db.student.find(<span class="token punctuation">{</span>tech_id<span class="token operator">:</span>tech_id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.name<span class="token punctuation">;</span></code></pre><p>练习：</p><pre class=" language-json"><code class="language-json">//首先点击上方的tools——》导入文件到数据库——》选择自己的json文件db.emp.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>db.dept.find(<span class="token punctuation">)</span><span class="token punctuation">;</span>//查询集合工资小于<span class="token number">2000</span>的员工db.emp.find(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$lt<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//工资在<span class="token number">1000</span>-<span class="token number">2000</span>db.emp.find(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$gt<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>$lt<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//工资小于<span class="token number">1000</span>大于<span class="token number">2500</span>的员工db.emp.find(<span class="token punctuation">{</span>$or<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$lt<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$gt<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询财务部员工从部门表中查询出部门的编号，关联员工表中的depnovar deptno = db.dept.find(<span class="token punctuation">{</span>dname<span class="token operator">:</span><span class="token string">"财务部"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.deptno<span class="token punctuation">;</span>db.emp.find(<span class="token punctuation">{</span>depno<span class="token operator">:</span>deptno<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询销售部的所有员工var deptno = db.dept.find(<span class="token punctuation">{</span>dname<span class="token operator">:</span><span class="token string">"销售部"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.deptno<span class="token punctuation">;</span>db.emp.find(<span class="token punctuation">{</span>depno<span class="token operator">:</span>deptno<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询所有mgr为<span class="token number">7698</span>的所有员工db.emp.find(<span class="token punctuation">{</span>mgr<span class="token operator">:</span><span class="token number">7698</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//为所有工资低于<span class="token number">1000</span>的员工增加工资<span class="token number">400</span>元db.emp.find(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$lt<span class="token operator">:</span><span class="token number">1400</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.emp.updateMany(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token punctuation">{</span>$lt<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$inc<span class="token operator">:</span><span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>排序：</p><pre class=" language-json"><code class="language-json">//查询员工表db.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//sort(<span class="token punctuation">)</span>用来进行指定文档排序<span class="token punctuation">,</span><span class="token punctuation">{</span>sal<span class="token operator">:</span>-<span class="token number">1</span><span class="token punctuation">}</span>降序排列，<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>升序排列db.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.sort(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//先按照sal升序排序，相等的按照empno降序排序db.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.sort(<span class="token punctuation">{</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>empno<span class="token operator">:</span>-<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//limit skipke可以进行任意顺序调用<span class="token punctuation">,</span>//例如：可以找出工资第二高的员工或者工资第二低的员工db.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.sort(<span class="token punctuation">{</span>sal<span class="token operator">:</span>-<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.sort(<span class="token punctuation">{</span>sal<span class="token operator">:</span>-<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.skip(<span class="token number">1</span><span class="token punctuation">)</span>.limit(<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查询时，可以再第二个位置设置查询结果  投影。//可以自定义自己想要的列，默认_id显示，手动可关闭，例如只需要ename，saldb.emp.find(<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>ename<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>_id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识</title>
      <link href="/2020/05/23/java-zhi-shi/"/>
      <url>/2020/05/23/java-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>由于自己忘性比较大，最初学习的时候也没有做笔记，因此后期学习吃力，对于前期学习的知识进行笔记重新整理与学习，巩固加强，<strong>温故而知新、可以为师矣</strong>。</p><h4 id="1-java异常"><a href="#1-java异常" class="headerlink" title="1.java异常"></a>1.java异常</h4><p>异常：在java语言中，将程序执行中发生的不正常情况称为异常，java语言中的异常用于处理非预期的情况，例如文件没找到、网络错误、非法参数等。</p><h5 id="1-1-异常的大致分类：错误与异常"><a href="#1-1-异常的大致分类：错误与异常" class="headerlink" title="1.1 异常的大致分类：错误与异常"></a>1.1 异常的大致分类：错误与异常</h5><blockquote><p>异常是程序编译运行时发生的某种异常，程序员应手动处理</p><p>错误是程序运行期间发生了某种错误，通常没有具体的处理方式，程序会结束运行</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/javaException052301.png" alt="java异常体系"></p><h5 id="1-2-java异常类："><a href="#1-2-java异常类：" class="headerlink" title="1.2 java异常类："></a>1.2 java异常类：</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/exceptionClass052302.png" alt="java中的常见异常类"></p><h5 id="1-3-异常处理机制：抓抛模型"><a href="#1-3-异常处理机制：抓抛模型" class="headerlink" title="1.3 异常处理机制：抓抛模型"></a>1.3 异常处理机制：抓抛模型</h5><p> 程序员只能处理异常对error无法处理</p><blockquote><p>a：JVM的默认处理方式</p><p>​        把异常的名称,原因,位置等信息输出在控制台，同时会结束程序。</p><p>​        一旦有异常发生，其后来的代码不能继续执行。</p><p>​    b：解决程序中异常的手动方式</p><p>​        a)：编写处理代码 try…catch…finally</p><p>​        b)：抛出 throws</p></blockquote><p>java程序的执行过程中如出现异常，会自动生成一个一场对象，该异常对象将被提交给java运行时系统，这个过程为抛出异常throws。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//例子1：使用throws抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader bf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果一个方法内抛出异常，该异常会被抛到调用方法中。如果异常没有在调用的方法中处理，将异常抛给方法的调用者，该过程一致继续，直到异常被处理，这个过程称之为catch异常。</p><p>使用try{}catch()对于信息进行捕获时，打印异常信息，getMessage()方法，用来得到有关异常事件的信息，printStackTrace()用来跟踪异常事件发生时执行堆栈的内容。finally是一个可选的代码块，一定会被执行的代码块</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//例子2：使用try{}catch(){}抓取异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader bf <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String res <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>父子继承关系的异常</strong>，父类方法抛出异常，子类重写方法时也要抛出异常并且<strong>子类不能抛出比父类范围更大的异常类型。</strong> 用户也可以自定义异常类。</p><h5 id="1-4-throw关键字"><a href="#1-4-throw关键字" class="headerlink" title="1.4 throw关键字"></a>1.4 throw关键字</h5><blockquote><p>何时使用throw关键字？(<strong>方法内部抛出对象关键字</strong>)</p><p>当方法接受的参数判断不合法时，可以使用throw将异常消息抛出给调用者。<strong>使用的格式：throw  new  异常类名(参数)；throw的使用范围是方法的内部</strong></p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testThrow</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">testThrow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是：java.lang.ArithmeticException: 除数不能为0</span></code></pre><h5 id="1-5-Throws-关键字"><a href="#1-5-Throws-关键字" class="headerlink" title="1.5 Throws 关键字"></a>1.5 Throws 关键字</h5><blockquote><p>throws(方法声明异常关键字)</p><p>方法将问题使用throws表示出来让调用者去处理。使用的格式是：修饰符  返回值  方法名(参数)  throws  异常类名..{}（一般有问题使用try{}catch(){}finally{}）</p></blockquote><h5 id="1-6-try-chatch"><a href="#1-6-try-chatch" class="headerlink" title="1.6 try..chatch(){}"></a>1.6 try..chatch(){}</h5><blockquote><p>try{}块：其中写入可能产生异常的代码</p><p>catch(){}:用来进行某种异常的捕获，实现对捕获到的异常进行处理</p><p>finally{}：可选，无论异常是否发生都会执行，一般用于数据库文件释放资源等。</p><p>使用多个catch块捕获不同的异常时应注意异常之间的顺序，异常之间存在平级关系和上下级关系，越高级的父类越在最后的catch中</p></blockquote><h5 id="1-7-方法重写时的异常处理"><a href="#1-7-方法重写时的异常处理" class="headerlink" title="1.7 方法重写时的异常处理"></a>1.7 方法重写时的异常处理</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RuntimeException<span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类重写父类方法时，抛出与父类相同的异常</span><span class="token comment" spellcheck="true">//父类方法没有异常声明时。子类覆盖也无异常声明</span><span class="token comment" spellcheck="true">//如果遇到实现子类的方法中发生了异常，不能使用throws进行抓取，只能使用catch进行捕获，catch处理不了就使用throw抛出一个RuntimeException的子类(不是子类的强转)</span><span class="token keyword">class</span> <span class="token class-name">Sun</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RuntimeException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-8-Throwable"><a href="#1-8-Throwable" class="headerlink" title="1.8 Throwable"></a>1.8 Throwable</h5><p>常用的方法有：</p><blockquote><p>getMessage() 返回该异常的详细信息字符串</p><p>toString() 返回该异常的名称与详细信息字符串</p><p>printStackTrace()控制台输出该异常的名称与详细信息字符串、异常出现的代码位置</p></blockquote><h5 id="1-9-自定义异常"><a href="#1-9-自定义异常" class="headerlink" title="1.9 自定义异常"></a>1.9 自定义异常</h5><blockquote><p>每个异常都调用父类构造方法，把异常信息传递给父类，父类对信息进行封装</p></blockquote><p>自定义异常简单例子：</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> itxing <span class="token operator">*</span> <span class="token annotation punctuation">@create</span> <span class="token number">2020</span><span class="token operator">/</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">-</span>maven_javaweb <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">testPersonAge</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPersonAge</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token keyword">throws</span> MyException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的年龄是："</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"年龄不合法，老哥！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义异常，可以继承RuntimeException也可以继承Exception</span><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String vars<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>vars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-java的集合框架："><a href="#2-java的集合框架：" class="headerlink" title="2.java的集合框架："></a>2.java的集合框架：</h4><p>注：在初次学习时，先学会使用工具，对于工具的制作以及工具的原理随后深入学习时进行总结与思考。</p><h5 id="2-1-集合介绍"><a href="#2-1-集合介绍" class="headerlink" title="2.1 集合介绍"></a>2.1 集合介绍</h5><p>集合是java中提供的一种容器，可以用来存储多个数据。<strong>集合是一种容器，是容器就有如何放置数据到容器中、如何从容器中获取数据，如何将容器中数据修改，如何将数据从容器中清除，也就是(CRUD)</strong></p><p>数组与集合的区别:</p><blockquote><p>数组长度是固定的，集合的长度是可变的</p><p>集合中存储的元素必须是引用类型的数据</p></blockquote><h5 id="2-2-集合的体系结构图-常用类"><a href="#2-2-集合的体系结构图-常用类" class="headerlink" title="2.2 集合的体系结构图(常用类)"></a>2.2 集合的体系结构图(常用类)</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/collection20060104.png" alt="image-20200601071500672"></p><h5 id="2-3-List"><a href="#2-3-List" class="headerlink" title="2.3 List"></a>2.3 List</h5><h6 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h6><p>List接口是一个元素存取有序，用户可以通过元素的整数索引访问元素，并搜索列表中的元素，带有索引的解，集合中可以有重复的元素，使用equals判断。</p><blockquote><p>常用类：ArrayList、LinkedList、Vector</p></blockquote><h6 id="2-3-2-List常用方法"><a href="#2-3-2-List常用方法" class="headerlink" title="2.3.2 List常用方法"></a>2.3.2 List常用方法</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/list20060107.png" alt="image-20200601093228522"></p><blockquote><p>list的增删改查:</p><p>1.add(Object e)：向集合末尾处，添加指定的元素</p><p>add(int index, Object e)：向集合指定索引处，添加指定的元素，原有元素依次后移</p><p>2.remove(Object e)：将指定元素对象，从集合中删除，返回值为被删除的元素</p><p>remove(int index)：将指定索引处的元素，从集合中删除，返回值为被删除的元素</p><p>3.et(int index, Object e)：将指定索引处的元素，替换成指定的元素，返回值为替换前的元素</p><p>4.get(int index)：获取指定索引处的元素，并返回该元素</p></blockquote><p>list的使用例子：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        List list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"xingzai"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在指定位置天剑</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改指定的元素的值</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除指定位置的元素</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询指定位置的元素</span>        list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Person next <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>next<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用iterator遍历集合</span>        <span class="token comment" spellcheck="true">//使用索引遍历集合</span><span class="token comment" spellcheck="true">//        for(int i=0;i&lt;list.size();i++){</span><span class="token comment" spellcheck="true">//            Person p = (Person)list.get(i);</span><span class="token comment" spellcheck="true">//            System.out.println(p.getName()+"  "+p.getAge());</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span></code></pre><p>注意：</p><blockquote><p>使用Iterator迭代时，不能操作数组元素，会出现并发异常，可以使用ListIterator迭代器操作元素</p></blockquote><h6 id="2-3-3-子类对比"><a href="#2-3-3-子类对比" class="headerlink" title="2.3.3 子类对比"></a>2.3.3 子类对比</h6><blockquote><p>ArrayList集合存储的数据结构是数组结构，元素的增删慢，查找快，多线程下不安全，用于查询多的场景</p><p>LinkedList数据结构是链表结构，方便元素的添加和删除，用于首位操作的场景</p><p>Vector集合的数据结构也是数组结构，线程安全，效率低</p></blockquote><p><strong>注：后期对集合类进行源码阅读学习。</strong></p><h5 id="2-4-Set"><a href="#2-4-Set" class="headerlink" title="2.4 Set"></a>2.4 Set</h5><h6 id="2-4-1-简单介绍"><a href="#2-4-1-简单介绍" class="headerlink" title="2.4.1 简单介绍"></a>2.4.1 简单介绍</h6><p>set不能够放重复的元素,存放时会通过equals判断元素是否相同</p><h6 id="2-4-2-Set常用方法"><a href="#2-4-2-Set常用方法" class="headerlink" title="2.4.2 Set常用方法"></a>2.4.2 Set常用方法</h6><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/set20060108.png" alt="image-20200601100517536"></p><p>添加的实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与第一条参数值相同，但是会加入到集合中，因为地址不同是两个对象</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Person next <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>next<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是将元素全部添加到set中，对于引用类型需要重写equals方法，否则会使用父类的equals方法</span><span class="token comment" spellcheck="true">//父类的方法，比较的是对象的地址值</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> var1<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>set的简单应用</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"itxing"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断集合是否存在该元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Person next <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>next<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h6 id="2-4-3-常用子类"><a href="#2-4-3-常用子类" class="headerlink" title="2.4.3 常用子类"></a>2.4.3 常用子类</h6><p>先介绍一下hash表：hash表底层也是数组机制，数组中存放对象，对象的存储位置是使用hash算法求的元素的位置，这样的结构为hash数组，一个对象存放在hash表中时先调用Object的hashCode方法，算出对象在表中存放的位置，如果对象的hash值相同称之为hash冲突，此时调用equals方法，比较两个元素是否为同一地址的对象，如果是同一对象就不将元素放入数组中，否则将其放入。</p><p>hash冲突的解决办法：</p><blockquote><p>1.开放定址法：采用某种方法继续探测哈希表中的其他存储位置，知道有空位置为止h=(key+di)%m;di是一个增量，增量的方式有：线性探测再散列、二次探测再散列、伪随机再散列</p><p>2.再哈希法：h0= hash(K);h1= hsah(h0)…</p><p>3.链地址法:同一个位置使用链表结构将元素放置</p><p>4.建立公共溢出区：另外设置存储空间用来存储冲突记录</p></blockquote><blockquote><p>HashSet:底层是hash表，元素唯一，不能重复,元素的存与取的顺序不能保证一致</p><p>LinkedHashSet：元素唯一不能重复,能够保证元素以输入进去的顺序存储。哈希表结构 + 链表结构</p><p>TreeSet：以自然顺序存储元素，并且元素不重复</p></blockquote><p>集合判断元素唯一的原理：</p><blockquote><p>ArrayList的contains方法会使用调用方法时，传入的元素的equals方法依次与集合中的旧元素所比较，从而根据返回的布尔值判断是否有重复元素。此时，当ArrayList存放自定义类型时，由于<strong>自定义类型在未重写equals方法前，判断是否重复的依据是地址值</strong>，所以如果想根据内容判断是否为重复元素，需要重写元素的equals方法。</p></blockquote><h5 id="2-5-Map"><a href="#2-5-Map" class="headerlink" title="2.5 Map"></a>2.5 Map</h5><p>与collection的不同，<strong>collection中的元素是孤立的</strong>，向集合中存储元素采用一个个元素的方式存储。<strong>Map中的集合，元素是成对存在的</strong>，是KEY -VALUE的一种形式，通过键可以找到所对应的值。Map集合<strong>不包含重复的键，值可以重复</strong>；每个键只能对应一个值。</p><p>主要分析HashMap和LinkedHashMap。</p><p>HashMap中的主要方法：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/map20060201.png" alt="image-20200602162513650"></p><p>HashMap的增删改查方法：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(map);</span>            <span class="token comment" spellcheck="true">//修改元素</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取元素</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移除元素</span>            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(map);</span>            <span class="token comment" spellcheck="true">//map集合遍历键找值,keySet函数用于返回Map集合中所有的键值对Entry对象，以Set集合的形式返回</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取键集合的迭代器</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一次遍历集合根据键获取值</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>常用类的比较(简单的分析，以后会对其源码进行分析):</p><blockquote><p><strong>HashMap&lt;K,V&gt;:</strong>存储数据采用的<strong>数组+链表+红黑树</strong>，元素的存取<strong>顺序不能保证一致</strong>，由于要保证键的唯一、不重复，<strong>需要重写键的hashCode()方法、equals()方法</strong>。</p><p><strong>LinkedHashMap&lt;K,V&gt;:</strong>HashMap下的子类，存储数据采用的<strong>哈希表结构+链表结构</strong>，通过链表结构可以<strong>保证元素存取顺序一致</strong>；通过哈希表结构可以保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法</p></blockquote><p>集合工具类Collections的常用方法，其方法为类方法：</p><blockquote><p>sort(集合对象);//将集合中的元素进行排序</p><p>shuffle(集合对象);//将集合中的元素位置打乱</p><p>集合体系中的接口、抽象类、实现类比较多：</p><p>接口:用来明确所有集合中该具有的功能，相当于在定义集合功能标准</p><p>抽象类:把多个集合中功能实现方式相同的方法，抽取到抽象类实现，具体集合不再编写</p><p>实现类：根据自身的数据存储结构方式，对接口中的功能方法进行不同方式的实现</p></blockquote><h6 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h6><blockquote><p>Map集合元素是成对出现的，K-V形式，键不可以重复，值可以重复</p><p>遍历map的方式：</p><p>1.根据键找值：先获取键的集合，在进行获取键对应的值</p><p>  map.keySet();map.get(key)</p><p>2.根据键值对对象找键和值：map.entrySet();entry.getKey();entry.getValue();</p></blockquote><h4 id="3-java的IO"><a href="#3-java的IO" class="headerlink" title="3.java的IO:"></a>3.java的IO:</h4><h5 id="3-1-javaIO的体系结构"><a href="#3-1-javaIO的体系结构" class="headerlink" title="3.1 javaIO的体系结构"></a>3.1 javaIO的体系结构</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/io20060106.png" alt="image-20200602183802632"></p><h5 id="3-2-File类："><a href="#3-2-File类：" class="headerlink" title="3.2 File类："></a>3.2 File类：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式一 </span>    String pathName <span class="token operator">=</span> <span class="token string">"E:\\file\\Hello.java"</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方式二</span>    File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file"</span><span class="token punctuation">,</span><span class="token string">"Hello.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方式三</span>    File file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"FileDemo.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取绝对路径</span>     String absolutePath <span class="token operator">=</span> file3<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     File absoluteFile <span class="token operator">=</span> file3<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取全部文件大小</span>     <span class="token keyword">long</span> length <span class="token operator">=</span> file3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取文件路径，File封装什么获取什么</span>     String path <span class="token operator">=</span> file3<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String name <span class="token operator">=</span> file3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="3-2-1文件和文件夹的创建和删除"><a href="#3-2-1文件和文件夹的创建和删除" class="headerlink" title="3.2.1文件和文件夹的创建和删除"></a>3.2.1文件和文件夹的创建和删除</h6><pre class=" language-java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//文件的创建</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\Hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件，文件不存在时创建文件并返回true，文件存在时，返回false</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件的删除</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建目录、删除、判断</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//目录的删除</span>        <span class="token keyword">boolean</span> b4 <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件或目录的判断</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\kkk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否为文件</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否问目录</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-2-2-获取文件夹下的文件"><a href="#3-2-2-获取文件夹下的文件" class="headerlink" title="3.2.2 获取文件夹下的文件"></a>3.2.2 获取文件夹下的文件</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指定一个目录</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取目录下的所有的文件以及文件夹的名称</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取当前目录下当前文件以及文件对象</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-2-3-按条件获取文件对象"><a href="#3-2-3-按条件获取文件对象" class="headerlink" title="3.2.3 按条件获取文件对象"></a>3.2.3 按条件获取文件对象</h6><p>自定义文件过滤</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 过滤器类，该过滤器过滤选择后缀为txt的文件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFileFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FilenameFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 过滤器类，该过滤器过滤选择所有的文件，不选择文件夹 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFileFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FileFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>获取指定后缀的文件对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//按条件获取文件</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前目录下当前文件以及文件对象</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>递归获取文件夹中的文件(包含子文件夹下的文件)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getFileAll</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFileAll</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">getFileAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-3-字节流"><a href="#3-3-字节流" class="headerlink" title="3.3 字节流"></a>3.3 字节流</h5><p>上面的File类主要是操作文件、文件夹，对于文件中并没有写数据或读取数据。</p><h6 id="3-3-1-字节输出流"><a href="#3-3-1-字节输出流" class="headerlink" title="3.3.1 字节输出流"></a>3.3.1 字节输出流</h6><p>OutputStream：表示所有输出类的超类，操作的数据为字节，定义了字节输出流的基本共性功能方法。将数据从程序写入磁盘中</p><blockquote><p>close();关闭此输出流并释放与此流相关的所有系统资源</p><p>flush();刷新此输出流强制写出所有缓冲的输出字节</p><p>write(byte[] b);将数组长度的字节从指定的byte数组写入此输出流</p><p>write(byte[] b , int off,int len);将指定byte数组中从偏移量off开始的len个字节写入此输出流</p><p>write(int b);将指定的字节写入此输出流</p></blockquote><p>文件输出流FileOutputStream，是OutputStream的子类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建指定File对象表示的文件中写入数据的文件输出流，这样写会将原有的文件进行覆盖掉，如果想进行续写，构造函数中传入一个布尔类型的变量，设置值为true</span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"我一生中最爱的人，嫁给了别人，我已经做好了漂泊一生的打算"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件输出流将数据写入指定的文件中</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭流</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-3-2-字节输入流"><a href="#3-3-2-字节输入流" class="headerlink" title="3.3.2 字节输入流"></a>3.3.2 字节输入流</h6><p>InputStream：将数据从磁盘文件读取到程序中。</p><blockquote><p>read();从输入流读取数据的下一个字节</p><p>read(byte[]  b);从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中</p></blockquote><p>文件输入流FileInputStream，可以获取文件中的数据，并将其放入一个缓冲区数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式1，不使用缓冲区</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//writeData();其存在中英文乱码转换的问题，目前还没想到单个字符如何解决编码</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>fins<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fins<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用缓冲区接受字节对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建字节输入流，从指定的文件对象中获取字节信息</span>        FileInputStream fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取一个字节，如果为空字符返回值为-1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简单的文件复制操作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写文件的参数来自读取的文件中</span>        <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写文件，将传入的数据写入另一个文件</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\copy1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//读取文件中的数据并返回</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span>null<span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-4-字符流"><a href="#3-4-字符流" class="headerlink" title="3.4 字符流"></a>3.4 字符流</h5><p>回顾字节流读写文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用字节流读取文件中的中文字符</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readCNText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\ch.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用字节流写文件</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        FileOutputStream fos<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\ch.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文是世界上最牛的语言，我喜欢中文"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>字节流读取的中文信息时一些字符的编码。</strong></p><p>字符的编码表：</p><blockquote><p>ascii编码表：a<del>z: 97</del>122   A<del>Z：65</del>90    0-9：4~57</p><p>iso-8859-1:拉丁编码表</p><p>GB2312:简体中文编码表</p><p>unicode:国标码，使用两个字节存储</p><p>UTF-8基于unicode，一个字节就可以存储数据，不要用两个字节存储</p></blockquote><h6 id="3-4-1-字符输入流Reader"><a href="#3-4-1-字符输入流Reader" class="headerlink" title="3.4.1 字符输入流Reader"></a>3.4.1 字符输入流Reader</h6><p>读取字符流的抽象超类</p><blockquote><p>read() 读取单个字符</p><p>read(char[] cbuf) 将字符读入数组</p></blockquote><p>1.FileReader类：<strong>是InputStreamReader的子类</strong>，用来读取字符流。</p><blockquote><p>FileReader(File file):在给定文件中读取数据的file的情况下创建一个新FileReader</p><p>FileReader(String fileName):在给定文件名的情况下创建一个FileReader对象</p></blockquote><p>简单读取中文的实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\ch.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.print(ch);</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-4-2-字符输出流Writer"><a href="#3-4-2-字符输出流Writer" class="headerlink" title="3.4.2 字符输出流Writer"></a>3.4.2 字符输出流Writer</h6><p>想文件写入字符</p><blockquote><p>write(char[] cbuf);写入字符数组</p><p>write(char[] buf,int off,int len);写入字符数组的一部分</p><p>write(int c);写入单个字符</p><p>write(String str);写入字符串</p><p>write(String str,int off,int len);写入字符串一部分</p></blockquote><p>FileWrite类写入字符流</p><blockquote><p>构造函数:</p><p>FileWrite(File file)；根据给定Field对象构造一个fieldWriter对象</p><p>FileWrite(File file , boolean append)；</p><p>FileWrite(String fileName)；根据给定的文件名构造一个FileWriter对象</p><p>FileWrite(String fileName,boolean appeand)；</p></blockquote><p>字符流将中文写入文件</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//使用字符流写文件</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，中国将越来越好，计算机将越来越深入人们的生活"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>flush()与close()</strong></p><blockquote><p>flush()将流中的缓冲区缓冲的数据刷新到目的地中，刷新后，流还可以继续使用</p><p>close()关闭资源，关闭之前将缓冲区的数据刷新到目的地，再关闭流</p></blockquote><p><strong>小练习：</strong>使用字符流进行文件复制</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readWriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件字符输入流</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件字符输出流</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取文件字符放入缓冲区</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-5-转换流"><a href="#3-5-转换流" class="headerlink" title="3.5 转换流"></a>3.5 转换流</h5><p>OutputStreamWriter是字符流通向字节流的桥梁，可用于指定的字符编码表，将要写入流中的字符编码成字节，将字符串按照指定的编码转成字节，再使用字节流将字节输出</p><h6 id="3-5-1-输出转换流"><a href="#3-5-1-输出转换流" class="headerlink" title="3.5.1 输出转换流"></a>3.5.1 输出转换流</h6><p>OutputStreamWriter将字符流转换成字节流，使用指定的编码表将要写入输入流的字符编码成字节作用是将字符串按照指定的编码表转换成字节，使用字节流将字节输出</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeCh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件相关的字节输出流对象</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\cn8.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建字符转换成字节的转换流对象，并指定编码</span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用转换流，把文字写出去，其实是写到转换流的缓冲区中</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文越来越国际化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-5-2-输入转换流"><a href="#3-5-2-输入转换流" class="headerlink" title="3.5.2 输入转换流"></a>3.5.2 输入转换流</h6><p>InputStreamReader用于将字节流转换成字符流</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readCh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建相关的字节输入流对象</span>        FileInputStream fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\cn8.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建字符转换成字节的转换流对象，并指定编码</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用转换流去读取字节流中的字节</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>字符类关系：</p><blockquote><p>OutputStreamWriter</p><p>​        |—FileWriter</p><p>InputStreamReader</p><pre><code>    |---FileReader</code></pre><p>子类和父类的功能的区别：</p><p>父类是字符和字节之间的桥梁，也可以称之为字符转换流，原理是字节流+编码表</p><p>子类便于操作字符文件，当操作字符文件时，默认编码表不可以使用父类，直接使用子类简化程序。</p></blockquote><h5 id="3-6-缓冲流"><a href="#3-6-缓冲流" class="headerlink" title="3.6 缓冲流"></a>3.6 缓冲流</h5><p>java中使用缓冲流操作文件时提高效率</p><h6 id="3-6-1-字节缓冲流"><a href="#3-6-1-字节缓冲流" class="headerlink" title="3.6.1 字节缓冲流"></a>3.6.1 字节缓冲流</h6><p>1.字节输入缓冲流BufferedOutputStream:构造函数</p><blockquote><p>public BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，将数据写入指定的底层输出流</p></blockquote><p>2.字节输出缓冲流BufferedInputStream:构造函数</p><blockquote><p>public BufferedInputStream(InputStream in)创建一个新的缓冲输出流，将数据写入指定的底层输出流</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bufferFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入文件的流对象</span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\buf.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓冲流对其进行包装</span>        BufferedOutputStream bufout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行输出</span>        bufout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"大千世界，竟没有我的容身之所"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取文件</span>        <span class="token comment" spellcheck="true">//创建流对象,不能处理中文，只是图片等文件的字节流</span>        FileInputStream fin <span class="token operator">=</span>   <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\buf.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将基本的流对象进行包装</span>        BufferedInputStream bfin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取数据</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>bfin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bfin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h6 id="3-6-2-字符缓冲流"><a href="#3-6-2-字符缓冲流" class="headerlink" title="3.6.2 字符缓冲流"></a>3.6.2 字符缓冲流</h6><p>1.字符缓冲输入流</p><blockquote><p>BufferedReader，读取文本行，缓冲各个字符，从而实现字符、数组和行的高效读取，到达文末时返回null</p></blockquote><p>2.字符缓冲输出流</p><blockquote><p>BufferedWriter,将文本写入字符输出流，缓冲各个字符，从而提供翻个字符、数组和字符串的高效写入</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bufferRWtest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字符输出流</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\bufch.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓冲流对象，将基本的输出流进行包装</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写数据</span>        String str <span class="token operator">=</span> <span class="token string">"当幸福恋人寄来红色分享喜悦，是慌乱占据了心扉"</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建字符输入流</span>        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\aaa\\bufch.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓冲对象包装字符输入流</span>        BufferedReader bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取数据</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用流需要注意的有：</p><blockquote><p>1.操作的数据时输入还是输出：</p><p>   输入：InputStream /Reader</p><p>   输出：OutputStream/Writer</p><p>2.操作的是文本还是字节数据</p><p>​    字节：OutputStream</p><p>​    文本：Writer</p><p>3.明确数据所在的具体设备</p><p>​    硬盘：文件File</p><p>​    内存：数组或者字符串</p><p>​    键盘：System.in/System.out</p><p>​    网络：Socket</p><p>4.是否需要转换流或者是缓冲对象</p></blockquote><h5 id="3-7-Properties类"><a href="#3-7-Properties类" class="headerlink" title="3.7 Properties类"></a>3.7 Properties类</h5><p>Properties类表示了一个持久的属性集，用于加载或写入流</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//该类可以使用Map的方法</span><span class="token keyword">public</span><span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span>  <span class="token comment" spellcheck="true">//传入的键值为字符串类型  </span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">setProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>特点：</p><blockquote><p>1.该类是HashTable的子类，map集合中的方法都可以用</p><p>2.该集合没有泛型，键值都是字符串</p><p>3.它是一个可以持久化的属性集。键值可以存储到集合中，也可以存储到持久化的磁盘,键值的来源也可以是持久化的设备。</p></blockquote><p>方法</p><blockquote><p>load(InputStream instream)  输入流中读取属性列表</p><p>load(Reader reader)   输入的字符流中读取属性列表</p><p>store(OutputStream out,String comments)   属性列表写入输出流</p><p>store(Writer writer,String comments)  属性列表写入输出字符</p></blockquote><p>向Properties对象中放数据：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合对象，可以看做hashtable</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素到集合中</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String value <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用Properties和输出流FileWriter将属性表写入文件中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合对象，可以看做hashtable</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素到集合中</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcDriver"</span><span class="token punctuation">,</span> <span class="token string">"com.jdbc.mysql.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcurl"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:3306/table?useUnicode=true&amp;charsetEncoding=UTF8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcUser"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcPassword"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jdbcUser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自己文件所在的位置</span>            <span class="token comment" spellcheck="true">//创建流</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将属性元素写入流中</span>            pro<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span> <span class="token string">"save data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>利用Properties和文件输入流读取配置文件的元素</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        writeFile();</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader read <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//配置文件位置</span>            read <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加载配置文件</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jdbcurl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            read<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-8-序列化流与反序列化"><a href="#3-8-序列化流与反序列化" class="headerlink" title="3.8 序列化流与反序列化"></a>3.8 序列化流与反序列化</h5><blockquote><p>用于将对象写入流中的操作流称为序列化流</p><p>用于从流中获取对象的操作流称为反序列化流</p></blockquote><p>对象序列化流ObjectOutputStream将java对象的基本数据类型写入OutputStream，也可以使用OutputStream读取对象。</p><blockquote><p>ObjectOutputStream(OutpurStream out)</p><p>writeObject(Object obj)</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对象序列化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文件输出流</span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/obj.object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给操作文件对象加入写入对象功能</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.调用写入对象的方法</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"laji"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭资源</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对象反序列化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseparalizeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对象输入流</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/obj.object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对象实例</span>        Person per <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注：一个对象想要被序列化，则个对象所属的类必须实现Serializable接口。</p><p>序列化对象如果发生InvalidClassException异常，可能的原因是：</p><blockquote><p>类的序列号版本号从流中读取的类描述符的版本号不一致</p><p>该类包含未知数据类型</p><p>该类没有可访问的构造函数</p><p>一般序列化对象是，会加入版本号：</p><p>private   static   final  long   serialVersionUID  = 1L;</p></blockquote><p><strong>transient</strong>关键字，类中被该关键字修饰的变量不会被序列化。</p><h5 id="3-9-打印语句"><a href="#3-9-打印语句" class="headerlink" title="3.9 打印语句"></a>3.9 打印语句</h5><p>打印流添加数据的功能，使他们能够方便地打印各种数据值，一般分为字节打印流(PrntStream)和字符打印流(PrintWriter)</p><p>字符打印流打印数据到文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文件字符输出流</span><span class="token comment" spellcheck="true">//         PrintWriter pw = new PrintWriter(new FileWriter("src/com/xingzai/stream/print.txt"));</span>        PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭流</span>        pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>构造函数：</p><blockquote><p>第一个参数为一个字符输出流，第二个参数为刷新功能</p><p>new PrintWriter(Writer   out,boolean   autoFlush);</p><p>参数为字符输出流</p><p>new  PrintWriter(Writer out);</p><p>第一个参数为字节输出流，第二个参数为自动刷新功能</p><p>new PrintWriter(OutputStream out , boolean  autoFlush)</p></blockquote><h5 id="3-10-第三方IO包Commons-IO"><a href="#3-10-第三方IO包Commons-IO" class="headerlink" title="3.10 第三方IO包Commons-IO"></a>3.10 第三方IO包Commons-IO</h5><p><a href="https://mvnrepository.com/artifact/commons-io/commons-io" target="_blank" rel="noopener">maven主仓库</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取文件扩展名</span>String name <span class="token operator">=</span> FilenameUtils<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断文件扩展名和指定元素是否相同</span>    <span class="token keyword">boolean</span> name <span class="token operator">=</span> FilenameUtils<span class="token punctuation">.</span><span class="token function">isExtension</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">,</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文件名</span>String name <span class="token operator">=</span> FilenameUtils<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>FileUtils类：</p><p>该类提供文件的各个操作(文件移动、读取文件、检查文件是否存在等)</p><p>使用工具类测试文件复制</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy3File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式一：复制文件操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String content <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式二：复制文件操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileUtils<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式三:复制文件</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy3File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用缓冲输入流和文件输入流将文件读取</span>        BufferedInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用缓冲输出流和文件输出流将文件输出</span>        BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/stream/print4.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始读取文件，使用一个缓冲数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭输入输出流</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>使用缓冲流的方法效率最高</strong></p><p>文件夹的复制：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 文件夹复制</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileUtils<span class="token punctuation">.</span><span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/itxing/log4j"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/com/xingzai/log4j"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-注解与反射"><a href="#4-注解与反射" class="headerlink" title="4.注解与反射"></a>4.注解与反射</h4><p>注解与反射相当重要，在框架中许多地方都能够用到。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/reflect20060102.png" alt="注解与反射"></p><h5 id="4-1-注解"><a href="#4-1-注解" class="headerlink" title="4.1 注解"></a>4.1 注解</h5><p>注解是为了对程序做一些解释，主要是为了程序能够理解，java中内置的注解有：</p><blockquote><p>@Override 表示一个方法声明，子类重写父类中的方法声明</p><p>@Deprecated   定义一个方法过期的注解</p><p>@SuppressWarings   警告压制注解</p></blockquote><p>元注解：java中有4个标准的meta-annotion类型，用来对其他注解的类型说明：</p><blockquote><p>@Target ： 描述注解的使用范围</p><p>@Retention :表示保存注释的级别(SOURCE&lt;CLASS&lt;RUNTIME)</p><p>@Documented ：说明该注解在javadoc中</p><p>@Inherited：说明子类可以继承父类中的该注解</p></blockquote><p>自定义注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//自定义注解</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnno</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义注解的参数</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"zhujie"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h5 id="4-2反射"><a href="#4-2反射" class="headerlink" title="4.2反射"></a>4.2反射</h5><p><strong>静态语言和动态语言：</strong></p><blockquote><p>动态语言：是一类在运行时可以改变其结构的语言（Object-c、C#、Javascript、PHP、Python）</p><p>静态语言：运行时结构不可以改变的语言就是静态语言，如：java、c、c++</p><p>java不是动态语言，但是java有一定的动态性，利用反射机制可以获取类似于动态语言的特性</p></blockquote><p>Relection(反射)可以在程序执行期间借助于Reflection  API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>反射：通过实例化对象——–getClass方法———-得到完整的包和类</p><p><strong>反射的优缺点：</strong></p><blockquote><p>优点：可以实现动态创建对象和编译，体现出很大的灵活性</p><p>缺点：对性能有影响，使用反射基本上是一种解释操作，操作比较慢</p></blockquote><p>创建一个实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>获取实体类的Class对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class <span class="token class-name">clazz1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itxing.annotion.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itxing.annotion.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一个类在内存中只有一个Class对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>\<span class="token punctuation">}</span></code></pre><p><strong>Class类的常用方法</strong></p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static  ClassforName(String name)</td><td>返回指定类名的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省的构造函数，获取Class</td></tr><tr><td>getName()</td><td>返回Class对象所表示的实体名称</td></tr><tr><td>Class getSuperClass</td><td>返回当前Class对象的父类对象</td></tr><tr><td>Class[]  getinterfaces()</td><td>返回当前Class对象的接口</td></tr><tr><td>ClassLoader  getClassLoader()</td><td>返回类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMethed(String name,Class… T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取对象的三种方式</span>        <span class="token comment" spellcheck="true">// 方式一</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">u1</span> <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式二</span>        Class <span class="token class-name">u2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itxing.annotion.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式三</span>        Class <span class="token class-name">u3</span> <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本内置类型的包装类都有一个Type属性（基本类型的第四种方式）</span>        Class <span class="token class-name">type</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//也可以由子类获取父类的Class对象</span></code></pre><p><strong>反射与java内存空间有关</strong></p><p>类加载与ClassLoader：</p><p>1.加载：将Class文件字节码内容加载到内存中，并将这些静态数据换成方法区的运行时数据结构，然后生成一个代表这个类的Class对象.</p><p>2.连接：将java类的二进制代码合并到JVM的运行状态之中的过程</p><ol><li>验证:确保加载类信息符合JVM规范，没有安全方面的问题</li><li>准备:正为类变量(static)分配内存并设置类变量默认初始化值的阶段，这些内存都将在方法区中进行分配</li><li>解析:虚拟机常量池的符号引用替换为直接引用的过程</li></ol><p>3.初始化：</p><ol><li>执行类构造器<clinit>()方法的过程，类构造器<clint>()方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。</li><li>当初始化一个类时，父类没初始化时先初始化父类</li><li>虚拟机保证一个类的<clinit>方法在多线程环境中被正确加锁和同步</li></ol><p><a href="https://itxingzai.xyz/2020/04/10/jvm-xu-ni-ji-xue-xi/" target="_blank" rel="noopener">java运行时数据区</a></p><p><strong>类的类加载器</strong></p><p>类加载器是将类装载到内存中，JVM规定了三种类加载器：</p><blockquote><p>引导类加载器：Bootstap Classloader，使用c++编写的，是JVM自带的类加载器，负责java平台的核心库，用来装载核心类库</p><p>扩展类加载器：负责jre/lib/ext目录下的jar包或java.ext.dirs指定目录下的jar包</p><p>系统类加载器负责java -classpath：或-D java.class.path所指定的目录下的类与jar包，最常用的类加载器</p></blockquote><h4 id="5-多线程："><a href="#5-多线程：" class="headerlink" title="5.多线程："></a>5.多线程：</h4><h5 id="5-1多线程的体系结构图"><a href="#5-1多线程的体系结构图" class="headerlink" title="5.1多线程的体系结构图"></a>5.1多线程的体系结构图</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/multhread20060103.png" alt="image-20200601071242410"></p><h5 id="5-2-多线程中的基本概念"><a href="#5-2-多线程中的基本概念" class="headerlink" title="5.2 多线程中的基本概念"></a>5.2 多线程中的基本概念</h5><p><strong>1.进程与线程</strong></p><blockquote><p>进程：指的是运行中的程序，确切的说，当一个程序进行内存运行，变成了一个进程，具有一定的独立性</p><p>线程：线程是进程的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中有多个线程，该应用被称之为多线程程序</p><p>进程是系统调度的基本单位，线程是系统执行的基本单位</p></blockquote><p><strong>2.程序运行的原理</strong></p><blockquote><p>分时调度：所有线程轮流使用CPU，平均分配每个线程cpu的时间</p><p>抢占式调度：优先级高的线程使用cpu，如果线程的优先级相同，那么会随机选择(java中使用的为抢占式调度)</p></blockquote><p><strong>3.操作系统中的作业/进程调度算法</strong></p><blockquote><p>a.先来先服务：从后备队列中选择最先入队的一个或几个作业，将其调入内存</p><p>缺点是：效率低，不利于短作业</p><p>b.短作业优先：从后备队列中选择一个或若干个运行时间最短的作业，调入内存</p><p>缺点：对长作业不利，不能考虑时间的紧迫性</p><p>c.优先级调度算法：从后备队列中选择优先级最高的作业，调入内存</p><p>​    非剥夺式优先级调度：有紧迫任务也要入队</p><p>​    剥夺式优先级调度：有紧迫任务，暂停当前任务，释放自身资源</p><p>d.高响应比 ： R = (等待时间+要求服务时间)/(要求服务时间)</p><p>​    等待时间相同时，服务时间短先服务，利于短作业</p><p>​    服务时间相同时，取决于等待时间，先来先服务</p><p>e.时间片轮转算法：(分时系统)先后次序组成队列，每次执行第一个进程，只能运行一个时间片</p><p>f.多级反馈队列调度算法：优先级和时间片轮转综合，优先级越高时间片越小，多个就绪队列，为各个队列赋予不同的优先级，不同的队列分配不同的时间片</p></blockquote><p><strong>4.并发与并行</strong></p><blockquote><p>并发：并发是指两个或多个事件在<strong>同一时间间隔</strong>内发生</p><p>并行：并行是指两个或多个事件在<strong>同一时刻</strong>发生</p></blockquote><h5 id="5-3-线程的状态"><a href="#5-3-线程的状态" class="headerlink" title="5.3 线程的状态"></a>5.3 线程的状态</h5><p>线程的状态转换图：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/multhread20060105.png" alt="image-20200601071801599"></p><h5 id="5-4-java中的线程创建"><a href="#5-4-java中的线程创建" class="headerlink" title="5.4 java中的线程创建"></a>5.4 java中的线程创建</h5><p><strong>方式一：继承Thread类(缺点是不能够再继承其他的类)</strong></p><blockquote><p>构造函数：</p><p>Thread()分配新的Thread对象</p><p>Thread(String name)分配新的Thread对象，将指定的name作为其线程的名称</p><p>常用方法：</p><p>start()；使用该方法使线程准备执行</p><p>run()：线程要执行的操作</p><p>sleep(long millis)：指定的毫秒数内让当前正在执行的线程休眠</p><p>Thread.currentThread():获取当前正在执行的线程对象的引用</p><p>Thread.currentThread().getName():获取当前线程的名字</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程并启动</span>        <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"my "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程的其他程序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承Thread类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>run方法与start方法的区别？</p><p>线程对象调用run方法不开启线程，仅是方法调用，线程对象调用start开启线程，并让jvm调用run方法在开启的线程中执行。</p><p>多线程执行时，在栈内存中，每个执行的线程都有一片属于自己的栈内存空间，进行方法的压站和弹栈，当执行线程任务结束，线程自动在栈内存中释放</p></blockquote><p><strong>方式二：实现Runnable接口(可以继承其他的类，但是没有返回值)</strong></p><blockquote><p>Thread(Runnable target):分配新的Theread对象，以便将target作为其运行对象</p><p>Thread(Runnable target,String name):分配新的Thread对象，以便将target作为其运行对象，将name指定为其名称</p></blockquote><p>步骤：</p><blockquote><p>1.创建实现类实现Runnable接口</p><p>2.覆盖接口中的run方法</p><p>3.创建Thread类对象</p><p>4.实现类作为参数传递给Thread的构造函数中</p><p>5.调用Thread对象的start方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRunThread r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Thread，传递接口实现类参数，启动线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"firstR"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主方法的线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建实现类，实现Runnable接口</span><span class="token comment" spellcheck="true">//覆盖接口方法</span><span class="token keyword">class</span> <span class="token class-name">MyRunThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用匿名内部类的方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用java8的lambda表达式写法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lambda表达式的写法</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"twoR"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>方式三：实现Callable接口，并使用FutureTask类进行线程的创建(带有返回值)</strong></p><p>常规使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用FutureTask对象作为参数，创建并开启相信线程</span>        FutureTask future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> <span class="token string">"task"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回值用sum接受</span>            Integer sum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CallThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lambda写法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//lambda创建fu对象，实现Callable接口</span>FutureTask fu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token string">"aa"</span> <span class="token operator">+</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建线程对象，开启线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>fu<span class="token punctuation">,</span> <span class="token string">"newFu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取返回值并打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h5 id="5-5线程池"><a href="#5-5线程池" class="headerlink" title="5.5线程池"></a>5.5线程池</h5><p>线程池概念和好处</p><blockquote><p>线程池，是一个容纳多个线程的容器，使得线程可以反复的使用，省去了频繁创建线程对象的操作，无需反复创建而消耗过多的资源</p><p>好处就是避免了创建与销毁线程所带来的系统的开销</p></blockquote><p>常用类及常用方法：</p><blockquote><p>Executors:线程池创建工厂类</p><p>​    Executors.newFixedThreadPool（int  n）</p><p>ExecutorService:线程池类</p><p>​    submit(Runnable task)：获取线程池中的某一个线程对象，并执行</p><p>Future接口：用来记录线程执行完成后产生的结果，线程池创建与使用</p></blockquote><p>使用线程池中线程对象的步骤：</p><p>创建线程池对象—–创建Runnable接口子类对象—-提交Runnable接口子类对象——-关闭线程池</p><p>实例一：Runnable接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个数量为两个线程的线程池</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从线程池获取线程并执行任务</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭线程池</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实例二：Callable接口，使用Future接受返回值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义实现类以及任务</span><span class="token keyword">class</span> <span class="token class-name">MyCall</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyCall</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建线程池，执行任务，获取返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个数量为两个线程的线程池</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义的Callable子类</span>        MyCall call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCall</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从线程池获取线程并执行任务</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> fu <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-网络编程："><a href="#6-网络编程：" class="headerlink" title="6. 网络编程："></a>6. 网络编程：</h4><p>(七月中旬才复习到网络编程，由于学校的一些事情，耽误了不少时间)</p><h5 id="6-1-网络编程介绍"><a href="#6-1-网络编程介绍" class="headerlink" title="6.1 网络编程介绍"></a>6.1 网络编程介绍</h5><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/net200601.png" alt="image-20200601070932503"></p><p><strong>计算机网络：</strong>把分布在不同地理区域的计算机与专门的外部设备用通信线路互联互联成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</p><p><strong>网络编程的目的</strong>是直接或间接地通过网络协议与其他计算机实现数据交换</p><p>网络编程中的两个问题：</p><p>1.如何准确的定位网络上的一台或多台主机，以及主机的应用？</p><p>2.找到主机后如何高效可靠的传输数据？</p><p>通信双方的地址表示：ip地址、端口号</p><p>通信数据传输指定一定的规则，称之为通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等指定标准。</p><table><thead><tr><th>OSI参考模型(7层)</th><th>TCP/IP参考模型(4层)</th><th>TCP/IP参考模型对应协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td></td></tr><tr><td>表示层</td><td>应用层</td><td>HTTP、FTP、Telenet、DNS…</td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>网络层</td><td>IP、ICMP、ARP</td></tr><tr><td>数据链路层</td><td>物理+数据链路层</td><td>Link</td></tr><tr><td>物理层</td><td>物理+数据链路层</td><td></td></tr></tbody></table><p>IP地址分类1：</p><blockquote><p>IPV4： 4个字节组成，大致有42亿，30亿在北美，亚洲有4亿，以点分十进制表示</p><p>Ipv6：128位16个字节，写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号：分开(3ffe:3201:1401:5421:c8ff:fe4d:db39:1984)</p></blockquote><p>IP地址分类2：</p><blockquote><p>公网地址：万维网中使用</p><p>私有地址：局域网中使用，192.168.开头等</p></blockquote><p>ip地址是互联网上的唯一标示，在java中使用InetAddress类表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据ip解析ip</span>InetAddress net1 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.10.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据域名解析ip</span>InetAddress net2 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取本地地址</span>InetAddress net4 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// getHostName(String host)</span><span class="token comment" spellcheck="true">// getHostAddress(String host)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>net4<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>端口号：标识正在计算机上运行的进程</p><p>不同的进行有不同的端口号，是一个0~65535的一个16位整数。</p><p>端口分类：</p><blockquote><p>公认端口：0~1023，预先定义的服务通信占用(Http是80，FTP是21，Telnet占用23)</p><p>注册端口：1024~49151，分配给用户进程或应用程序</p><p>动态/私有端口：49152~65535</p></blockquote><p>ip地址与端口号组合在一起称之为Socket，网络编程又称为Socket编程。</p><p>传输层协议中使用的有TCP(传输控制协议)与UDP(用户数据报协议)协议。</p><p>TCP/IP协议族：传输控制协议(TCP)和网络互联协议IP而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。IP协议是网络层的主要协议，支持网络间互连的数据通信。TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层，IP层，传输层，应用层。</p><h5 id="6-2-TCP协议"><a href="#6-2-TCP协议" class="headerlink" title="6.2 TCP协议"></a>6.2 TCP协议</h5><blockquote><p>1.使用TCP协议之前，须先建立TCP连接，形成传输数据通道</p><p>2.传输前，采用”三次握手”方式，点对点通信，可靠的</p><p>3.TCP协议先进性通信的两个应用进程：客户端、服务器</p><p>4.在连接中可进行大数据量的传输</p><p>5.传输完毕，需释放已建立的连接，效率低</p></blockquote><p>三次挥手：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tcp202717.png" alt="三次握手"></p><p>四次挥手：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tcp20071702.png" alt="四次挥手"></p><h6 id="TCP实例："><a href="#TCP实例：" class="headerlink" title="TCP实例："></a>TCP实例：</h6><p>客户端程序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileInputStream fin <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayOutputStream arrStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建一个socket，包括ip地址和端口号</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9098</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取socket输出流</span>            os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取文件输入流，用于传输文件</span>            fin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src\\main\\java\\3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建一个缓冲数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环将数据写入数组中</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 声明传输完毕</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发送完数据等待服务器端的消息，获取socket输入流</span>            in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建一个字节数组输出流。用于记录接受的数据</span>            arrStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len2<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len2 <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arrStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 输出服务器回复的消息</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrStream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关闭所有资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fin <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    arrStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>服务器程序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerSocket ss <span class="token operator">=</span> null<span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建socket对象并监听9098端口</span>            ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9098</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取socket输入流</span>            inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取文件输出流，将客户端传输的文件写入新的路径</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"buty.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 给客户端回消息</span>            os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"是朱茵"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ss <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="6-3-UDP协议"><a href="#6-3-UDP协议" class="headerlink" title="6.3 UDP协议"></a>6.3 UDP协议</h5><blockquote><p>1.将数据、源、目的封装成数据，不需要建立连接</p><p>2.每个数据报的大小限制在64K内</p><p>3.发送不管对方是否准备好，接收方收到也不确认，不可靠</p><p>4.可以广播发送</p><p>5.发送数据结束时无需释放资源，开销小，速度快</p></blockquote><p>UDP客户端</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建DatagramSocket socket对象</span>            DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">"udp发送数据"</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发送数据的地址</span>            InetAddress inet <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">,</span> inet<span class="token punctuation">,</span> <span class="token number">9989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发送数据</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//应该在finally中关闭流对象</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>UDP服务器端</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建DatagramSocket对象并监听端口</span>            DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//服务器端接受数据</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//socket释放，应在finally中</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="6-4-URL编程"><a href="#6-4-URL编程" class="headerlink" title="6.4 URL编程"></a>6.4 URL编程</h5><p>(Uniform Resource Locator)：同一资源定位符，表示互联网上的某一个资源地址。</p><p>URL的基本结构由5本分组成：</p><p>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//常用方法</span>URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/examples/beauty.jpg?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取URL的协议名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取URL的主机名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取URL的端口号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取URL的文件路径</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取URL的查询名</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java工具使用笔记</title>
      <link href="/2020/05/21/hutool-gong-ju-shi-yong-bi-ji-1/"/>
      <url>/2020/05/21/hutool-gong-ju-shi-yong-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<p>hutool工具使用笔记：</p><blockquote><p>hutool-aop    JDK动态代理封装，提供非IOC下的切面支持</p><p>hutool-bloomFilter    布隆过滤，提供一些Hash算法的布隆过滤</p><p>hutool-cache  简单缓存实现 </p><p>hutool-core    核心，包括Bean操作、日期、各种Util等</p><p>hutool-cron    定时任务模块，提供类Crontab表达式的定时任务 </p><p>hutool-crypto    加密解密模块，提供对称、非对称和摘要算法封装 </p><p>hutool-db      JDBC封装后的数据操作，基于ActiveRecord思想 </p><p>hutool-dfa   基于DFA模型的多关键字查找 </p><p>hutool-extra      扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）    </p><p>hutool-http      基于HttpUrlConnection的Http客户端封装 </p><p>hutool-log    自动识别日志实现的日志门面     </p><p>hutool-script    脚本执行封装，例如Javascript </p><p>hutool-setting    功能更强大的Setting配置文件和Properties封装</p><p>hutool-system    系统参数调用封装（JVM信息等）</p><p>hutool-json     JSON实现</p><p>hutool-captcha   图片验证码实现</p><p>hutool-poi    针对POI中Excel和Word的封装</p><p>hutool-socket   基于Java的NIO和AIO的Socket封装</p></blockquote><p>maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql语句相关学习</title>
      <link href="/2020/05/20/mysql-yu-ju-xue-xi/"/>
      <url>/2020/05/20/mysql-yu-ju-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>mysql语句训练：<a href="https://dev.mysql.com/" target="_blank" rel="noopener">mysql官网</a></p><h4 id="1-mysql数据库创建表语句"><a href="#1-mysql数据库创建表语句" class="headerlink" title="1. mysql数据库创建表语句"></a>1. mysql数据库创建表语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--商品表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_info <span class="token punctuation">(</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>     product_stock <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    product_icon <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>product_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--类目表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product_category <span class="token punctuation">(</span>    category_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    category_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    category_type <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>category_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--类型唯一性</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uqe_category_type <span class="token punctuation">(</span>category_type<span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--订单表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_master <span class="token punctuation">(</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    buyer_openid <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_amount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    pay_status <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单主键</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">--订单索引</span>    <span class="token keyword">KEY</span> idx_buyer_openid <span class="token punctuation">(</span>buyer_openid<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--订单明细表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_detial<span class="token punctuation">(</span>    detial_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    product_quantity   <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>    update_tine <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>detial_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> idx_order_id <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需求：创建一个薪资表，表中有员工的信息，查询某个员工薪资变化t以及员工编号emp_no</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建薪资表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--1、用COUNT()函数和GROUP BY语句可以统计同一emp_no值的记录条数</span><span class="token comment" spellcheck="true">--2、输出的涨幅次数为t，故用AS语句将COUNT(emp_no)的值转换为t</span><span class="token comment" spellcheck="true">--3、由于COUNT()函数不可用于WHERE语句中，故使用HAVING语句来限定t>15的条件</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> t <span class="token keyword">from</span> salaries <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">a</span> <span class="token keyword">where</span> t<span class="token operator">></span><span class="token number">15</span><span class="token comment" spellcheck="true">--对于distinct与group by的使用: 1、当对系统的性能高并数据量大时使用group by 2、当对系统的性能不高时使用数据量少时两者皆可 3、尽量使用group by</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> salaries  <span class="token keyword">where</span> to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span><span class="token keyword">group</span> <span class="token keyword">by</span> salary  <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">DESC</span></code></pre><p>having和where的使用场景</p><blockquote><p>WHERE语句在GROUP BY语句之前；SQL会在分组之前计算WHERE语句。</p><p>HAVING语句在GROUP BY语句之后；SQL会在分组之后计算HAVING语句。  </p></blockquote><p>自己学习mybatis时创建相关的表，以后可以复习复习mysql语句</p><p><a href="https://fengyanxing.github.io/2020/05/18/mybatis-xue-xi-yi/" target="_blank" rel="noopener">mybatis学习</a></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> test<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pws<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pws<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xing'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##生成一张product表，单表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>product<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>pid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pprice<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pcategary<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##生成一张教师表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#生成一张学生表，关联老师</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小一'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'小二'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>product<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pprice<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pcategary<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'玩具'</span><span class="token punctuation">,</span><span class="token string">'25'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>product<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pname<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pprice<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pcategary<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'娃娃'</span><span class="token punctuation">,</span><span class="token string">'225'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">.</span>product<span class="token comment" spellcheck="true">##hsujuku </span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token comment" spellcheck="true">##创建一张博客表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>    <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>    <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> blog<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">,</span>author<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>views<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'nihao'</span><span class="token punctuation">,</span><span class="token string">'itxing'</span><span class="token punctuation">,</span><span class="token string">'2020-05-20'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> blog<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">,</span>author<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>views<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'ll'</span><span class="token punctuation">,</span><span class="token string">'itxing'</span><span class="token punctuation">,</span><span class="token string">'2020-05-21'</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span> blog</code></pre><p>mysql中的一些函数的使用</p><p>测试常用函数使用的表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>成绩<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>编号<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>语文<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>数学<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>英语<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>化学<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h4 id="2-常用聚合函数"><a href="#2-常用聚合函数" class="headerlink" title="2. 常用聚合函数"></a>2. 常用聚合函数</h4><p><strong>distinct函数：</strong> 去重复，将查询的某一列中重复的值去掉</p><blockquote><p>SELECT DISTINCT(英语) FROM 成绩</p></blockquote><p><strong>max函数：</strong>获取某一列中的最大值</p><blockquote><p>SELECT MAX(DISTINCT(英语)) AS 英语最大值 FROM 成绩</p></blockquote><p><strong>limit函数：</strong> 与offset相结合的使用</p><blockquote><p>—显示第n条数据</p><p>SELECT 英语 FROM 成绩 LIMIT n</p><p>—-显示从第n条记录开始然后跳过第m条记录查询后一条记录</p><p>SELECT 英语 FROM 成绩 LIMIT n OFFSET m</p><p>—–显示从第n条记录开始显示m条</p><p>SELECT 英语 FROM 成绩 LIMIT n ,m</p><p><strong>注意：</strong>mysql的数据是从0行开始算，limit1，1表示第二行的数据，在行数不够时，返回的是最多的数据，limit3,4表示从行3开始取四条记录，limit 4 offset 3也是从行3取4条记录</p></blockquote><p><strong>ifnull函数：</strong>ifnull(a,b),如果表达式a为null结果为表b，否则结果为a</p><blockquote><p>SELECT IFNULL((SELECT 英语 FROM 成绩 WHERE 英语 &gt; 90),NULL) AS 学霸<br>SELECT IFNULL((SELECT 英语 FROM 成绩 WHERE 英语 &lt; 59),NULL) AS 学渣</p></blockquote><p>需求查询表中英语第二大的元素：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span>  <span class="token keyword">DISTINCT</span> 英语 <span class="token keyword">FROM</span> 成绩 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 英语 <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 第二大 </code></pre><p><strong>Order By字句</strong> 字句(clause)，sql语句通常由字句构成，一个字句通常由一个关键字和提供的数组组成，order字句能够进行对列进行字母顺序排序，能够使用<strong>desc</strong>关键字对其进行降序排序操作。</p><blockquote><p>多个列排序，使用,号隔开</p><p>select  column1,column2 from   table1   order by column1,column2</p></blockquote><p>应用场景：使用order by和limit语句可以找出最高或最低的数据</p><blockquote><p>从数据库中找出最贵的商品价格</p><p>select   price  from  products  order by  price  desc   limit 1;  </p></blockquote><p><strong>where字句操作符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">between</td><td align="center">两者之间</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##等值查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pprice <span class="token keyword">where</span> pprice <span class="token operator">=</span> <span class="token number">225</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##不等查询</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">>=</span> <span class="token number">225</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">##一下两条语句语义相同，都是找出值不为225的数据</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">&lt;></span> <span class="token number">225</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">!=</span> <span class="token number">225</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">##区间查询</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">between</span> <span class="token number">245</span> <span class="token operator">and</span> <span class="token number">260</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">##空值查询</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><strong>操作符：</strong> （operator）用来连结或改变where字句总的句子的关键字，也成为逻辑操作。</p><p>操作符包括：AND操作符(优先级比or高)、or操作符、In操作符、NOT操作符</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##表示价格不是225,248的产品</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">248</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> pprice<span class="token punctuation">;</span></code></pre><p><strong>通配符：</strong> wildcard用来匹配值的一部分特殊字符，使用时需要有like操作符，like其实是一种谓词。</p><p><strong>搜索模式：</strong> search pattern由字面值、通配符或者两者组合成的搜索条件</p><p>1.百分号通配符（%）：在搜索串中，%表示任何字符出现任意次数</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##like与%通配符，匹配实体列中以o开头的字符</span><span class="token keyword">select</span> pname <span class="token keyword">from</span> product <span class="token keyword">where</span> pname <span class="token operator">like</span> <span class="token string">'o%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##匹配中间是@xing的所有员工，不论其前后出现何种字符</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> Email <span class="token operator">like</span> <span class="token string">'%@xing%'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">##匹配中间的字符</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> email <span class="token operator">like</span> <span class="token string">'i%m'</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注意：</strong>使用%匹配字符串时，存储的数据中若是有空格字符，则可能导致匹配失败，例如匹配like ‘%ss’若数据库中的字符为“miss  ”后面有空格存在，则匹配失败。</p><p>null值的匹配，‘%’不能匹配到数据位NULL的数据</p></blockquote><p>2.下划线（_）通配符，与%用法类似，但下划线<strong>只能匹配单个字符而不是多个字符</strong>。</p><blockquote><p>注：不能过度使用通配符；在确实需要使用通配符时，除非绝对有必要，否则不要将他们用来搜索模式的开始处；需要检查通配符的位置，不能放置错误</p></blockquote><p><strong>正则表达式：</strong>mysql的正则表达式作用是匹配文本，将一个模式与一个文本串进行比较</p><p>1.基本的字符匹配，使用“.”匹配任意一个字符</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##使用REGEXP关键字和正则表达式匹配字符，匹配所有25开头的数据，258、256、253等等</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">REGEXP</span> <span class="token string">'25.'</span><span class="token punctuation">;</span></code></pre><blockquote><p>LIKE匹配整个列。如果被匹配的文本在列值中出现， LIKE将不会找到它，相应的行也不被返回（除非使用通配符）。而REGEXP在列值内进行匹配，如果被匹配的文本在列值中出现， REGEXP将会找到它，相应的行将被返回。这是一个非常重要的差别。  </p></blockquote><p>2.使用“|”进行匹配，表示or</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##使用|表达式匹配列中是225或245的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pprice <span class="token operator">REGEXP</span> <span class="token string">'225|245'</span><span class="token punctuation">;</span></code></pre><p>3.使用“[]”表示一组字符</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##使用[]进行匹配，下面表示匹配1001或2001或3001的数据都返回，表示找每个部门中的第一个</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pcategary <span class="token operator">REGEXP</span> <span class="token string">'[123]001'</span><span class="token punctuation">;</span></code></pre><blockquote><p>字符集合也可以被否定，即，它们将匹配除指定字符外的任何东西。为否定一个字符集，在集合的开始处放置一个^即可。因此，尽管[123]匹配字符1、 2或3，但[^123]却匹配除这些字符外的任何东西。  </p></blockquote><p>4.匹配范围使用短横线进行匹配-，例如[0-9]、[a-z]、[A-Z]</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##范围匹配正则[1-3]</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">WHERE</span> pcategary <span class="token operator">REGEXP</span> <span class="token string">'[1-3]001'</span><span class="token punctuation">;</span></code></pre><p>5.匹配特殊字符，转义字符\\</p><p>例如需要查找数据中有.的字符：select   * from 表 where  列  Regexp  ‘\\.’</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\\f</td><td align="center">换页</td></tr><tr><td align="center">\\n</td><td align="center">换行</td></tr><tr><td align="center">\\r</td><td align="center">回车</td></tr><tr><td align="center">\\t</td><td align="center">制表</td></tr><tr><td align="center">\\v</td><td align="center">纵向制表</td></tr></tbody></table><p>重复元字符</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0个或多个匹配</td></tr><tr><td align="center">+</td><td align="center">1个或多个匹配({1,})</td></tr><tr><td align="center">？</td><td align="center">0个或1个匹配({0,1})</td></tr><tr><td align="center">{n}</td><td align="center">指定数目的匹配</td></tr><tr><td align="center">{n,}</td><td align="center">不少于指定数目的匹配</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配数目的范围(m不超过255)</td></tr></tbody></table><p>举个栗子：</p><blockquote><p>匹配连在一起的4位数字  ,[[:digit:]]{4}匹配连在一起的任意4位数字 ,四个数字相连，中间不能有其他的字符</p><p>select * from product WHERE pcategary REGEXP ‘[[:digit:]]{4}’;</p></blockquote><p>定位符：</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">文本的开始</td></tr><tr><td align="center">$</td><td align="center">文本的结尾</td></tr><tr><td align="center">[[:&lt;:]]</td><td align="center">词的开始</td></tr><tr><td align="center">[[:&gt;:]]</td><td align="center">词的结尾</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##匹配以1-4开头的数据信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pcategary <span class="token operator">regexp</span> <span class="token string">'^[1-4]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##匹配以2-4结尾的任意数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pcategary <span class="token operator">regexp</span> <span class="token string">'[2-4]$'</span><span class="token punctuation">;</span></code></pre><p><strong>拼接字段：</strong></p><p>1.Concat()函数拼接两个列</p><blockquote><p>select Concat(pid,’(‘,pcategary,’)’) from product;</p><p>结果：</p><p>1(1001)<br>2(1001)<br>3(1002)<br>4(1003)</p></blockquote><p>2.Rtrim()函数去掉值右边的所有空格，对数据进行整理</p><blockquote><p> select Concat(RTrim(pid),’(‘,RTrim(pcategary),’)’) from product;</p></blockquote><p>3.别名</p><blockquote><p>select  列 as 别名 from  表 as 别名  </p></blockquote><p>4.执行计算</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">###查询pid ，pprice 以及计算两者的和pid+pprice称为一个新的列newcolumn</span><span class="token keyword">select</span> pid<span class="token punctuation">,</span>pprice<span class="token punctuation">,</span>pid<span class="token operator">+</span>pprice <span class="token keyword">as</span> newcolume  <span class="token keyword">from</span> product<span class="token punctuation">;</span></code></pre><p><strong>数据处理函数：</strong></p><p>大多数函数支持以下类型的函数：</p><blockquote><p>1.用于处理文本串的文本函数</p><p>2.用于在数值数据上进行算术操作的数值函数</p><p>3.用于处理日期和时间值并从这些值汇提取特定成分的日期函数和时间函数</p><p>4.返回DBMS正使用的特殊信息的系统函数</p></blockquote><p>1.文本处理函数</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">left()</td><td align="center">返回左边的字符</td></tr><tr><td align="center">length()</td><td align="center">返回串的长度</td></tr><tr><td align="center">locate()</td><td align="center">找出串的一个子串</td></tr><tr><td align="center">lower()</td><td align="center">转换成小写</td></tr><tr><td align="center">Ltrim()</td><td align="center">去掉串的左边空格</td></tr><tr><td align="center">right()</td><td align="center">返回串右边的字符</td></tr><tr><td align="center">Rtrim()</td><td align="center">去掉串右边的空格</td></tr><tr><td align="center">soundex()</td><td align="center">返回串的soundex的值</td></tr><tr><td align="center">substring()</td><td align="center">返回子串字符</td></tr><tr><td align="center">upper()</td><td align="center">转换成大写</td></tr></tbody></table><p>soundex是一个将任何文本转换成描述其语音表示的字母数字模式的算法</p><p>使用upper例子</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/upper052301.png" alt="转换成大写字符"></p><p><strong>日期函数：</strong></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/date052302.png" alt="日期函数"></p><p>数值处理函数：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/number052303.png" alt="数值处理函数"></p><p><strong>聚集函数(经常会使用)：</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列的平均值</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列的最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列的最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列之和</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##查询产品表中价格的均值</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>pprice<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##计算有多少条数据</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>pprice<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##计算出价格最大值</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>pprice<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##计算出价格最小值</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>pprice<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##去掉重复的数据再进行平均</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>destinct pprice<span class="token punctuation">)</span> <span class="token keyword">as</span> avgprice <span class="token keyword">from</span> product</code></pre><p><strong>数据分组：</strong></p><p>创建分组Group by字句,需要知道的重要的规定</p><blockquote><ol><li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。  </li><li>如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。  </li><li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。  </li><li>除聚集计算语句外， SELECT语句中的每个列都必须在GROUP BY子句中给出。  </li><li>如果分组列中具有NULL值，则NULL将作为一个分组返回。  </li><li><strong>GROUP BY子句必须出现在WHERE子句之后， ORDER BY子句之前。</strong>  </li></ol></blockquote><p>过滤分组：过滤分组规定了包括哪些分组，排除哪些分组 。所有类型的WHERE子句都可以用HAVING来替代。<strong>唯一的差别是WHERE过滤行，而HAVING过滤分组。</strong></p><blockquote><p> select * from product group by pcategary having pcategary&gt;1002;  </p></blockquote><p>分组和排序：Group by 和Order by</p><table><thead><tr><th align="left">Order by</th><th align="left">Group by</th></tr></thead><tbody><tr><td align="left">排序产生的输出</td><td align="left">分组行，但输出可能不是分组的顺序</td></tr><tr><td align="left">任意列都可以使用，甚至非选择列也可以使用</td><td align="left">只可能使用选择列或表达式列，且必须使用每个选择列表达式</td></tr><tr><td align="left">不一定需要</td><td align="left">如果与聚集函数一起使用列，必须使用</td></tr></tbody></table><h4 id="3-各种查询"><a href="#3-各种查询" class="headerlink" title="3. 各种查询"></a>3. 各种查询</h4><p><strong>子查询</strong> 另一条查询结果作为新一条查询的条件</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##查询员工表中是管理人员的员工</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> dept_emp <span class="token keyword">where</span> emp_no <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> dept_manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##查询员工表中不是管理人员的员工</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> dept_emp <span class="token keyword">where</span> emp_no <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> dept_manager<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>联结表：</strong></p><p>主键：一张表中数据唯一的表示；外键是某一个表中的一列，它包含另一个表中的主键值，定义了表间关系。</p><p>两个或两个以上的表中的字段有相同时，使用完全限定名。</p><p>1.内部联结(inner   join…on)：又称为等值联结，基于两个表之间相等的测试。</p><p>2.自联结：在同一张表中查询出不同的数据，下面使用一个例子说明自联结。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql052304.png" alt="自联结"></p><p>每一个员工都有自己的编号，每一个员工记录着自己的领导信息，为null者说明自己就是领导，现在查询salary大于自己领导的员工姓名。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##查询员工工资大于自己领导的姓名，也可以使用子查询进行操纵，自连接处理更快</span><span class="token keyword">select</span> <span class="token number">e1</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> employee2 <span class="token number">e1</span><span class="token punctuation">,</span>employee2 <span class="token number">e2</span> <span class="token keyword">where</span> <span class="token number">e2</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">e1</span><span class="token punctuation">.</span>mangerid <span class="token operator">and</span> <span class="token number">e1</span><span class="token punctuation">.</span>salary<span class="token operator">></span><span class="token number">e2</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span></code></pre><p>3.自然联结</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##自然连接查询出员工的名字，部门名和员工邮件</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>EMAIL<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>DEPT_NAME <span class="token keyword">from</span> employee <span class="token number">e</span><span class="token punctuation">,</span>department <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/join052305.png" alt="自然联结"></p><p>4.外部联结 left/right join…on：与内连接类似，用于将主外键关系的数据联结</p><p><strong>总结：</strong> 使用联结和联结条件</p><blockquote><p>需要注意联结类类型，一般使用内连接，使用外连接也是有效地</p><p>保证使用正确的联结条件，都则返回不正确的数据</p><p>应该总是提供联结条件，都则得到的是笛卡尔积</p><p>一个联结包含多个表时，最好先将每个联结测试一下</p></blockquote><p><strong>组合查询</strong> 通常也称作并或符合查询。通常使用组合查询的情况有：</p><blockquote><p>1.在单个查询中从不同的表返回类似结构的数据</p><p>2.对单个表执行多个查询，按单个查询返回数据</p></blockquote><p>使用union将同一张表的不同条件的数据查询出来</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##查询数据库表中价格小于200的以及属于1002或1004类别的商品数据</span><span class="token comment" spellcheck="true">##union自动删除了重复的行，对于既满足第一个条件的数据又满足第二个条件的数据只会查询出一条记录</span><span class="token comment" spellcheck="true">##如果需要查询出所有满足第一个条件有需要满足第二个条件的数据且不去重复数据可以使用union ALL子句</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> pprice <span class="token operator">&lt;</span><span class="token number">200</span><span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> pcategary <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'1002'</span><span class="token punctuation">,</span><span class="token string">'1004'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>使用union的规则：</p><blockquote><p>1.Union必须由两条或两条以上的select语句组成，语句之间用关键字union分隔</p><p>2.Union中的每个查询必须包含相同的列、表达式或聚集函数(不过各个列不需要以相同的次序列出)</p><p>3.列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含的转换的类型(不同的数值类型)</p></blockquote><p><strong>全文本索引</strong>  Mysql中最常用的引擎MyIsam和InnoDB，前者支持全文本搜索，后者不支持。</p><p> 创建数据库表启动全文本索引，使用FULLTEXT子句：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##使用FULLTEXT子句，使用MYISAM引擎</span><span class="token comment" spellcheck="true">##再导入数据时，不应该使用FULLTEXT，更新索引要花费时间，先导入数据再进行数据修改</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>productnotes<span class="token punctuation">`</span><span class="token punctuation">(</span>    note_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    prod_id CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    note_date <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    note_text <span class="token keyword">TEXT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>note_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    FULLTEXT<span class="token punctuation">(</span>note_text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span></code></pre><p>进行全文索引时使用Match()和Against()执行全文本搜索，其中Match()会指定被搜索的列，Against()指定要使用的搜索表达式。</p><p>布尔文本搜索：全文本搜索的另一种形式(后续理解清楚再做详细记录)</p><blockquote><p>布尔方式需有以下细节：</p><p>要匹配的词；要排斥的词；排列提示；表达式分组；另外一些内容</p></blockquote><h4 id="4-表中记录的相关操作"><a href="#4-表中记录的相关操作" class="headerlink" title="4. 表中记录的相关操作"></a>4. 表中记录的相关操作</h4><p><strong>插入数据</strong> 使用insert   values关键字</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##插入数据操作，使用;号可以一次提交两条语句</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> blog<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">,</span>author<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>views<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'nihao'</span><span class="token punctuation">,</span><span class="token string">'itxing'</span><span class="token punctuation">,</span><span class="token string">'2020-05-20'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> blog<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">,</span>author<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>views<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'ll'</span><span class="token punctuation">,</span><span class="token string">'itxing'</span><span class="token punctuation">,</span><span class="token string">'2020-05-21'</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>更新数据与删除数据</strong> update   set   where 语句和delete  from   where 句</p><pre class=" language-mysql"><code class="language-mysql">##更新数据库表中的某一条数据，使用update关键字更新删除时需要有where，否则整个表中的数据都将被修改UPDATE test.user SET NAME = 'hanhan',pws = 'like' WHERE id = 6;##删除一条数据操作，使用delete from操作DELETE FROM test.user WHERE id = 8;</code></pre><h4 id="5-相关表的操作"><a href="#5-相关表的操作" class="headerlink" title="5.相关表的操作"></a>5.相关表的操作</h4><p><strong>创建表和操作表</strong> 创建时，需要有表名、列名、列定义。例如：</p><pre class=" language-mysql"><code class="language-mysql">##创建一张表，使用的是MyIsam引擎CREATE TABLE `productnotes`(    note_id INT NOT NULL AUTO_INCREMENT,    prod_id CHAR(10) NOT NULL,    note_date DATETIME NOT NULL,    note_text TEXT NULL,    PRIMARY KEY(note_id),    FULLTEXT(note_text)) ENGINE = MYISAM;</code></pre><p>建表时需要指定主键，<strong>主键必须唯一，且主键不为null值</strong> 使用AUTO_INCREMENT表示自增，使用default表示默认值。</p><p>使用AUTO_INCREMENT缺点是：新增时不指定，查询时不能将主键与其他列对应起来</p><p>引擎类型：Engine= Myisam、InnoDB、MEMORY</p><blockquote><p>InnoDB：是一个可靠的事务处理引擎，它不支持全文搜索</p><p>Myisam性能极高的引擎，支持全文本搜索，不支持事务和外键</p><p>MEMORY在功能等同于Myisam，由于数据存储在内存中速度快</p></blockquote><p><strong>更新表</strong> </p><p>表中的结构做改动时需要使用更新操作，ALTER TABLE</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##给表中新增一列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">ADD</span> nick_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##alert table的一种常见用途是定义外键</span><span class="token keyword">ALTER</span> <span class="token keyword">table</span> orderitems <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_ordertimes_orders <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">references</span> orders <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> </code></pre><p><strong>删除表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##删除成绩表</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 成绩<span class="token punctuation">;</span></code></pre><p><strong>重命名表</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##将数据库中表名为employee2改为employee02</span><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> employee2 <span class="token keyword">TO</span> employee02<span class="token punctuation">;</span></code></pre><h4 id="6-视图"><a href="#6-视图" class="headerlink" title="6.视图"></a>6.视图</h4><p><strong>使用视图</strong></p><blockquote><p>视图的应用：重用sql、简化复杂的sql操作、使用表的组成部分而不是整个表、保护数据、更改数据格式表示</p></blockquote><p>视图的规则和限制：</p><blockquote><p>视图命名唯一、视图数目创建没限制、创建视图需有一定的访问权限</p><p>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图</p><p>视图检索数据select总有order   by ，视图中的order  by  被覆盖</p><p>视图不能索引，也不能有关联的触发器或者默认值</p><p>视图可以和表一起使用</p></blockquote><p>创建视图：</p><blockquote><p>使用Create VIEW语句创建，使用Show  Create  VIEW viewname；</p><p>来查看创建视图的语句；</p><p>用drop删除视图；</p><p>更新视图时，可以先用drop再用create</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##创建视图，是两张表的联合查询，查询出人员的姓名、人员的邮件、人员所在的部门名称</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> dept_employ <span class="token keyword">AS</span><span class="token keyword">SELECT</span> LAST_NAME<span class="token punctuation">,</span>EMAIL<span class="token punctuation">,</span>dept_name <span class="token keyword">FROM</span> employee <span class="token punctuation">,</span>department<span class="token keyword">WHERE</span> employee<span class="token punctuation">.</span>DEPT_ID<span class="token operator">=</span>department<span class="token punctuation">.</span>ID<span class="token comment" spellcheck="true">##从视图总获取元素信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept_employ<span class="token comment" spellcheck="true">##创建一个过滤空数据的视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> employIsNotNull <span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">WHERE</span> EMAIL <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employIsNotNull<span class="token punctuation">;</span><span class="token comment" spellcheck="true">##更新视图时，如果存在分组、联结、子查询、并、聚集函数、DISTINCT、计算列等，不可以对视图进行更新</span></code></pre><p>*<em>应该将视图用于检索（ SELECT语句），而不用于更新（ INSERT、 UPDATE和DELETE）。  *</em></p><h4 id="7-存储过程"><a href="#7-存储过程" class="headerlink" title="7.存储过程"></a>7.存储过程</h4><p><strong>存储过程</strong></p><blockquote><p>通过把处理封装在容易使用的单元中，简化复杂的操作  ；</p><p>由于不要求反复建立一系列处理步骤，  保证了数据的完整性  ；</p><p>简化对变动的管理；  </p><p>提高性能； </p><p>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码  </p></blockquote><p>执行存储过程的操作</p><blockquote><p>创建存储过程：</p><p>create  procedure  product()</p><p>begin</p><p>​      select * from products;</p><p>end</p><p>调用存储过程： call   存储过程名(参数集);</p><p>删除存储过程：drop procedure   存储过程名 ;</p><p>检查存储过程：Show Create  Procedure  存储过程名</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">##创建并调用简单的存储过程</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> getemploy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>     <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span><span class="token keyword">END</span>$$<span class="token keyword">DELIMITER</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##存储过程实际上是一种函数，所以存储过程名后需要有()符号</span><span class="token keyword">CALL</span> getemploy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##删除存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  getemploy<span class="token punctuation">;</span></code></pre><blockquote><p>DELIMITER //告诉命令行实用程序使用//作为新的语句结束分隔符，可以看到标志存储过程结束的END定义为END//而不是END;  </p></blockquote><p>使用游标：mysql游标只能用于存储过程</p><p>小结：本篇文章用于记录一些基本的sql语句或者基本的数据库概念，对于一些mysql深入的知识点在另外一篇文章中。<a href="https://itxingzai.xyz/2020/03/30/mysql-zhi-shi-dian/" target="_blank" rel="noopener">mysql知识点</a></p><h4 id="8-操作数据库引擎"><a href="#8-操作数据库引擎" class="headerlink" title="8.操作数据库引擎"></a>8.操作数据库引擎</h4><h4 id="数据库引擎的介绍"><a href="#数据库引擎的介绍" class="headerlink" title="数据库引擎的介绍"></a>数据库引擎的介绍</h4><p>1.ISAM(Index Sequential Access Method)</p><blockquote><p>ISAM主要针对于查询次数远远大于更新次数的场景，不支持事务，不占用内存和存储资源。目前不适用，一般使用Myisam</p></blockquote><p>2.MyISAM</p><blockquote><p>mysql5.5之前默认的存储引擎，支持表级锁的机制，用于优化并发的读写操作。Optimize Table命令，来恢复更新机制所浪费的空间，但是会使用锁对表进行锁定。</p><p>注意：MyISAM引擎使用，必须经常使用Optimize Table命令清理空间；必须经常备份所有的试试数据，工具：<strong>用来修复数据库文件的MyISAMCHK工具</strong>和<strong>用来恢复空间的MyISAMPACK工具</strong>。</p><p>该引擎会有三个文件产生：</p><p>.frm表结构、.MYD数据文件、.MYI表的索引信息</p></blockquote><p>3.Innodb</p><blockquote><p>由于MyIsam不支持事务，innodb提供了具有提交、回滚和崩溃恢复能力的事务安全的存储引擎。innodb锁定在行级锁、外键支持。</p><p>特点：</p><p>支持事务、数据多版本读取、锁定机制的改进(行级)、实现外键</p><p>数据库表更换数据库引擎时，innodb中的表中涉及到外键时不能转换成MyISAM引擎。</p></blockquote><h5 id="MyISAM与Innodb的区别"><a href="#MyISAM与Innodb的区别" class="headerlink" title="MyISAM与Innodb的区别"></a>MyISAM与Innodb的区别</h5><blockquote><p>1.Innodb支持事务，MyISAN不支持，对于Innodb将sql语句默认封装成事务，自动提交，最好是将多条的sql语句放在begin和commit之间，组成一个事务。</p><p>2.Innodb支持外键，MyISAM不支持。对一个包含外键的InnoDB转换成MyISAM会失败</p><p>3.InnoDB是聚集索引，数据库文件和索引文件在一起，不需要有主键，通过主键索引效率很高。但是辅助索引会有两次查询(回表)，先查询到主键，再找数据，因此主键不应该过大，主键过大，其他索引会变大。MyISAM是非聚集索引，数据文件与索引文件分离，索引保存的是数据文件的指针。</p><p>4.Innodb不保存具体的行数，执行select count(*) from table时是一个全表扫描的过程。MyISAM用一个变量保存了整个表的行数，速度快。</p><p>5.Innodb不支持全文索引，而MyIsam支持全文索引，查询效率MyISAM高</p></blockquote><h5 id="数据库引擎的选择"><a href="#数据库引擎的选择" class="headerlink" title="数据库引擎的选择"></a>数据库引擎的选择</h5><blockquote><p>1.要有事务，使用Innode</p><p>2.一个表大多数只是读取数据，使用MyIsam，读写频繁的数据表使用Innodb</p><p>3.系统奔溃后，MyISaM数据恢复更困难</p><p>4.最好使用Innodb(mysql5.5默认的)</p></blockquote><h5 id="查看数据库支持的引擎"><a href="#查看数据库支持的引擎" class="headerlink" title="查看数据库支持的引擎"></a>查看数据库支持的引擎</h5><blockquote><p>SHOW ENGINES;</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mysql20081801.png" alt="image-20200818105658881"></p><h5 id="查看数据库当前的默认引擎"><a href="#查看数据库当前的默认引擎" class="headerlink" title="查看数据库当前的默认引擎"></a>查看数据库当前的默认引擎</h5><blockquote><p>SHOW VARIABLES LIKE ‘%storage_engine%’;</p></blockquote><p>默认的数据库引擎</p><h5 id="查看数据库表使用的引擎"><a href="#查看数据库表使用的引擎" class="headerlink" title="查看数据库表使用的引擎"></a>查看数据库表使用的引擎</h5><blockquote><p>SHOW CREATE TABLE tableName</p></blockquote><p>查看自己的表使用的是哪一种数据库引擎</p><h5 id="修改表的存储引擎"><a href="#修改表的存储引擎" class="headerlink" title="修改表的存储引擎"></a>修改表的存储引擎</h5><blockquote><p>alert table table_name engine = engine_name</p></blockquote><h5 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h5><blockquote><p>读未提交(read uncommitted)  事务产生的问题都不能解决</p><p>读已提交(read committed)   解决脏读</p><p>可重复读(repeatable read)  解决不可重复读</p><p>串行化(serializable)  都能够解决(脏读、幻读、不可重复读)</p></blockquote><h4 id="9-数据库的索引优化条件"><a href="#9-数据库的索引优化条件" class="headerlink" title="9.数据库的索引优化条件"></a>9.数据库的索引优化条件</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><blockquote><p>1.通过创建唯一性索引，保证数据库表中的每一行数据的唯一性</p><p>2.可以大大加快数据的检索速度，这也是创建索引的最主要的原因</p><p>3.可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义</p><p>4.在使用分组和排序字句进行数据检索时，同样可以显著减少查询中分组和排序的时间</p><p>5.通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能</p></blockquote><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><blockquote><p>1.创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</p><p>2.索引需要占用物理空间，除了数据表占数据空间之外，每一个索引还要占一定物理空间，如果是聚簇索引，那么空间更大</p><p>3.当对表中数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度</p></blockquote><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><h6 id="1-普通索引-INDEX"><a href="#1-普通索引-INDEX" class="headerlink" title="1.普通索引 (INDEX)"></a>1.普通索引 (INDEX)</h6><p>1.1 直接创建</p><blockquote><p>创建索引需要索引名、表名、以及列和需要匹配的字符长度</p><p>CREATE INDEX [index_name] ON [table_name] (column(length))</p></blockquote><p>1.2 修改表结构的方式</p><blockquote><p>Alter table 表名 add index 索引名(列名[(length)])</p></blockquote><p>1.3 创建表时指定索引</p><blockquote><p>Create Table 表名 ([…],Index 索引名 (列名1，列名2，…))</p></blockquote><p>1.4 查看索引</p><blockquote><p>Show   Index  From  表名</p></blockquote><p>1.5 删除索引</p><blockquote><p>DROP INDEX 索引名  ON 表名</p><p>Alert table 表名 DROP  INDEX 索引名</p></blockquote><h6 id="2-唯一索引-UNIQUE"><a href="#2-唯一索引-UNIQUE" class="headerlink" title="2.唯一索引 (UNIQUE)"></a>2.唯一索引 (UNIQUE)</h6><blockquote><p>ALTER TABLE 表名 ADD UNIQUE(列名)</p></blockquote><h6 id="3-全文索引-fulltext"><a href="#3-全文索引-fulltext" class="headerlink" title="3.全文索引 fulltext"></a>3.全文索引 fulltext</h6><p>创建一个带有全文索引的表，全文索引使用FULLTEXT</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> fulltext_test <span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    content <span class="token keyword">text</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    tag <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    FULLTEXT <span class="token keyword">KEY</span> content_tag_fulltext<span class="token punctuation">(</span>content<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建联合全文索引列</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>在已经创建的表中添加全文索引</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> fulltext <span class="token keyword">index</span> content_tag_fulltext    <span class="token keyword">on</span> fulltext_test<span class="token punctuation">(</span>content<span class="token punctuation">,</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改表创建全文索引</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> fulltext_test    <span class="token keyword">add</span> fulltext <span class="token keyword">index</span> content_tag_fulltext<span class="token punctuation">(</span>content<span class="token punctuation">,</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>全文索引的使用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fulltext_test     <span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>tag<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'xxx xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="4-组合索引"><a href="#4-组合索引" class="headerlink" title="4.组合索引"></a>4.组合索引</h6><blockquote><p>如果对col1、col2、col3进行一个组合索引创建，会产生col1、（col1,col2）、(col1、col2、col3)三个索引</p></blockquote><h5 id="索引优化的前提："><a href="#索引优化的前提：" class="headerlink" title="索引优化的前提："></a>索引优化的前提：</h5><p>什么样的数据能够建立索引？</p><blockquote><p>1.在<strong>经常需要搜索的列上</strong>，可以加快搜索的速度</p><p>2.在<strong>作为主键的列上</strong>，强制该列的唯一性和组织表中数据的排列结构</p><p>3.在<strong>经常用在连接的列上，这些列主要是一些外键</strong>，可以加快连接的速度</p><p>4.在经常需要<strong>根据范围进行搜索的列上创建索引</strong>，因为索引已经排序，其指定的范围是连续的</p><p>5.在<strong>经常需要排序的列</strong>上创建索引，因为索引已经排序，这样利用索引的排序加快查询</p><p>6.在<strong>经常使用在Where字句中的列上面创建索引</strong>，加快条件的判断速度</p><p>  建立索引，一般根据where的条件来建立，select的条件是where   f1  和f2  只有在f1和f2上同时建立索引才有用。</p></blockquote><p>不适合建立索引的列</p><blockquote><p>1.查询很少的列</p><p>2.又很少数据值的列</p><p>3.对于那些定义为text、image和bit数据类型的列不应该建立索引</p><p>4.当修改性能远远大于检索性能时，不应该创建索引</p></blockquote><h5 id="sql的优化"><a href="#sql的优化" class="headerlink" title="sql的优化"></a>sql的优化</h5><blockquote><p>1.避免全表扫描，例如select * from 表  等等</p><p>2.尽量避免where字句中对字段进行null值判断，否则将导致引擎放弃使用索引进行全表扫描 例如(select * from t where num is null)，可以将null设置一个默认的值0来避免</p><p>3.尽量避免where字句中使用！= 或者&lt;&gt;操作符，会放弃索引，全表扫描</p><p>4.尽量避免在where字句中使用or作为连接条件;</p><p>例如select id from t where num=10 or num=20</p><p>可以使用连接字句查询 </p><p>select id from t where num = 10 union all   select id from t where num = 20</p><p>5.in和not in也需要慎用</p><p>例如：select id from t where num in (1,2,3)</p><p>优化使用:select id from t were num between 1 and 3</p><p>6.下面的查询也将导致全表扫描</p><p>select id from t where name like ‘%abc%’</p><p>7.尽量避免在where字句中对字段进行表达式操作，这样导致引擎全表扫描</p><p>例如：select id  form t where num/2 = 100(对索引列进行表达式，将不走索引)</p><p>优化：select id  form t where num = 100*2(对条件进行表达式运算，走索引)</p><p>8.尽量避免在where字句中对字段进行函数操作，这将引擎全表扫描</p><p>select id  form t where sunstring(name,1,3) = ‘abc’    查询name以abc开头的id</p><p>优化：select id from t where name like ‘abc%’</p><p>9.不要在where字句中”=”左边进行函数、算数、表达式等运算</p><p>10.在使用索引字段作为条件时，如果索引是复合索引，那么必须使用到该索引第一个字段作为条件才能保证系统使用该索引</p><p>11.使用exist代替in 例如select num from t where num in（select num from b）优化select num from a where exit (select 1from b where a.num = b.num)</p><p>12.索引并不是越多越好，索引加快了搜索的效率，降低了插入与更新的效率</p><p>13.尽量使用数字类型的字段，只含数字信息的字段使用数值类型的字段</p><p>14.尽可能使用varchar代替char，因为是可变长的字段，空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率较高</p><p>15.任何地方都不要使用select * from，用具体的字段列代替*</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习(二)</title>
      <link href="/2020/05/19/mybatis-xue-xi-er/"/>
      <url>/2020/05/19/mybatis-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<p>接上次的mybatis学习</p><p><strong>日志</strong></p><blockquote><p>Mybatis提供的日志支持</p><p>可选的值有：SLF4J、<strong>LOG4J</strong>、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、<strong>STDOUT_LOGGING</strong>、NO_LOGGING，或者是实现了 <code>org.apache.ibatis.logging.Log</code> 接口，且构造方法以字符串为参数的类完全限定名。</p></blockquote><p>mybatis-config.xml文件中配置日志，配置文件必须遵循规范</p><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--数据库外部文件配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志配置的位置，必须在properties和typeAliases中间，STDOUT_LOGGING标准的日志工厂实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p><strong>LOG4J</strong></p><blockquote><p>使用Log4j,可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIXSyslog守护进程等。</p><p>可以控制每一条日志的输出格式，控制日志的生成过程</p></blockquote><p>1.导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.编写配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">##Log4J的配置之简单使它遍及于越来越多的应用中了   </span><span class="token comment" spellcheck="true">##Log4J配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。择其一二使用就够用了。   </span><span class="token comment" spellcheck="true">##此文件（log4j.properties）内容来自网络</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG, console,file </span><span class="token attr-name">log4j.addivity.org.apache</span> <span class="token punctuation">=</span> <span class="token attr-value">true    </span><span class="token comment" spellcheck="true"># 应用于控制台   </span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender   </span><span class="token attr-name">log4j.appender.console.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG   </span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out   </span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span><span class="token comment" spellcheck="true">#log4j.appender.CONSOLE.layout.ConversionPattern = [start] % d  {DATE} [DATE] % n % p[PRIORITY] % n % x[NDC] % n % t[THREAD] n % c[CATEGORY] % n % m[MESSAGE] % n % n   </span><span class="token comment" spellcheck="true">#应用于文件   </span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.FileAppender   </span><span class="token attr-name">log4j.appender.file.File</span> <span class="token punctuation">=</span> <span class="token attr-value">file.log   </span><span class="token attr-name">log4j.appender.file.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">false    </span><span class="token attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span><span class="token comment" spellcheck="true"># Use  this  layout  for  LogFactor  5  analysis   </span><span class="token comment" spellcheck="true"># 应用于文件回滚   </span><span class="token attr-name">log4j.appender.rolling_file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender   </span><span class="token attr-name">log4j.appender.rolling_file.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">ERROR   </span><span class="token attr-name">log4j.appender.rolling_file.File</span> <span class="token punctuation">=</span> <span class="token attr-value">rolling.log   </span><span class="token attr-name">log4j.appender.rolling_file.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true    </span><span class="token attr-name">log4j.appender.rolling_file.MaxFileSize</span> <span class="token punctuation">=</span> <span class="token attr-value">10KB   </span><span class="token attr-name">log4j.appender.rolling_file.MaxBackupIndex</span> <span class="token punctuation">=</span> <span class="token attr-value">1    </span><span class="token attr-name">log4j.appender.rolling_file.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.rolling_file.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span><span class="token comment" spellcheck="true">#应用于socket   </span><span class="token attr-name">log4j.appender.socket</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender   </span><span class="token attr-name">log4j.appender.socket.RemoteHost</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost   </span><span class="token attr-name">log4j.appender.socket.Port</span> <span class="token punctuation">=</span> <span class="token attr-value">5001    </span><span class="token attr-name">log4j.appender.socket.LocationInfo</span> <span class="token punctuation">=</span> <span class="token attr-value">true    </span><span class="token comment" spellcheck="true"># Set up  for  Log Facter  5    </span><span class="token attr-name">log4j.appender.socket.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.socket.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[start] % d  {DATE} [DATE] % n % p[PRIORITY] % n % x[NDC] % n % t[THREAD] % n % c[CATEGORY] % n % m[MESSAGE] % n % n   </span><span class="token comment" spellcheck="true"># Log Factor  5  Appender   </span><span class="token attr-name">log4j.appender.LF5_APPENDER</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.lf5.LF5Appender   </span><span class="token attr-name">log4j.appender.LF5_APPENDER.MaxNumberOfRecords</span> <span class="token punctuation">=</span> <span class="token attr-value">2000    </span><span class="token comment" spellcheck="true"># 发送日志给邮件   </span><span class="token attr-name">log4j.appender.mail</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.net.SMTPAppender   </span><span class="token attr-name">log4j.appender.mail.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">FATA   </span><span class="token attr-name">log4j.appender.mail.BufferSize</span> <span class="token punctuation">=</span> <span class="token attr-value">10    </span><span class="token attr-name">log4j.appender.mail.From</span> <span class="token punctuation">=</span> <span class="token attr-value">web@www.wuset.com   </span><span class="token attr-name">log4j.appender.mail.SMTPHost</span> <span class="token punctuation">=</span> <span class="token attr-value">www.wusetu.com   </span><span class="token attr-name">log4j.appender.mail.Subject</span> <span class="token punctuation">=</span> <span class="token attr-value">Log4J Message   </span><span class="token attr-name">log4j.appender.mail.To</span> <span class="token punctuation">=</span> <span class="token attr-value">web@www.wusetu.com   </span><span class="token attr-name">log4j.appender.mail.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.mail.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span><span class="token comment" spellcheck="true"># 用于数据库   </span><span class="token attr-name">log4j.appender.database</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.jdbc.JDBCAppender   </span><span class="token attr-name">log4j.appender.database.URL</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql: // localhost:3306/test    </span><span class="token attr-name">log4j.appender.database.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver   </span><span class="token attr-name">log4j.appender.database.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root   </span><span class="token attr-name">log4j.appender.database.password</span> <span class="token punctuation">=</span>   <span class="token attr-value"> </span><span class="token attr-name">log4j.appender.database.sql</span> <span class="token punctuation">=</span> <span class="token attr-value">INSERT INTO LOG4J (Message) VALUES ( ' [framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n ' )   </span><span class="token attr-name">log4j.appender.database.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.database.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span><span class="token attr-name">log4j.appender.A1</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender   </span><span class="token attr-name">log4j.appender.A1.File</span> <span class="token punctuation">=</span> <span class="token attr-value">SampleMessages.log4j   </span><span class="token attr-name">log4j.appender.A1.DatePattern</span> <span class="token punctuation">=</span> <span class="token attr-value">yyyyMMdd - HH ' .log4j '    </span><span class="token attr-name">log4j.appender.A1.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.xml.XMLLayout   </span><span class="token comment" spellcheck="true">#自定义Appender   </span><span class="token attr-name">log4j.appender.im</span>  <span class="token punctuation">=</span>  <span class="token attr-value">net.cybercorlin.util.logger.appender.IMAppender   </span><span class="token attr-name">log4j.appender.im.host</span>  <span class="token punctuation">=</span>  <span class="token attr-value">mail.cybercorlin.net   </span><span class="token attr-name">log4j.appender.im.username</span>  <span class="token punctuation">=</span>  <span class="token attr-value">username   </span><span class="token attr-name">log4j.appender.im.password</span>  <span class="token punctuation">=</span>  <span class="token attr-value">password   </span><span class="token attr-name">log4j.appender.im.recipient</span>  <span class="token punctuation">=</span>  <span class="token attr-value">corlin@cybercorlin.net   </span><span class="token attr-name">log4j.appender.im.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.im.layout.ConversionPattern</span>  <span class="token punctuation">=</span> <span class="token attr-value">[framework]  % d  -   % c  -%- 4r [ % t]  %- 5p  % c  % x  -   % m % n   </span></code></pre><p>自定义log4j文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等为Debug的日志信息输出到console和file这两个地方</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG,console,file </span><span class="token comment" spellcheck="true">#控制台相关设置 </span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender   </span><span class="token attr-name">log4j.appender.console.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG   </span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out   </span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出相关设置   </span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.FileAppender   </span><span class="token comment" spellcheck="true">#日志文件的路径  </span><span class="token attr-name">log4j.appender.file.File</span> <span class="token punctuation">=</span> <span class="token attr-value">./log/itxing.log</span><span class="token attr-name">log4j.appender.file.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">false    </span><span class="token attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout   </span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%p][%d{yyyy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><p>3.配置log4j为日志的实现</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--将std实现转换成log4j实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>4.简单使用log4j</p><blockquote><p>使用Logger类需要导入，import org.apache.log4j.Logger;</p><p>日志级别：<strong>ERROR、WARN、INFO、DEBUG</strong></p></blockquote><p><strong>分页：</strong></p><p>1.使用limit分页</p><blockquote><p>select * from user limit  startIndex,pagesize</p></blockquote><p>2.使用mybatis分页：使用万能的参数map，将参数传递到dao查询</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span>         <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select  * from test.user limit #{startIndex},#{pageSize}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>java类中使用map传参</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//测试分页查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userLimit <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>3.面向对象实现分页，使用一个对象RowBounds</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--使用面向对象实现分页--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserLimitByObj<span class="token punctuation">"</span></span>   <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select  * from test.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RowBounds row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> objects <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.itxing.dao.UserMapper.getUserLimitByObj"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User object <span class="token operator">:</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.使用分页插件PageHelper</p><p><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">插件官网</a></p><p><strong>注解开发：</strong> 主要是为了让解耦</p><p>注解的接口：，在接口方法上写上sql，适用于简单的增删改查操作，对于复杂的sql最好使用配置进行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/19-mybatis */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询注解，获取所有的产品信息</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from test.product"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">getProductAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件查询注解</span>    <span class="token comment" spellcheck="true">//@Param基本类型或者String类型，需要加上注解，引用类型不需要加</span>    <span class="token comment" spellcheck="true">//如果只有一个基本类型的话，可忽略，sql中的引用就是@Param中设定的属性名</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from test.product where pid = #{pid}"</span><span class="token punctuation">)</span>    Product <span class="token function">getProductById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入数据注解</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into test.product(pid,pname,pprice,pcategary) values(#{pid},#{pname},#{pprice},#{pcategary})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">addProduct</span><span class="token punctuation">(</span>Product product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>底层原理是反射技术、动态代理。代理模式、工厂模式、单例模式</p><p>修改工具类，使得能够对事物进行设置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>             sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有sqlSessionFactory就从工厂中获取SqlSession的实例</span>    <span class="token comment" spellcheck="true">//SqlSession完全包含了面向数据库执行sql命令所需的所有方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置参数开启事务，最好不适用自动提交事务，自己的代码应try捕获异常</span>    <span class="token comment" spellcheck="true">//有sqlSessionFactory就从工厂中获取SqlSession的实例</span>    <span class="token comment" spellcheck="true">//SqlSession完全包含了面向数据库执行sql命令所需的所有方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lombok插件：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>lombok常用注解：</p><blockquote><p>@Data   自动生成get/set<br>@NoArgsConstructor  无参构造函数<br>@ToString   toString方法<br>@AllArgsConstructor    全参数构造函数</p></blockquote><p><strong>Mybatis复杂查询</strong></p><p>多对一和一对多，站在不同的角度。再提resultMap</p><blockquote><p>resultMap元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets数据提取代码中解放出来，并在一些情形下允许你进行一些JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份  resultMap能够代替实现同等功能的数千行代码。</p></blockquote><p>建立复杂查询关联表：学生表和教师表，一个老师对应对个学生,测试使用的表</p><pre class=" language-mysql"><code class="language-mysql">##生成一张教师表CREATE TABLE `teacher`(    `id` INT(10) NOT NULL,    `name` VARCHAR(30) DEFAULT NULL,    PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8;###插入教师数据INSERT INTO `teacher`(`id`,`name`) VALUES(1,'xing');#生成一张学生表，关联老师CREATE TABLE `student`(    `id` INT(10) NOT NULL,    `name` VARCHAR(30) DEFAULT NULL,    `tid` INT(10) DEFAULT NULL,    PRIMARY KEY(`id`),    KEY `fktid` (`tid`),    CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`))ENGINE = INNODB DEFAULT CHARSET=utf8;##插入多个学生INSERT INTO `student`(`id`,`name`,`tid`) VALUES (1,'小一',1);INSERT INTO `student`(`id`,`name`,`tid`) VALUES (2,'小二',1);INSERT INTO `student`(`id`,`name`,`tid`) VALUES (3,'小三',1);INSERT INTO `student`(`id`,`name`,`tid`) VALUES (4,'小四',1);INSERT INTO `student`(`id`,`name`,`tid`) VALUES (5,'小五',1);</code></pre><p>1.多对一处理</p><p>方式一：创建对应的实体类(方式一相当于两步进行操作，第一步先将学生查询出来，第二步根据学生查询出来的结果查询外键关联的表)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/20-mybatis */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学生关联老师,对应的老师类型</span>    Teacher teacher<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/20-mybatis */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编写对应的配置文件</p><p>主配置文件中为两个实体类配置别名</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Student<span class="token punctuation">"</span></span>   <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>Student对应的mapper配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--首先查询响应的学生，根据学生的tid查询老师    查询结果进行结果集映射，学生中的教师信息使用association进行映射，将根据结果集中的id进行教师信息查询    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.teacher where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>Teacher对应的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.TeacherMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>查询学生学生中包含有对应的教师字段：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//查询学生，以及其对应的老师信息</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>方式二：按照结果嵌套处理(联合查询)</p><p>学生的配置文件中,一个sql先将表中的所有关系查询出来在进行结果映射</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--方式二，查询学生--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select s.id sid,s.name sname,t.name tname from test.student s,test.teacher t where s.tid=t.id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span>  <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>2.一对多，一个老师对应多个学生，需要在老师表中添加外键</p><p>方式一：一条sql查询老师下的所有学生</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学生关联老师,一对多时只是存放教师的id</span>    <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一对多,一个老师对应多个学生，使用一个集合</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> student<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>主配置文件不变，student和teacher配置文件不同</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--教师的配置文件中的配置，一条sql语句将记录查询出来在进行map映射--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select t.id tid,t.name tname,s.name snamefrom test.teacher t,test.student s where t.id = s.tid    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        多对一使用的是对象 association 一对多使用的是collection        javaType="Student"指定属性类型        集合中使用泛型信息 ofType指定类型        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOneToMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TeacherMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teacher2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getTeacher2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Teacher teacher <span class="token operator">:</span> teacher2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>方式二：先将教师查询出来再去查询对应的学生信息，一对多使用的是collection</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher3<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.teacher where id=#{tid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--collection中property是Teacher类中的学生字段，javaType是对应属性的类型，集合类型的实现类型，ofType是集合的泛型约束类型，select表示再次进行查询--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student where tid = #{tid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">selectTeacherByid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TeacherMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teacher3 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getTeacher3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Teacher teacher <span class="token operator">:</span> teacher3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>注:多对一：association    一对多collection</p><p>javaType表示实体类的属性类型 和ofType表示集合类的泛型中的约束类型</p><p><strong>动态sql</strong></p><p>根据不同的条件生成不同的sql语句，获取不同的数据</p><p>测试的数据库文件</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog`(    `id` VARCHAR(50) NOT NULL ,    `title` VARCHAR(100)NOT NULL,    `author` VARCHAR(30) NOT NULL,    `create_time` DATETIME NOT NULL ,    `views` INT(30) NOT NULL)ENGINE = INNODB DEFAULT CHARSET = utf8;INSERT INTO blog(id,title,author,create_time,views) VALUES('1','nihao','itxing','2020-05-20',10)</code></pre><p>解决数据库字段与实体类命名不一致，最好使用驼峰命名规则</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启驼峰命名规则--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCameCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>setting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>对应的实体类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/20-mybatis */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据库的字段为 create_time，使用驼峰命名转换</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>动态sql之if，在blogmapper.xml中配置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.blog where 1=1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title = #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--或则使用where标签，上面与下面的功能一致，使用一种即可--></span> <span class="token comment" spellcheck="true">&lt;!--条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--每一个都加入标签就算只有第一个有值，会变成where and mybatis会将第一个and去掉保证sql正确--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and title = #{title}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author = #{author}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>choose(when、where)</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--choose和when相当于java中的switch case语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    title=#{title}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    and  author=#{author}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                    and views=#{views}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>trim、where、set</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--set标签，会自动将中间的set之后的参数“,”去掉--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update blog       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               title = #{title},           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               author = #{author},           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>抽取公共部分</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--使用sql标签以及include便签将可以重用的程序抽取出来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from test.blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--修改对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if_title_author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>foreach部分查询，动态拼接出来sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--SELECT * FROM test.blog WHERE 1=1 AND (id=1 OR id = 2 OR id = 5)进行xml配置中时，传入参数为map将map中传入一个id集合的，循环遍历集合将数据填入拼接sql语句--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select  * from test.blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              id = #{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>mybatis缓存：</strong></p><p>1.缓存是存在内存中的临时的数据，将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘上查询，从缓存中查询，从而提高效率，一定程度上解决高并发系统的性能问题。</p><p>2.使用缓存减少用户和数据库的交互次数，减少系统的消耗，提高系统的效率</p><p>3.适合使用缓存的是经常查询且不经常改变的数据</p><p>Mybatis中默认开启以及缓存，Sqlsession级别称为本地缓存，二级缓存需要手动的开启，基于namespace级别的缓存。</p><p>缓存清理策略：</p><blockquote><p>LRU：最近最少使用过期策略</p><p>FIFO：先进先出</p><p>SOFT：软引用</p><p>WEAK：虚引用</p></blockquote><p>在同一个Sqlsession中查询同一个语句执行一次，查询不同的语句查询两次，以及缓存默认开启，不能关闭在同一个SqlSession中有效可以手动清理缓存，增删改对数据库进行写操作的时候一定会刷新缓存</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不清理缓存时，默认开启一级缓存，查询相同的语句只执行一次，只在一次SqlSession中有效  </span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        sqlSession.clearCache();</span>        User user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mybatis052201.png" alt="image-20200522120012052"></p><p>清理以及缓存将sqlSession.clearCache()代码开启，执行结果会有两次与数据库交互。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mybatis052202.png" alt="image-20200522120305793"></p><p>xml中设置缓存的参数：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" target="_blank" rel="noopener">xml文件的设置参数</a></p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--配置日志，必须放在pro和set之间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启驼峰命名规则--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>setting</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置二级缓存--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>setting</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>缓存常用参数设置：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--缓存算法先进先出，大小为512--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>           <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>         <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>          <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span></code></pre><p>二级缓存的测试，两次查询使用两个sqlSession回话</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建两个SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession2 <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个回话查询用户1</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二个回话查询用户1</span>        UserMapper mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在缓存时，需要将对象进行实例化。</p><p>Ehcache自定义缓存,导入依赖，添加配置</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>创建一个ehcache.xml的文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding = "UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tmpdit/Tmp_Ehcache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--    Mandatory Default Cache configuration. These settings will be applied to caches    created programmtically using CacheManager.add(String cacheName)    --></span>    <span class="token comment" spellcheck="true">&lt;!--       name:缓存名称。       maxElementsInMemory：缓存最大个数。       eternal:对象是否永久有效，一但设置了，timeout将不起作用。       timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。       timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。       overflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。       diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。       maxElementsOnDisk：硬盘最大缓存个数。       diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.       diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。       memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。       clearOnFlush：内存数量最大时是否清除。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000000<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><p>在mapper.xml中使用</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--也可以使用自定义的缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span></code></pre><p>总结：</p><p>注意点：mapper绑定文件时，需要注意使用resource可以在任何位置，使用class时需要保证mapper接口与mapper.xml配置在同一包下</p><p>mybatis中的重点包括分页、mybatis二级缓存、动态sql(if、foreach、choose、when、trim)等、#{}表示预编译处理和${}字符串替换。mybatis中的一对多和多对一，以及懒加载(只有关联对象时支持懒加载)、mybatis的好处以及和hibernate的区别。</p><p>mybatis与hibernate不同</p><blockquote><p>1.hibernate是一个ORM框架，不需要写sql语句，mybatis需要程序员自己写sql语句，<br>mybatis通过XML或注解形式灵活配置运行sql语句，将sql执行的结果映射成java对象<br>2.mybits易学，程序员直接编写原生的sql，适合对关系数据模型要求不高的软件开发，<br>但是对于不同的数据库，hibernate可以无关数据库<br>3.hibernate对象/关系映射能力强，数据库无关性好，可以节省很多代码.总之，按照要求的框架，维护性、扩展性良好的软件框架都是好框架xml文件使用命名空间与接口文件进行绑定使用原始的dao接口等进行开发，需要自己传入sqlSessionFactory，每个dao方法中需要自己手动获取opensession对象。</p></blockquote><p>mybatis配置文件的参数顺序是固定的。</p><p>mappers映射器:</p><blockquote><p>1.使用resource寻找对应的xml文件，寻找sql语句文件，再找到接口文件<br>2.使用class类型声明时，只能填写mapper接口类，必须要遵循原则使用同名称的文件名（接口文件与xml文件的类名相同）且在同一包下<br>3.使用url指定路径，但是必须使用物理路径（不适用）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService客户端调用</title>
      <link href="/2020/05/19/webservice-diao-yong-jie-kou/"/>
      <url>/2020/05/19/webservice-diao-yong-jie-kou/</url>
      
        <content type="html"><![CDATA[<p>Webservice调用接口：</p><blockquote><p>Web Service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的交互操作的应用程序。WebService就是一种<strong>跨编程语言和跨操作系统平台的远程调用技术</strong>。</p></blockquote><p><strong>Webservice：</strong>Web Service = SOAP + HTTP + WSDL</p><blockquote><p>其中，SOAP Simple Object Access Protocol）协议是web  service的主体，它通过HTTP或者SMTP等应用层协议进行通讯，自身使用XML文件来描述程序的函数方法和参数信息，从而完成不同主机的异构系统间的计算服务处理。这里的WSDL（Web Services Description Language）web  服务描述语言也是一个XML文档，它通过HTTP向公众发布，公告客户端程序关于某个具体的 Web  service服务的URL信息、方法的命名，参数，返回值等。</p></blockquote><p><strong>WebService学习需要的技术支持：</strong></p><p>XML和XSD</p><blockquote><p>可扩展的标记语言（标准通用标记语言下的一个子集）是Web Service平台中表示数据的基本格式。除了易于建立和易于分析外，XML主要的优点在于它既与平台无关，又与厂商无关。XML是由万维网协会(W3C)创建，W3C制定的XML SchemaXSD　定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。</p></blockquote><p>SOAP</p><blockquote><p>SOAP即简单对象访问协议(Simple Object Access Protocol)，它是用于交换XML（标准通用标记语言下的一个子集）编码信息的轻量级协议。</p></blockquote><p>WSDL</p><blockquote><p>Web Service描述语言WSDL　就是用机器能阅读的方式提供的一个正式描述文档而基于XML（标准通用标记语言下的一个子集）的语言，用于描述Web Service及其函数、参数和返回值。</p></blockquote><p>UDDI</p><blockquote><p>UDDI是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。</p></blockquote><p>调用RPC与消息传递</p><blockquote><p>通过IPC和RPC，程序能利用其它程序或计算机处理的进程。客户机/服务器模式计算把远程过程调用与其它技术（如消息传递）一道，作为系统间通信的一种机制。客户机执行自己的任务，但靠服务器提供后端文件服务。</p></blockquote><p><strong>Java WebService规范：</strong><a href="https://blog.csdn.net/c99463904/article/details/76018436" target="_blank" rel="noopener">参考博客</a></p><blockquote><p>1.JAX-WS</p><p>JAX-WS（Java API For XML-WebService）。早期的基于SOAP 的JAVA 的Web 服务规范JAX-RPC（java API For XML-Remote Procedure Call）目前已经被JAX-WS 规范取代，JAX-WS 是JAX-RPC 的演进版本，但JAX-WS 并不完全向后兼容JAX-RPC，二者最大的区别就是RPC/encoded 样式的WSDL，JAX-WS 已经不提供这种支持。JAX-RPC 的API 从JAVA EE5 开始已经移除，如果你使用J2EE1.4，其API 位于javax.xml.rpc.包。JAX-WS（JSR 224）规范的API 位于javax.xml.ws.包，其中大部分都是注解，提供API 操作Web 服务（通常在客户端使用的较多，由于客户端可以借助SDK 生成，因此这个包中的API 我们较少会直接使用）。</p><p>2.JAXM&amp;ASSJ</p><p>JAXM（JAVA API For XML Message）主要定义了包含了发送和接收消息所需的API，相当于Web 服务的服务器端，其API 位于javax.messaging.*包，它是Java EE 的可选包，因此你需要单独下载。</p><p>SAAJ（SOAP With Attachment API For Java，JSR 67）是与JAXM 搭配使用的API，为构建SOAP 包和解析SOAP 包提供了重要的支持，支持附件传输，它在服务器端、客户端都需要使用。这里还要提到的是SAAJ 规范，其API 位于javax.xml.soap.*包<br>JAXM&amp;SAAJ 与JAX-WS 都是基于SOAP 的Web 服务，相比之下JAXM&amp;SAAJ 暴漏了SOAP更多的底层细节，编码比较麻烦</p><p>3.JAX-RS</p><p>JAX-RS 是JAVA 针对REST(Representation State Transfer)风格制定的一套Web 服务规范</p></blockquote><p>wsdl文档：</p><p><a href="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl" target="_blank" rel="noopener">手机号码查询的wsdl</a></p><blockquote><p>Service：相关端口的集合，包括其关联的接口、操作、消息等。</p><p>Binding：特定端口类型的具体协议和数据格式规范</p><p>portType: 服务端点，描述 web service可被执行的操作方法，以及相关的消息，通过binding指向portType</p><p>message: 定义一个操作（方法）的数据参数</p><p>types: 定义 web service 使用的全部数据类型</p></blockquote><p>SOAP：http+xml</p><blockquote><p>必需的 Envelope 元素，可把此 XML 文档标识为一条 SOAP 消息<br>可选的 Header 元素，包含头部信息<br>必需的 Body 元素，包含所有的调用和响应信息<br>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</p></blockquote><p>WebService客户端调用方式</p><p>方式一：根据wsdl创建客户端程序(需要通过wsdl将代码复现到本地，引入项目中使用)</p><blockquote><p>wsimport -p cn.cad.mobile -s  <a href="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl" target="_blank" rel="noopener">http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl</a></p><p>wsimport   命令参数  包名  参数  wsdl文档地址</p></blockquote><p>方式二：service编程调用方式(需要通过wsdl将代码复现到本地，引入项目中使用)</p><p><strong>注：</strong> 这个程序使用的包重名的类有点多，一个一个进行试出来的，所以在此将import也列举出来，否则导入时不知道那个包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xing<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>namespace<span class="token punctuation">.</span>QName<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ws<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>cad<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>MobileCodeWSSoap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Class_Name MobileTestMethod2 * @Class_Desc (wenservice客户端调用方式2) * @author it星 * @date 2020年5月19日上午11:00:21 * @Version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobileTestMethod2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建WSDL文件URL</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建服务名称</span>        <span class="token comment" spellcheck="true">// 参数1：namespaceURI-命名空间地址</span>        <span class="token comment" spellcheck="true">// 参数2：localPart服务视图名</span>        QName serviceName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QName</span><span class="token punctuation">(</span><span class="token string">"http://WebXml.com.cn/"</span><span class="token punctuation">,</span> <span class="token string">"MobileCodeWS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Service service <span class="token operator">=</span> Service<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        MobileCodeWSSoap mobile <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span>MobileCodeWSSoap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数1传递自己测试的电话，参数二免费用户为空</span>        String message <span class="token operator">=</span> mobile<span class="token punctuation">.</span><span class="token function">getMobileCodeInfo</span><span class="token punctuation">(</span><span class="token string">"12345678965"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方式三：HttpURLConnection调用方式(自己编写客户端程序，较麻烦)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xing<span class="token punctuation">.</span>cxf<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Class_Name TestEnglishParse * @Class_Desc (Webservice客户端程序) * @author it星 * @date 2020年5月19日上午10:57:47 * @Version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEnglishParse</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getXmlMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getXmlMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建服务器地址</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第二步打开一个通向服务地址的连接</span>            HttpURLConnection openConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第三步设置请求参数</span>            openConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置数据格式</span>            openConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/xml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuilder sb <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置输入输出</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第四步，组织soap数据，发送请求</span>            String soapXml <span class="token operator">=</span> <span class="token function">getXML</span><span class="token punctuation">(</span><span class="token string">"18091324972"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将信息以流的方式发送出去</span>            OutputStream os <span class="token operator">=</span> openConnection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>soapXml<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 接受服务端响应，打印</span>            <span class="token keyword">int</span> responseCode <span class="token operator">=</span> openConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseCode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">==</span> responseCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 服务器响应成功</span>                BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String temp <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"soapXml"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getXML</span><span class="token punctuation">(</span>String phoneNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String soapXML <span class="token operator">=</span> <span class="token string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>"</span>                <span class="token operator">+</span> <span class="token string">"&lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">"</span>                <span class="token operator">+</span> <span class="token string">"&lt;soap:Body>"</span> <span class="token operator">+</span> <span class="token string">"&lt;getMobileCodeInfo xmlns=\"http://WebXml.com.cn/\">"</span> <span class="token operator">+</span> <span class="token string">"&lt;mobileCode>"</span> <span class="token operator">+</span> phoneNum                <span class="token operator">+</span> <span class="token string">"&lt;/mobileCode>"</span> <span class="token operator">+</span> <span class="token string">"&lt;userID>&lt;/userID>"</span> <span class="token operator">+</span> <span class="token string">"&lt;/getMobileCodeInfo>"</span> <span class="token operator">+</span> <span class="token string">"&lt;/soap:Body>"</span> <span class="token operator">+</span> <span class="token string">"&lt;/soap:Envelope>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> soapXML<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>开发步骤：</strong> </p><blockquote><p>第一步：创建服务地址</p><p>第二步：打开一个通向服务地址的连接</p><p>第三步：设置参数</p><p>第四步：组织SOAP数据，发送请求</p><p>第五步：接收服务端响应 </p></blockquote><p>调用结果:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getMobileCodeInfoResponse</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://WebXml.com.cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getMobileCodeInfoResult</span><span class="token punctuation">></span></span>XXXXXXXX：陕西 渭南 陕西电信CDMA卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getMobileCodeInfoResult</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getMobileCodeInfoResponse</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span></code></pre><p><strong>WebService的相关注解：</strong></p><blockquote><p>WebService的注解都位于javax.jws包下: </p><p>@WebService-定义服务，在类上边<br>    targetNamespace：指定命名空间<br>    name：portType的名称<br>    portName：port的名称<br>    serviceName：服务名称<br>    endpointInterface：SEI接口地址，如果一个服务类实现了多个接口，只需要发布一个接口的方法，可通过此注解指定要发布服务的接口。 </p><p>@WebMethod-定义方法，在公开方法上边<br>    operationName：方法名<br>    exclude：设置为true表示此方法不是webservice方法，反之则表示webservice方法，默认是false </p><p>@WebResult-定义返回值，在方法返回值前边<br>    name：返回结果值的名称 </p><p>@WebParam-定义参数，在方法参数前边<br>    name：指定参数的名称</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习(一)</title>
      <link href="/2020/05/18/mybatis-xue-xi-yi/"/>
      <url>/2020/05/18/mybatis-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>JDBC连接数据库：</p><p>步骤:</p><blockquote><p>注册驱动：Class.forname(“jdbc驱动”);</p><p>获取连接:Connection conn = DriverManager.getConnection(url,username,password);</p><p>获取执行对象:</p><p>String sql = “某SQL语句”;</p><p>获取Statement语句执行平台：Statement stmt = con.createStatement();</p><p>处理结果集</p><p>释放资源</p><p>使用预处理对象放置sql注入PreparedStatement</p><p>常用的方法：</p><p>int executeUpdate(); –执行insert update delete语句.</p><p>ResultSet executeQuery(); –执行select语句.</p><p>boolean execute(); –执行select返回true 执行其他的语句返回false.</p></blockquote><p>jdbc连接数据库的增删改查：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldMsqlDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"yourname"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String PASS <span class="token operator">=</span> <span class="token string">"yourpasseord"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        queryUser();</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPws</span><span class="token punctuation">(</span><span class="token string">"0514"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        int i = insert(user);</span><span class="token comment" spellcheck="true">//        System.out.println(i);</span><span class="token comment" spellcheck="true">//        int delete = delete(7);</span><span class="token comment" spellcheck="true">//        System.out.println(delete);</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据库新增人员</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span> DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建sql</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into user(id,name,pws) values(?,?,?)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建Statement对象</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPws</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span> conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span>null<span class="token punctuation">)</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除指定的人员信息</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//编写sql</span>            String sql <span class="token operator">=</span> <span class="token string">"delete from user where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行对象</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            String message <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span>null<span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改执行的人员信息</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//编写sql</span>            String sql <span class="token operator">=</span> <span class="token string">"update user set name = ?,pws = ? where id =?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行对象</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPws</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span>null<span class="token punctuation">)</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>             ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询数据库中所有的人员</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"opening the databases..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建sql</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行对象</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet res <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历结果集</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String pws <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">" name = "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" pws = "</span><span class="token operator">+</span>pws<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span> conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span>null<span class="token punctuation">)</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop connect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JDBC连接数据库所产生的问题：</p><blockquote><p>1.sql频繁连接问题                   2.sql在程序代码之中不便于维护</p><p>3.sql语句参数配置问题           4.对结果集解决的麻烦</p></blockquote><p>环境：jdk1.8、mysql5.5、maven3.3.9、idea</p><p><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis中文官网</a></p><p><strong>1.什么是Mybatis?</strong></p><blockquote><p>1.MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射</p><p>2.MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</p><p>3.MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><p>Mybatis源码以及jar包的位置:</p><p><a href="https://github.com/mybatis/mybatis-3/releases">Mybatis下载地址</a></p><p>Maven官网搜索pom</p><p><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis" target="_blank" rel="noopener">MYbatis的Maven依赖</a></p><p><strong>2.持久层</strong></p><blockquote><p>数据持久化：持久化就是将程序的数据持久状态和瞬时状态转换的过程</p><p>内存特点是断电即失、数据库为了持久化</p><p>持久层是将数据持久化的一些代码逻辑</p></blockquote><p>Mybatis优点：</p><blockquote><p>灵活、sql和代码的分离，提高了代码的可维护性；提供映射标签，支持对象与数据库的orm字段关系映射；提供对象关系映射标签，支持对象关系组件维护；提供xml标签，支持编写动态sql</p></blockquote><p>3.Mybatis第一个程序:</p><p>步骤:搭建环境—&gt;导入Mybatis—-&gt;编写代码—–&gt;测试</p><p>搭建环境：</p><p>3.1创建数据库，并创建表   其中的单引号不是’’而是``</p><pre class=" language-mysql"><code class="language-mysql">##创建数据库create database `test`;use `test`;##创建数据库中的表create table ``(    `id` int(20) NOT NULL PRIMARY KEY,    `name` VARCHAR(30) DEFAULT NULL,    `pwd` VARCHAR(30) DEFAULT NULL)ENGINE = INNODB DEFAULT CHARSET = UTF8;##插入数据INSERT INTO `user`(`id`,`name`,`pwd`) VALUES(1,`啦啦啦`,`123`),(2,`啦啦啦2`,`123`),(3,`啦啦啦3`,`123`)</code></pre><p>3.2新建maven项目</p><p>maven项目的创建可以参照:<a href="https://fengyanxing.github.io/2020/05/14/maven-gong-ju/" target="_blank" rel="noopener">maven项目创建</a></p><blockquote><p>1.创建一个普通的maven项目</p><p>2.删除src目录</p><p>3.导入依赖</p></blockquote><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.18.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql连接包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--单元测试包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--lombok依赖，简化pojo，还需要安装插件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>3.3 创建一个子模块module</p><p>编写mapper文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--数据库事务管理--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?userSSL <span class="token punctuation">=</span> true&amp;amp;useUnocoder<span class="token punctuation">=</span>true&amp;amp;charsetEnconding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yourname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yourpassword<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>编写工具类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis *使用静态代码块获取SqlSessionFactory进而获取SqlSession对象，用来操作数据库 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>             sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有sqlSessionFactory就从工厂中获取SqlSession的实例</span>    <span class="token comment" spellcheck="true">//SqlSession完全包含了面向数据库执行sql命令所需的所有方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建实体类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis *使用lombok不用编写get set方法以及构造器等，idean使用lombok只导入依赖不可以使用时需要安装插件。 */</span><span class="token comment" spellcheck="true">//lombok注解</span><span class="token annotation punctuation">@Data</span> <span class="token comment" spellcheck="true">//表示生成该类是一个数据类</span><span class="token annotation punctuation">@NoArgsConstructor</span> <span class="token comment" spellcheck="true">//空参构造</span><span class="token annotation punctuation">@ToString</span> <span class="token comment" spellcheck="true">//重写tostring方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建Dao接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口实现类(原始的开发使用UserdaoImpl实现UserDao)转换成了XXXMapper.xml配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace绑定mapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from test.user   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>测试：在test下的java建立与源资源相同的路径(最好是这样)，创建测试类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/18-mybatis */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList<span class="token operator">=</span>userDao<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>错误1：</p><blockquote><p> Type interface com.itxing.dao.UserDao is not known to the MapperRegistry</p><p>该错误的出现是因为配置文件没有在主配置文件中映射</p></blockquote><p>解决方案：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mybatis01.png" alt="image-20200518104830245"></p><p>错误2：</p><blockquote><p>Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com/itxing/dao/userMapper.xml</p></blockquote><p>解决方案：</p><p>每一个mapper.xml文件需要在mabits中去注册,需要在pom.xml(父子工程中都进行配置)中：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--maven由于约定大于配置，有可能maven项目的配置文件无法被导出或者生效，需要配置builder--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>Mybatis核心类作用域和生命周期：</p><p><strong>SqlSessionFactoryBuilder：</strong>生命周期是一旦创建了SqlSessionFactory，就不再需要它，因此其作用域是方法作用域，当做局部变量(建造者模式)</p><p><strong>SqlSessionFactory：</strong> 一旦被创建就一直存在，不需要多次创建，作用域是应作用域，使用<strong>单例模式保证应用中的唯一性</strong></p><p><strong>SqlSession：</strong>每个线程都有自己的sqlSession实例，线程不安全，不能被共享，作用域为请求或方法作用域。</p><p>mapper文件中的namespace，其值与dao中的接口相一致</p><p>mybatis中对于数据库的增删改操作需要使用事务，使用sqlSession进行提交。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//对于增删改必须使用事务提交</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mess <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"hant"</span><span class="token punctuation">,</span> <span class="token string">"321"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要使用事务提交</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>4.参数map</strong></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        insert into test.user(id,name,pws) values(#{id},#{name},#{pws})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hanhan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pws"</span><span class="token punctuation">,</span><span class="token string">"ixhuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mess <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Map传递参数，直接在sql中取出key即可[parameterType=“map”],对象传递参数，直接在sql中取对象的属性即可[parameterType=”Object”]只有一个基本类型参数的情况下，可以直接在sql中取到，多个参数用Map或者注解。</p><p>模糊查询：</p><blockquote><p>1.java代码执行时，传递通配符,java代码传参</p><p>List&lt; User&gt; userlist = mapper.getUserLike(“%tain%”);</p><p>2.在sql拼接中使用通配符，xml配置中写成固定</p><p>select * from test.user where name like “%”#{value}”%”</p></blockquote><p>配置解析：<strong>Mybatis默认的事务管理器是JDBC，默认的连接池是POOLED</strong></p><p><strong>5.配置文件的属性有顺序：</strong></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mybatis03.png" alt="image-20200518171416904"></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/mybatisconfig02.png" alt="image-20200518164921029"></p><p><strong>环境配置:</strong></p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--数据库事务管理--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token comment" spellcheck="true">&lt;!--数据连接池--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?userSSL <span class="token punctuation">=</span> true&amp;amp;useUnocoder<span class="token punctuation">=</span>true&amp;amp;charsetEnconding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yourname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yourpassword<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--另一个环境，比如其他的数据库--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span></code></pre><p><strong>属性Properties</strong></p><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--配置，引入外部的外部配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span></code></pre><p>外部配置文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/test?userSSL=true&amp;amp;useUnicoder=true&amp;ampcharSet=UTF-8;</span><span class="token attr-name">jdbc.username</span> <span class="token punctuation">=</span> <span class="token attr-value">XXX</span><span class="token attr-name">jdbc.password</span> <span class="token punctuation">=</span> <span class="token attr-value">XXX</span></code></pre><p><strong>类型别名(typeAliases)：</strong></p><p>方式一：类型别名是为java类型设置一个短的名字，减少类的完全限定名的冗余</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>方式二：指定一个包名，Mybatis会在包下面搜索需要的java Bean，默认的别名为类名的首字母小写。</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>第二种方式，如果需要自定义别名，可以使用注解进行设置@Alias(“user”)</p><p><strong>设置：</strong> <a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">官网上所有的Settings信息</a></p><p><strong>Mybatis其他设置：</strong> Mybatis Generator、Mybatis-plus、通用mapper</p><p>映射器(Mapper)：四种方式</p><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--资源映射，推荐--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/itxing/dao/userMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--类文件映射，接口与其对应的mapper映射文件必须同名且必须在同一个包下--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper resource="com/itxing/dao/userMapper.xml">&lt;/mapper>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--包扫描映射，接口与其对应的mapper映射文件必须同名且必须在同一个包下--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper class="com.itxing.dao.UserMapper">&lt;/mapper>--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper resource="com/itxing/dao/userMapper.xml">&lt;/mapper>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--最后一种url很少使用--></span></code></pre><p>6.属性名和字段名不一致</p><p>方式一：将sql语句中的字段进行别名</p><pre class=" language-mysql"><code class="language-mysql">select id,name,pws form user where id = 1##更改后select id,name,pws as password user where id = 1</code></pre><p>方式二：使用resultMap</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--column数据库列 映射为pojo中的属性property--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pws<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud实验</title>
      <link href="/2020/05/15/springcloud-wei-fu-wu/"/>
      <url>/2020/05/15/springcloud-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>SpringCloud微服务入门</p><p>注：个人的学习是通过视频的讲解、阅读相关数据、进行实践、记录笔记进行的，希望与君共勉。个人的实验环境是Windows7，64位，内存16G，建议16G否则效果很差。</p><p>下面是我启动三个注册中心，一个路由网关一个服务器端进行测试，使用内存启动后占11~12G</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/cpu.png" alt="启动后内存"></p><p>前提条件：在进行接下来的实现希望读者知道java的一些知识、mybatis、spring、springboot、mysql、json、maven等相关的知识。</p><p>如果读者没有学过maven，可以花几分钟读简单看一看maven创建项目的一篇博客：</p><p><a href="https://fengyanxing.github.io/2020/05/14/maven-gong-ju/" target="_blank" rel="noopener">maven学习</a></p><p>如果有什么需要的maven的依赖可以进行搜索</p><p><a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven中央库</a></p><p>springCloud官方网站，有各种的组件：</p><p><a href="https://www.springcloud.cc/" target="_blank" rel="noopener">Spring Cloud</a></p><p>SpringCloud配置中文网址</p><p><a href="https://www.springcloud.cc/spring-cloud-config.html" target="_blank" rel="noopener">Spring Cloud Config</a></p><p><strong>注：</strong>SpringCloud 是一种生态，用来解决为服务中的一些问题</p><p>实现之前必须确定自己的SpringBoot与自己的SpringCloud版本号是否对应，如果不对应就会有各种错误。</p><p><a href="https://www.cnblogs.com/zhuwenjoyce/p/10261079.html" target="_blank" rel="noopener">可以参考网上的分析</a></p><h5 id="微服务中的主要问题"><a href="#微服务中的主要问题" class="headerlink" title="微服务中的主要问题"></a>微服务中的主要问题</h5><blockquote><p>1.微服务较多，客户端如何访问？</p><p>2.服务器端之间的交互方式？</p><p>3.服务雪崩，服务器挂掉怎么办？</p><p>4.服务多是如何管理的？</p></blockquote><p>我们带着问题去进行学习，最后我们对于技术有一个宏观的把控</p><p>基本概念：API网关、HTTP/RPC、注册与发现、熔断机制（问题产生的根本原因：网络不可靠）</p><p><strong>下面是一些常见的面试中的问题：</strong></p><p>微服务之间如何通讯？</p><p>1.SpringCloud和Dubbo的区别？</p><blockquote><p>Doubbo只是为了实现服务治理，而Spring Cloud是一种生态，是微服务的一种架构，实现了微服务的方方面面，服务治理知识其中一部分</p></blockquote><table><thead><tr><th>微服务核心</th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper、Redis</td><td>SpringCloud   Netflix   Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloudconfig</td></tr><tr><td>分布式追踪系统</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p>2.SpringBoot和Spring Cloud的理解</p><p>Spring是一个快速的开发框架，可以通过maven依赖的继承方式，快速整合第三方的常用框架，完全采用注解化，简化xml配置。</p><p>SpringCloud是一整套的微服务框架，是一种生态，是一系列框架的集合。springCloud依赖springboot</p><p>3.什么是服务熔断？什么是服务降级？(正文中有答案)</p><p>4.微服务的优缺点是什么？</p><p>可以参考网上的教程：</p><p><a href="https://www.cnblogs.com/kongsq/p/9886676.html" target="_blank" rel="noopener">微服务的优缺点</a></p><p>优点：</p><blockquote><p>1.每个服务都比较简单，只关注一个业务功能</p><p>2.微服务架构方式是松耦合的，可以提供更高的灵活性</p><p>3.微服务可以通过最佳及最合适的不同的编程语言与工具进行开发</p><p>4.每个微服务可由不同的团队独立开发，互不影响，加快推出市场的速度</p><p>5.微服务架构是持续交付的巨大推动力，允许在频繁发布不同服务同时保持系统其它部分的可用性和稳定性</p></blockquote><p>缺点：</p><blockquote><p>1.运维的开销以及成本的增加</p><p>2.需要有一定的开发运维一体化技术</p><p>3.隐式的接口及接口匹配问题</p><p>4.代码重复问题</p><p>5.分布式系统的复杂性</p><p>6.一部机制</p></blockquote><p>5.你知道的微服务技术栈有哪些？</p><table><thead><tr><th>微服务开发条目</th><th>实现的技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMvc</td></tr><tr><td>服务配置与管理</td><td>Netflix公司的Arcaius、阿里的Diamond</td></tr><tr><td>服务注册与发现</td><td>Eureka、consul、Zookeeper</td></tr><tr><td>服务调用</td><td>Rest、RPC、gRpc</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx</td></tr><tr><td>服务接口调用</td><td>Fegin</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMq</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、chef</td></tr><tr><td>服务路由</td><td>Zuul</td></tr><tr><td>服务监控</td><td>Zabbix、Nagious、Metrics、Specataor</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper</td></tr><tr><td>服务部署</td><td>Docker、Openstack、Kubernetes</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream（封装Redis、Rabbit、Kafka）</td></tr><tr><td>事件消息总线</td><td>SpringCloud BUS</td></tr></tbody></table><p>6.eureka和zookeeper都可以提供服务注册与发现的功能，区别是什么？</p><blockquote><p>CAP理论支出，一个分布式系统不可能同时满足C(一致性)、A(可用性)、P(容错性)，分区容错性P在分布式系统中是必须保证的，因此我们只能在A和C之间权衡。</p><p>eureka保证AP原则；zookeeper保证CP</p><p>zookeeper可以容忍注册中心返回几分钟以前的注册信息，但不能接受服务直接挂掉，主服务器挂掉后其他的节点进行选举产生一个新的领导者，选举时间中服务不可用，服务瘫痪，导致长期服务不可以注册</p><p>Eureka首先保证了可用性，Eureka的各个节点是平等的，几个节点挂掉不会影响正常的节点工作，剩余的节点依旧可以提供注册和查询，只要注册中心有一台服务器可以使用，就可以保证注册中心的可用。</p><p>Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，不会像zookeeper那样使得整个注册服务瘫痪</p></blockquote><p>微服务中一般分为<strong>三大角色：</strong></p><p>服务注册中心：用于提供服务的注册与发现</p><p>服务提供者：将自身的服务注册到服务中心</p><p>服务的消费者：从服务注册中心获取服务</p><p><strong>Eureka服务注册与发现（相当于Zookeeper）</strong></p><p>Eureka是一个Netflix的一个子模块,也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移，服务注册与发现对于微服务是相当重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务器调用的配置文件了，功能类似于Dubbo的注册中心。</p><p><strong>原理讲解：</strong></p><p>Eureka的基本架构：</p><blockquote><p>SpringCloud封装了NetFlix公司开发的Eureka模块来实现服务注册和发现</p><p>Eureka采用CS架构设计，EurekaServer作为服务注册功能的服务器，用来服务使得注册</p><p>Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统维护人员就可以通过EurekaServer来监控系统各个微服务是否正常运行，SpringCloud的一些其他模块就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑</p></blockquote><p><strong>自我保护机制：</strong></p><p>某一时刻一个微服务不能够使用时，eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>默认情况下，Eureka在一定的时间内没有接收到某个服务实例的心跳，EurekaServer将会注销该实例，但是当网络分区故障发生时，微服务与Eureka之间无法进行正常通信，以上行为将会非常危险，因为微服务本身是健康的，此时本不应该注销这个服务。Eureka的自我保护机制来解决这个问题，当EurekaServer节点在短时间内丢失过多的客户端时，那么这个节点就会进入自我保护模式，一旦进入自我保护模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据。当网络故障恢复后，该EurekaServer节点会自动退出自我保存模式。自我保护模式是一种应用网络异常的安全保护措施，宁可同时保留所有的服务，也不盲目注销任何健康的微服务。</p><p>可以手动设置取消自我保护模式：eureka.server.enable-self-preservation = false禁止自我保护模式。</p><p>CAP原则：</p><p>RDBMS(mysql、oracle、sqlserver)——-ACID</p><p>NoSql(redis、Mongdb)—–CAP</p><p>ACID：</p><blockquote><p>原子性：Atomicity    一致性：Consistency</p><p>隔离性：Isolation     持久性：Durability</p></blockquote><p>CAP：</p><blockquote><p>强一致性：Consitency    可用性：Availability      分区容错性：Partition toleration</p></blockquote><p><strong>CAP三者只能满足两个。</strong></p><p>CAP核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性。</p><p>一般都是两个满足，</p><p>CA：单点集群，满足一致性，可用性的系统，通常可扩展性比较差</p><p>CP：满足一致性，分区容错性的系统，通常性能不是特别高</p><p>AP：满足可用性，分区容错性系统，通常可能对一致性要求低一些</p><p><strong>Eureka实现的是AP原则、Zookeeper实现遵循的是CP</strong></p><p><strong>Ribbon：</strong></p><p>ribbon是什么？</p><blockquote><p>SpringCloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong></p><p>主要功能是提供客户端的软件负载均衡算法，将NetFlix的中间层服务连接在一起，Ribbon的客户端组件提供一系列完整的配置：连接超时、重试等。就是在配置文件中列出负载均衡LoadBalancer后的所有机器，Ribbon会基于某种规则去连接这些机器。</p></blockquote><p>常见的负载均衡算法：(不是值Ribbon中的负载均衡算法，与之相关)</p><blockquote><p>1.轮询均衡（Round Robin）:每次来自网络的请求轮流分配给内部服务器，从1到N然后重新开始，这种均衡算法适合服务组中的所有服务器都有相同的硬件配置并且平均服务请求相对均衡的情况</p><p>2.权重轮询均衡(Weighted Round Robin)：根据服务器不同的处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请求。简单来说就是使得每个服务器有不同的使用率，高性能使用率更高</p><p>3.随机均衡(Random)：将请求随机分配给内部的服务器</p><p>4.权重随机均衡(Weight Random):此种均衡算法类似于权重轮循算法，不过在处理请求分担时是个随机选择的过程。  </p><p>5.响应速度均衡(Response  Time探测时间)：负载均衡设备对内部各服务器发出一个探测请求（例如 Ping），然后根据内部中各服务器对探测请求的最快响应时间来决定哪一台服务器来响应客户端的服务请求。  </p><p>6.最少连接数均衡(Last Connection):最少连接数均衡算法对内部中需负载的每一台服务器都有一个数据记录，记录当前该服务器正在处理的连接数量，当有新的服务连接请求时，将把当前请求分配给连接数最少的服务器，使均衡更加符合实际情况，负载更加均衡。此种均衡算法适合长时处理的请求服务，如 FTP。  </p><p>7.处理器能力均衡(cpu、内存)：把服务请求分配给内部中处理负荷（根据服务器 CPU 型号、 CPU 数量、内存大小及当前连接数等换算而成）最轻的服务器  </p><p>8.DNS响应均衡(Flash DNS)：把此域名解析成各自相对应服务器的 IP 地址并返回给客户端， 则客户端将以最先收到的域名解析 IP 地址来继续请求服务，而忽略其它的 IP 地址响应  </p><p>9.哈希算法：一致性 Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。  </p><p>10.IP地址散列：管理发送方 IP 和目的地 IP 地址的散列，将来自同一发送方的分组(或发送至同一目的地的分<br>组)统一转发到相同服务器的算法。  保证来自相同客户端的通信能够一直在同一服务器中进行处理。  </p><p>11.URL散列：通过管理客户端请求 URL 信息的散列，将发送至相同 URL 的请求转发至同一服务器的算法  </p></blockquote><p>客户端配置Ribbon：导入依赖，添加配置，添加注解@LoadBalance</p><p><strong>Feign负载均衡：</strong>是声明式的webService客户端，它让微服务之间的调用变得简单，类似于controller调用service，springCloud集成了Ribbon和Eureka，可以使用Feign时提供负载均衡的http客户端，需要创建一个接口并添加注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用Feign需要写一个接口，对其接口进行注解配置</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>feign是通过接口和注解的方式，ribbon是通过微服务的名称来进行负载均衡，Ribbon+RestTemplate是利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法，实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口或被多处调用，因此通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务调用。Feign在此基础上进行了进一步的封装，使用它定义和实现依赖服务接口的定义，在Feign实现下，我们只需要创建一个接口并使用注解的方式配置它，简化了SpringCLoud Ribbon，自行封装服务调用客户端的并发量。</p><p>常用的负载均衡的软件有Nginx、LVS</p><p>服务雪崩：多个服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，引起系统崩溃，即所谓的雪崩效应。</p><p><strong>Hystrix服务熔断：</strong> 服务降级、服务熔断、服务限流、接近实时监控</p><p>Hystrix是一个处于分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等。Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，向调用方式返回一个服务预期的、可处理的备选响应，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证服务调用方线程不会被长时间不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/hystrix.png" alt="熔断器"></p><blockquote><p>当 Hystrix Command 请求后端服务失败数量超过一定比例(默认 50%), 断路器会<br>切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态<br>一段时间后(默认 5 秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况,<br>如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix 的断路器<br>就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效<br>请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力  </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//服务端程序，服务端在服务有网络延时或者异常因此的服务熔断进行备选处理</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> DeptService deptService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"hystrixGet"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>       Dept dept <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dept <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",不存在用户，或者信息无法找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> dept<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//备选方法</span>   <span class="token keyword">public</span> Dept <span class="token function">hystrixGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>  Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDeptname</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"没有对应的信息，null"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"没有对应的数据库信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hystrix是服务器端的处理：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author itxing * @create 2020/5/16-spring_cloud */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment" spellcheck="true">//配置Eureka客户端，自动将服务配置到注册中心</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token comment" spellcheck="true">//服务发现</span><span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment" spellcheck="true">//注解断路器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProviderHytris</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DeptProviderHytris<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hystrix-dashboard:监控页，使用时需要确认服务端的信息是否有actuator监控信息</p><p><strong>服务降级：</strong>是在客户端进行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在接口处添加服务降级处理的实现类信息</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SPRINGCLOUD-PROVIDER"</span><span class="token punctuation">,</span>fallbackFactory <span class="token operator">=</span> DeptClientServiceFallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>服务降级实现类如下,服务降级是由客户端访问过高引起部分服务进行暂停用来处理高并发的服务，因此使用Feign尽心相关的配置：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author itxing * @create 2020/5/16-spring_cloud * * 服务降级 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptClientServiceFallbackFactory</span>  <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeptClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Dept <span class="token function">queryById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDeptname</span><span class="token punctuation">(</span><span class="token string">"id=>"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">" 没有对应的信息，客户端使用降级，服务暂时停止"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"数据源暂时关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端的yaml的配置：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8002eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka8003.com:8003/eureka/,http://eureka8004.com:8004/eureka/,http://eureka8005.com:8005/eureka/feign:  hystrix:    enabled: true</code></pre><p>API网关：</p><p>API Gateway是一个服务器，也可以说是进入系统的唯一节点。与设计模式中的Facade模式相似，APIGateWay封装内部系统的架构，并且提供API给各个客户端，还有其他的功能，例如：授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理。API网关负责请求转发、合成和协议转换，通过调用多个微服务来处理一个请求以及聚合多个服务的结果。<strong>请求转发、响应合并、协议转换、数据转换、安全认证。</strong></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/apiGateway.png" alt="API网关"></p><p><strong>Zuul路由网关：</strong> 功能是路由+过滤</p><p>Zuul路由包含了请求的路由和过滤两个最主要的功能。路由功能是将一些具体的请求转发到具体的微服务实例上，是实现外部访问同一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他服务消息。</p><p>application.yml与bootstrap.yml区别是：前者是用户级别的配置，后者是系统级别的配置</p><p>SpringBoot启动类上需要加入注解：<strong>@EnableZuulProxy</strong></p><p>路由网关的yaml配置:</p><pre class=" language-yml"><code class="language-yml">server:  port: 9527spring:  application:    name: springcloud-zuuleureka:  client:    service-url:      defaultZone: http://eureka8003.com:8003/eureka/,http://eureka8004.com:8004/eureka/,http://eureka8005.com:8005/eureka/  instance:    instance-id: zuul9527.com    prefer-ip-address: trueinfo:  app.name: itxing-springcloud  company.name: itxing.comzuul:  routes:    mydept.serviceId: spring-provider-dept    mydept.path: /mydept/**  ignored-services: "*"#springcloud-provider-dept  prefix: /itxing</code></pre><p>扩展：</p><p>REST(Resource Representational State Transfer):资源表述性状态转移</p><p>HTTP动作设计：</p><blockquote><p>GET：从服务器取出资源</p><p>POST：在服务器新建一个资源</p><p>PUT：在服务器更新一个资源，PUT更新整个对象</p><p>PATCH：在服务器更新一个资源，只更新个别属性</p><p>DELETE：从服务器删除资源</p><p>HEAD：获取一个资源的元数据，比如一个资源的hash值或最后修改日期</p><p>OPTIONS：获得客户端针对一个资源能够实施的操作(获取该资源的api)</p></blockquote><p>状态码：</p><blockquote><p>200 服务器成功返回用户请求的数据    201 用户新建或修改数据成功</p><p> 202 表示一个请求已经进入后台排队  204  用户删除数据成功</p><p> 400 用户发出的请求有错误，服务器没有进行新建或修改数据的操作</p><p> 401 表示用户没有权限，令牌、密码等问题</p><p> 403  用户得到授权但访问被禁止  404  用户请求的是不存在的记录 </p><p>406 用户请求的资源被永久删除，且不会再得到   410  用户请求的资源被永久删除，且不会再得到 </p><p>422 当创建一个对象时，发生一个验证错误   500  服务器发生错误，用户将无法判断发出的请求是否成功</p></blockquote><p>Accept属于请求头，Content-Type属于实体头，只出现在Request中，表示自己希望接收到什么样的数据类型。</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习</title>
      <link href="/2020/05/14/spring-xue-xi/"/>
      <url>/2020/05/14/spring-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>补Spring笔记，第一次学习总是没有什么印象，不断的重复学习以及使用才能更好的掌握知识点。</p><blockquote><p>循环依赖：指的是多个Bean之间的相互调用，A对象创建时，需要构造B对象，构造B对象时需要构建C对象，构建C对象时又依赖A对象</p></blockquote><h4 id="1-Spring-Start-Learn"><a href="#1-Spring-Start-Learn" class="headerlink" title="1. Spring Start Learn"></a>1. Spring Start Learn</h4><h5 id="1-1-spring简介："><a href="#1-1-spring简介：" class="headerlink" title="1.1 spring简介："></a>1.1 spring简介：</h5><blockquote><p>Spring框架以interface 21框架为基础，经过重新设计，并不断丰富其内涵，2004年发布1.0版本，由音乐学博士Rod Johnson创建，其专业是音乐学并不是计算机。</p><p>Spring是一个开源的框架，是一个轻量级、非侵入式的框架。</p></blockquote><h5 id="1-2-Spring理念"><a href="#1-2-Spring理念" class="headerlink" title="1.2 Spring理念"></a>1.2 Spring理念</h5><blockquote><p>使得现有技术更容易使用，自身集成了各种组件</p><p>其核心为控制反转(IOC)、面向切面(AOP)</p><p>支持事务的处理</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/springStruct20080705.jpg" alt="Spring体系结构"></p><h5 id="1-3-学习新的web框架"><a href="#1-3-学习新的web框架" class="headerlink" title="1.3 学习新的web框架"></a>1.3 学习新的web框架</h5><p>SSM：spring + springMVC+Mybatis</p><h5 id="1-4-相关网址"><a href="#1-4-相关网址" class="headerlink" title="1.4 相关网址"></a>1.4 相关网址</h5><p>github：<a href="https://github.com/spring-projects/spring-framework">托管源码网址</a>  使用的是Gradlew</p><p>官网：<a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">官网介绍</a></p><p>官方网址下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">官方下载地址</a></p><h5 id="1-5-构建项目，使用Maven"><a href="#1-5-构建项目，使用Maven" class="headerlink" title="1.5 构建项目，使用Maven"></a>1.5 构建项目，使用Maven</h5><p><a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven依赖</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--SpringMVC，引入该依赖会将spring的相关依赖引入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入数据库相关的连接组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Spring整合太多的框架以及引进过多的组件，产生的弊端是“配置过多”</p><h5 id="1-6-Spring好处"><a href="#1-6-Spring好处" class="headerlink" title="1.6 Spring好处"></a>1.6 Spring好处</h5><blockquote><p>方便解耦、简化开发</p><p>AOP编程的支持</p><p>声明式事务的支持</p><p>便于单元测试</p><p>继承各种框架</p><p>降低 javaAPI的使用难度</p></blockquote><h4 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2. IOC"></a>2. IOC</h4><blockquote><p>Ioc是一种设计思想，称之为控制反转，可以分解为控制和反转，<strong>IOC容器控制着对象的创建或者叫做外部资源的获取方式；</strong> 一般主动的new对象是在程序中，程序主动创建对象，<strong>IOC容器管理着对象，因此程序中的对象是被动的接受依赖对象，因此称之为反转</strong></p></blockquote><h5 id="2-1-传统的耦合开发"><a href="#2-1-传统的耦合开发" class="headerlink" title="2.1 传统的耦合开发"></a>2.1 传统的耦合开发</h5><p>传统的开发，面向接口的开发，数据层接口Dao的实现类DaoImpl在Service中手动创建，然后调用底层的数据操作方法将业务层数据持久化。</p><p>项目的分层截图：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring200804.png" alt="项目的目录结构"></p><p>传统开发流程</p><p>dao层</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//dao层的接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dao层的实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service层</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//service层实现类，依赖dao层，耦合程度较高</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    UserDao userdao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userdao<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>缺点是才层之间是一个高耦合程序，因此可以采用setter进行接耦合，对象的创建不在于程序本身而是在于用户传入的参数。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//对象的创建在于传入的参数不再是直接new一个对象，耦合性降低</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-2-IOC将对象的创建交给spring"><a href="#2-2-IOC将对象的创建交给spring" class="headerlink" title="2.2 IOC将对象的创建交给spring"></a>2.2 IOC将对象的创建交给spring</h5><p><strong>IOC：Inversion of Control 控制反转，将对象的创建交给Spring去管理，实现了程序之间的解耦合。</strong></p><blockquote><p>在dao层有三种数据库的连接方式，不修改程序只修改配置文件完成对dao实例的选取。</p></blockquote><p>创建一个普通的对象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring中的配置文件是applicationContext.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--普通的Bean使用spring管理，其字段使用value进行赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--将dao层的对象注入到spring容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserMysqlDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracleDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserOracleDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--使用ref将对象与前面的对象进行关联，可以进行切换不用修改配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="userDao" ref="oracleDao">&lt;/property>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>对普通的Bean进行测试，对象不再使用new进行创建将其交给spring</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Mytest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取spring上下文对象，根据上下文对象将spring中的bean创建</span>        ApplicationContext context <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Customer custom <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"custom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>custom<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-3-IOC创建对象的方式"><a href="#2-3-IOC创建对象的方式" class="headerlink" title="2.3 IOC创建对象的方式"></a>2.3 IOC创建对象的方式</h5><p>1.使用无参数的构造函数</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>2.自定义参数的构造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//带参构造函数</span>    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义的带参数的构造函数有三种依赖注入的方式</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置1：带参数的构造函数的spring配置，使用下标进行构造填充，从0开始--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dayangege<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置2(推荐使用)：带参数的构造函数的spring配置，使用name属性进行属性注入--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dayangege<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置3(不推荐使用)：带参数的构造函数的spring配置，类型匹配--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><blockquote><p>  ApplicationContext context = new ClassPathXmlApplicationContext(“applicationContext.xml”);<br>context.getBean(“userService”);</p></blockquote><p>在getBean时，容器中管理的对象就已经初始化了。</p><h4 id="3-spring的配置"><a href="#3-spring的配置" class="headerlink" title="3.spring的配置"></a>3.spring的配置</h4><h5 id="3-1-配置别名"><a href="#3-1-配置别名" class="headerlink" title="3.1 配置别名"></a>3.1 配置别名</h5><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dayangege<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom1<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span></code></pre><h5 id="3-2-bean中属性介绍"><a href="#3-2-bean中属性介绍" class="headerlink" title="3.2 bean中属性介绍"></a>3.2 bean中属性介绍</h5><blockquote><p>bean的id：唯一标识符</p><p>bean的class属性：对象的权限定名</p><p>name：类似于别名，可以多个别名</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--将dao层的对象注入到spring容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserMysqlDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracleDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.dao.UserOracleDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--使用ref将对象与前面的对象进行关联--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysqlDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h5 id="3-3-总配置中配置其余的bean"><a href="#3-3-总配置中配置其余的bean" class="headerlink" title="3.3 总配置中配置其余的bean"></a>3.3 总配置中配置其余的bean</h5><pre class=" language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--将其余的有效配置放置在总的xml文件中--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="4-依赖注入-DI"><a href="#4-依赖注入-DI" class="headerlink" title="4. 依赖注入(DI)"></a>4. 依赖注入(DI)</h4><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators" target="_blank" rel="noopener">官方网站介绍的依赖注入</a></p><h5 id="4-1-依赖注入问题"><a href="#4-1-依赖注入问题" class="headerlink" title="4.1 依赖注入问题"></a>4.1 依赖注入问题</h5><blockquote><p><strong>动态的向某一个对象提供它所需要的其他对象</strong>。</p><p><strong>1.谁依赖于谁？</strong>：应用程序依赖于IOC容器</p><p><strong>2.为什么需要依赖？</strong>：应用程序需要IOC容器来提供对象需要的外部资源</p><p><strong>3.谁注入了谁？</strong>：IOC容器注入应用程序某个对象，应用程序依赖的对象</p><p><strong>4.注入了什么？</strong>：注入某个对象所需要的外部资源(对象、数据)</p></blockquote><h5 id="4-2-构造器注入"><a href="#4-2-构造器注入" class="headerlink" title="4.2 构造器注入"></a>4.2 构造器注入</h5><p>(分为空参数的构造器和带参数的构造器)，前面的介绍</p><p><strong>构造器注入的缺点：参数过多时，xml中的property项过于繁多，有的人喜欢构造器注入</strong></p><h5 id="4-3-setting注入-推荐"><a href="#4-3-setting注入-推荐" class="headerlink" title="4.3  setting注入(推荐)"></a>4.3  setting注入(推荐)</h5><p>相关的环境准备</p><h6 id="实体类准备"><a href="#实体类准备" class="headerlink" title="实体类准备"></a>实体类准备</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    String addr<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddr</span><span class="token punctuation">(</span>String addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Address{"</span> <span class="token operator">+</span>                <span class="token string">"addr='"</span> <span class="token operator">+</span> addr <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//普通字段</span>    <span class="token keyword">private</span> Address addr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用类型字段</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组类型</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobby<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//List集合类型</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> card<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map集合类型</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set集合类型</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空值注入</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//props注入</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Address <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddr</span><span class="token punctuation">(</span>Address addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> books<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBooks</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobby</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> card<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getGames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> games<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGames</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>games <span class="token operator">=</span> games<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wife<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWife</span><span class="token punctuation">(</span>String wife<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wife <span class="token operator">=</span> wife<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Properties <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span>Properties info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", addr="</span> <span class="token operator">+</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", books="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", hobby="</span> <span class="token operator">+</span> hobby <span class="token operator">+</span>                <span class="token string">", card="</span> <span class="token operator">+</span> card <span class="token operator">+</span>                <span class="token string">", games="</span> <span class="token operator">+</span> games <span class="token operator">+</span>                <span class="token string">", wife='"</span> <span class="token operator">+</span> wife <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", info="</span> <span class="token operator">+</span> info <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="配置文件注入"><a href="#配置文件注入" class="headerlink" title="配置文件注入"></a>配置文件注入</h6><blockquote><p>8种不同的类型注入，一般的注入、引用类型、数组、List、Set、Map、Null、Properties</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>西安<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--1.普通的属性注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--2.bean注入，当前bean的一个属性为另一个bean，即引用类型--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--3.数组的注入方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java入门到放弃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>并发编程入门到放弃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>javaweb入门到放弃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java网络编程入门到放弃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--4.List集合的注入方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>听歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>跳舞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--5.Map集合的注入方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>身份证号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>银行卡号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>789654<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--6.Set集合的注入方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>cs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>cf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--7.空值注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>null</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--8.配置注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>18062103101<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>itxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h6 id="测试注入结果"><a href="#测试注入结果" class="headerlink" title="测试注入结果"></a>测试注入结果</h6><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mytest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取bean实例</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出bean</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080402.png" alt="image-20200804170417979"></p><h5 id="4-4-其他方式"><a href="#4-4-其他方式" class="headerlink" title="4.4  其他方式"></a>4.4  其他方式</h5><p>引入命名空间的原因在于使用bean的元素的属性进行元素的属性值设置，不再需要进行<property/>嵌套设置，主要在xml文件中引入p或者c命名空间。</p><p>p命名空间<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-p-namespace" target="_blank" rel="noopener">p命名空间注入讲解</a></p><p>c命名空间<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-c-namespace" target="_blank" rel="noopener">c命名空间注入讲解</a></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080501.png" alt="引入命名空间"></p><p>xml中的bean的命名空间中引入两个命名空间的url</p><blockquote><pre class=" language-xml"><code class="language-xml">&lt;beansxmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-xmlns:p="http://www.springframework.org/schema/p"  xmlns:c="http://www.springframework.org/schema/c"  xsi:schemaLocation="http://www.springframework.org/schema/beans    https://www.springframework.org/schema/beans/spring-beans.xsd"><span class="token comment" spellcheck="true">&lt;!--p命名空间注入，可以直接注入属性的值:property  必须有无参数的构造函数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Address<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>addr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>西安<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>阿星<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>addr-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--c命名空间注入，c命名空间是使用构造器注入值的，不推荐使用，所提供的pojo必须有实参构造函数--></span>    &lt;bean id="addr1" class="com.itxing.pojo.Address" c:addr= "韩城"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>大雁<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>addr-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></blockquote><p><strong>注意事项：</strong>引入<strong>p命名空间</strong>需要的是一个<strong>空参数的构造函数</strong>，<strong>c命名空间</strong>是一个<strong>带参数的构造函数</strong>。</p><h5 id="4-5-Bean的作用域"><a href="#4-5-Bean的作用域" class="headerlink" title="4.5 Bean的作用域"></a>4.5 Bean的作用域</h5><p>官方文档中显示有6个作用域的范围</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>默认，IOC容器中只有一个实例对象</td></tr><tr><td>prototype</td><td>原型模式，将单个bean定义的作用域限定为任意数量的实例对象</td></tr><tr><td>request</td><td>将单个bean定义的作用域限定为Http请求的生命周期，每一个http请求都有一个单个的bean实例对象</td></tr><tr><td>session</td><td>将单个bean定义的作用域限定为Http的整个session回话中，spring上下文中有效</td></tr><tr><td>application</td><td>将单个bean定义的作用域限定为servletContext</td></tr><tr><td>websocket</td><td>将单个bean定义的作用域限定为的生命周期<code>WebSocket</code></td></tr></tbody></table><p>自己设置对象的作用范围时，可以设置为singleton、prototype、request、session</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080502.png" alt="spring中bean的作用域"></p><p>作用范围：单例模式</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu01"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itxing.pojo.Student"</span> p<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"阿星"</span> p<span class="token operator">:</span>addr<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"addr"</span> scope<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将bean的scope属性设置成一个singleton进行测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mytest5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token operator">==</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>结果为：True</strong></p><p>作用范围：原型模式</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu01"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itxing.pojo.Student"</span> p<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"阿星"</span> p<span class="token operator">:</span>addr<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"addr"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>其余的作用范围在web开发时会用到。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将bean的scope设置为一个prototype进行测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mytest6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token operator">==</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>结果为：false</strong></p><h4 id="5-Bean的自动装配"><a href="#5-Bean的自动装配" class="headerlink" title="5.Bean的自动装配"></a>5.Bean的自动装配</h4><p>自动装配是spring满足bean依赖的一种方式，spring会在上下文中自动寻找，并给bean装配属性</p><blockquote><p>1.在xml中显示配置</p><p>2.在java中显示配置</p><p>3.隐式的自动装配bean</p></blockquote><p>一个People类中依赖两个pojo对象Cat、Dog以及一个String属性，之前的手动配置需要对引用类型的对象使用ref指向bean的id，使用value指定属性的属性值。</p><p>手动装配时：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.People<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xingzai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="5-1-byName自动装配"><a href="#5-1-byName自动装配" class="headerlink" title="5.1 byName自动装配"></a>5.1 byName自动装配</h5><p>使用autowire=”byName”进行自动配置，实体类中的属性命名与spring上下文中的beanid相同</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--autowire="byName" 自动装配，通过名字进行装配，寻找自己对象set方法后面对象的beanid，缺点：命名可能会与set中的命名不一致--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xingzai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="5-2-byType自动装配"><a href="#5-2-byType自动装配" class="headerlink" title="5.2 byType自动装配"></a>5.2 byType自动装配</h5><p>使用autowire=”byType”进行自动装配时，spring上下文有唯一的实体类型，如果有两个以上的bean指向同一个类，则匹配失败</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--autowire="byType" 会在容器上下文中寻找与自己属性类型相同的beanid，如果有两个以上的类型bean会出错--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xingzai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="5-3-使用注解自动装配"><a href="#5-3-使用注解自动装配" class="headerlink" title="5.3 使用注解自动装配"></a>5.3 使用注解自动装配</h5><p>使用注解比XML更好吗？</p><blockquote><p>答案：时情况而定，每种方法都有各自的优缺点，注释在声明中提供了很多上下文，使得配置更短，更简洁。xml擅长连接组件而不接触其源代码或重新编译他们。注解开发将配置分散，一定程度上难以管理。</p></blockquote><p>需要在xml中添加context命名空间以及context约束</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080503.png" alt="引入context约束"></p><p>beans.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      https://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>Autowried注解，在pojo属性中声明Autowried注解可以简化xml配置以及可以省略相关的set方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Autowired</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//AutoWired注解的requored属性设置为false，说明该对象可以为null，否则不允许为空</span>   <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Dog <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注解开发：(spring中的注解)</p><blockquote><p>属性的注入时Autowired注解自动注入，使用Qualifier指定spring上下文中的beanid</p><p>@Autowired(required = false)<br> @Qualifier(value = “beanid”)</p></blockquote><p>java中的注解也能够使用找到对应的bean，效率比spring的注解低。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Autowired和Resource的区别：</p><blockquote><p>1.都是自动装配，都可以放在属性的字段上</p><p>2.Autowired通过byType的方式实现</p><p>3.Resource通过byname实现，如果没有匹配，则通过byType匹配，两个均不匹配时，异常。</p></blockquote><h4 id="6-注解开发"><a href="#6-注解开发" class="headerlink" title="6. 注解开发"></a>6. 注解开发</h4><p>spring4之后的注解开发必须导入aop的包，aop的约束以及aop的命名空间、context的命名空间以及context的约束。</p><h5 id="6-1-bean"><a href="#6-1-bean" class="headerlink" title="6.1 bean"></a>6.1 bean</h5><blockquote><p>全部有spring管理的对象称之为一个bean</p></blockquote><h5 id="6-2-属性的注入"><a href="#6-2-属性的注入" class="headerlink" title="6.2 属性的注入"></a>6.2 属性的注入</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//组件注解</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//spring的注解</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="6-3-衍生注解"><a href="#6-3-衍生注解" class="headerlink" title="6.3 衍生注解"></a>6.3 衍生注解</h5><blockquote><p>@Component 组件注解，表名该类是spring中的一个bean，在web开发过程中，会按照mvc三层架构分层</p><p>​    dao[@Repository]</p><p>​    service[@Service]</p><p>​    controller[@Controller]</p><p>四种注解功能作用相同只是为了表示不同层之间的注解，都是将该类放入spring容器中进行装配</p></blockquote><h5 id="6-4-自动装配-之前使用过"><a href="#6-4-自动装配-之前使用过" class="headerlink" title="6.4 自动装配(之前使用过)"></a>6.4 自动装配(之前使用过)</h5><p>需要引入context约束、context命名空间</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--开启扫描注解--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span></code></pre><h5 id="6-5-作用域"><a href="#6-5-作用域" class="headerlink" title="6.5 作用域"></a>6.5 作用域</h5><blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//该注解表示该类是一个单例模式</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><h5 id="6-6-xml与注解比较"><a href="#6-6-xml与注解比较" class="headerlink" title="6.6 xml与注解比较"></a>6.6 xml与注解比较</h5><blockquote><p>xml更加万能，适用的场景较多，维护简单方便</p><p>注解：维护相对复杂</p><p>一般使用：</p><p>xml用来管理bean;</p><p>注解只负责完成属性的注入;</p><p>注解需要生效必须开启注解</p><p>&lt;context：component-scan basepackage=“”/&gt;</p><p>&lt;context：annotation-config/&gt;</p></blockquote><h4 id="7-不使用配置文件"><a href="#7-不使用配置文件" class="headerlink" title="7. 不使用配置文件"></a>7. 不使用配置文件</h4><p>采用java的一个配置类，配置类中有公共权限的方法向外暴露需要管理的对象。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//开启扫描注解</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itxing.pojo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>SpringConfig2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItXingConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Customer <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>另外一个配置类，使用@Import注解能够将两个配置类合并为一个配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>测试类，创建上下文对象的时候不使用ClassPathXmlApplicationContext对象读取配置文件来获取。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不适用配置文件去实现</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ItXingConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Customer custumer <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getCustomer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>custumer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="8-代理模式"><a href="#8-代理模式" class="headerlink" title="8. 代理模式"></a>8. 代理模式</h4><p><strong>AOP底层使用的是代理模式，代理模式分为动态代理和静态代理</strong></p><p>代理模式中的角色：代理、被代理对象、具体的事件</p><p>被代理对象专心的完成具体的事件，具体事件之外的事件由代理对象去完成</p><h5 id="8-1-静态代理"><a href="#8-1-静态代理" class="headerlink" title="8.1 静态代理"></a>8.1 静态代理</h5><p>代理模式的优缺点</p><blockquote><p>好处：可以使得真实角色的操作更加纯粹，不需要关注公共的业务</p><p>公共业务交给代理对象完成，实现类业务分工</p><p>方便集中管理</p><p>缺点：一个真实角色有一个代理对象，代码量会加倍</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080601.png" alt="代理模式示意图"></p><p>1.公共接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.被代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出售房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHome</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ProxyHome</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signTong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getfare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理对象能够处理的时间</span>    <span class="token comment" spellcheck="true">//代理对象 看房子</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带客户看房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理对象 收中介费</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getfare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介收费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理对象 签合同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signTong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.访问者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Host host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyHome proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyHome</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="8-2-动态代理"><a href="#8-2-动态代理" class="headerlink" title="8.2 动态代理"></a>8.2 动态代理</h5><blockquote><p>动态代理与静态代理的角色划分一致</p><p>动态代理的代理类是动态生成的，不是直接写好的</p><p>动态代理分为两大类：基于接口的动态代理、基于类的动态代理、字节码动态代理</p><p>​    接口的JDK动态代理</p><p>​    类：cglib动态代理</p><p>​    字节码实现：javasist</p></blockquote><p>公共代理类工具类</p><blockquote><p> 调用setObj设置被代理对象</p><p>使用getProxy获取一个代理对象</p><p>调用被代理对象接口中的方法</p></blockquote><p>测试实例：给增、删、改、查每个方法添加日志信息。</p><p>1.接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.具体实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserserviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.公共的代理对象工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationUtil</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被代理对象接口</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObj</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用Proxy获取一个代理独享</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//代理对象执行的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加日志</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行的是"</span><span class="token operator">+</span>msg<span class="token operator">+</span><span class="token string">"方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.客户端测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//具体的被代理实例</span>        UserserviceImpl userservice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserserviceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象工具类</span>        ProxyInvocationUtil proxyUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置被代理对象</span>        proxyUtil<span class="token punctuation">.</span><span class="token function">setObj</span><span class="token punctuation">(</span>userservice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取代理对象</span>        UserService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>proxyUtil<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>动态代理的好处：</p><blockquote><p>1.可以使真实角色的操作更加纯粹，专心做自己的事情</p><p>2.公共的事件交给代理对象，实现了业务分工</p><p>3.方便集中管理</p><p>4.一个动态代理类代理的是一个接口，一般就是应对的一类业务</p><p>5.一个动态代理类可以代理多个类，只要是实现了相同的接口</p></blockquote><h4 id="9-AOP"><a href="#9-AOP" class="headerlink" title="9. AOP"></a>9. AOP</h4><p>Aop中的相关名词，对于跨越应用程序多个模块的功能或方法，即与业务逻辑无关的部分，日志、安全、缓存、事务。</p><blockquote><p>切面(Aspect)：横切关注点，被模块化的特殊对象，一个类</p><p>通知(Advice)：切面必须要完成的工作，一个类的方法</p><p>目标(Target)：被通知的对象</p><p>代理(Proxy)：向目标对象应用通知之后创建的对象</p><p>切入点(PointCut)：切面通知执行”地点”的定义</p><p>连接点(JointPoint)：与切入点匹配的执行点</p></blockquote><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="方式一-使用springAPI"><a href="#方式一-使用springAPI" class="headerlink" title="方式一  使用springAPI"></a>方式一  使用springAPI</h5><p>主要是springAPI的接口的实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//MethodBeforeAdvice是spring的一个接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * Method method   目标的方法    * Object[] objects  参数    * Object o  目标对象    * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的"</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"即将被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件的主要关注点在于切入点的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.log.Log<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--配置aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itxing.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--通知,该对应的bean实现了spring的核心api--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h5 id="方式二-自定义类实现AOP"><a href="#方式二-自定义类实现AOP" class="headerlink" title="方式二  自定义类实现AOP"></a>方式二  自定义类实现AOP</h5><p>一个类中有业务前的逻辑方法与业务后执行的逻辑方法，从而将该方法横切进去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiyLogDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========前置方法========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========后置方法========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义类文件首先关注的是切面</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--业务方法前后执行的方法实现类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.log.DiyLogDemo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置aop--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--在于切面的配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itxing.service.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h5 id="方式三-使用注解实现AOP"><a href="#方式三-使用注解实现AOP" class="headerlink" title="方式三 使用注解实现AOP"></a>方式三 使用注解实现AOP</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Aspect配置切面的注解</span><span class="token comment" spellcheck="true">//Before前置通知</span><span class="token comment" spellcheck="true">//After后置通知</span><span class="token comment" spellcheck="true">//Around环绕通知</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationPointCut</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itxing.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======执行前执行======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itxing.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======执行后执行======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itxing.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======事前环绕======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======事后环绕======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用注解aop时在xml中只需要开启aop注解代理支持，默认使用的是jdk动态代理</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--Spring中加入切面以及切入点的bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.log.AnnotationPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--开启aop的注解支持  JDK(默认)   CGLIB--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre><h4 id="10-整合Mybatis"><a href="#10-整合Mybatis" class="headerlink" title="10 整合Mybatis"></a>10 整合Mybatis</h4><p>之前学习的mybatis笔记<a href="https://itxingzai.xyz/2020/05/18/mybatis-xue-xi-yi/" target="_blank" rel="noopener">Mybatis笔记</a></p><p>步骤：</p><blockquote><p>1.导入相关的依赖</p><p>​    junit</p><p>​    mybatis</p><p>​    mysql数据库</p><p>​    spring相关</p><p>​    aop织入</p><p>​    mybatis-spring</p><p>2.编写配置</p><p>3.测试</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--junit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--aop支持--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring与mybatis整合包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h5 id="方式一：-SqlSessionTemplate"><a href="#方式一：-SqlSessionTemplate" class="headerlink" title="方式一： SqlSessionTemplate"></a>方式一： SqlSessionTemplate</h5><p>spring的配置文件中配置数据源信息(之前是在mybatis中配置)、配置SqlSessionFactory、配置SqlSessionTemplate(为了获取sqlsession)。</p><p>自己获取sqlsession的进行测试</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输入流</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取SqlSessionFactory</span>        SqlSessionFactory build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlSession</span>        SqlSession sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span>users<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>将该对象的创建都交给Spring来管理</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--1.导入数据源，使用spring的数据源替换mybatis的配置 s3p0 dputils druid--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.配置sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/itxing/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.配置SqlSessionTemplate只能使用构造器进行注入，--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>sqlSessionTemplate只能使用构造器注入</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080701.png" alt="spring中sqlSessionTemplate源码"></p><p>自己对接口进行实现并将其注入spring容器中，提供在创建时使用</p><p>实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注入配置</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>spring管理后的测试类</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapperImpl  userMapper <span class="token operator">=</span> <span class="token punctuation">(</span>UserMapperImpl<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="方式二-实现类继承SqlSessionDaoSupport"><a href="#方式二-实现类继承SqlSessionDaoSupport" class="headerlink" title="方式二 实现类继承SqlSessionDaoSupport"></a>方式二 实现类继承SqlSessionDaoSupport</h5><p>配置的不同</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--1.导入数据源，使用spring的数据源替换mybatis的配置 s3p0 dputils druid--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.配置sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加mybatis配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/itxing/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>继承SqlSessionDaoSupport类，该类的方法指定返回sqlsession对象处理数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl2</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册接口的实现类</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.mapper.UserMapperImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="11-声明式事务"><a href="#11-声明式事务" class="headerlink" title="11.声明式事务"></a>11.声明式事务</h4><p>事务：一些任务同时成功或者同时失败，确保数据的完整性和一致性</p><p><strong>事务的ACID：</strong></p><blockquote><p>原子性:操作的指令要么全部执行成功，要么全部不执行</p><p>一致性:事务的执行使数据从一个状态转换成另一个状态，但是对于整个数据的完整性保持稳定</p><p>隔离性:当多个用户并发访问数据库时，一个事务不能被其他事务所干扰，多个并发的事务之间相互隔离</p><p>持久性:当事务正确完成后，数据的修改是永久的</p></blockquote><p><strong>事务并发导致的问题</strong>(没有隔离级别)</p><blockquote><p><strong>第一类丢失更新：</strong>撤销一个事务时，把其他事务已提交的更新数据覆盖</p><p><strong>脏读:</strong>指的是一个事务处理过程里读取了另一个未提交事务中的数据</p><p><strong>幻读</strong>:一个事务两次查询，第二次结果包含第一次没有或已经删除的数据，造成两次读取不一致，指的是另一个事务在两次查询中修改了数据。(数据的整体)</p><p><strong>不可重复读</strong>:一个事务两次读取同一行数据，结果不同即另一个事务在两次读取数据中更新了数据</p><p><strong>第二类丢失更新:</strong>是不可重复读的一种特例，两个事务读取同一行数据后都进行写操作，并提交，第一个事务的改变会丢失</p></blockquote><p><strong>事务的隔离级别：</strong>从低到高</p><blockquote><p>Read Uncommitted:读未提交，允许读取另一个事务的数据 (都不能保证)</p><p>Read committed:读已提交，读取已经提交的事务的数据(解决脏读问题)</p><p>Repeatable read:可重复读，读取时不允许修改数据(解决脏读、不可重复读)</p><p>Serializable:串行化，效率低下(解决幻读、脏读、不可重复读)</p></blockquote><p>spring声明式事务：AOP的支持</p><p>编程式事务：需要在代码中进行事务的管理</p><p><strong>spring中事务的七种传播特性</strong>：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/spring20080702.png" alt="spring中事务的传播特性"></p><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>需要，如果没有事务就新建一个</td></tr><tr><td>SUPPORTS</td><td>支持，有事务就按事务提交，没有事务就非事务执行</td></tr><tr><td>MANDATORY</td><td>支持当前事务，当前没有事务就抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>新建事务，把当前的事务挂起</td></tr><tr><td>NEVER</td><td>非事务进行，有事务抛出异常</td></tr><tr><td>NESTED</td><td>支持当前事务，当前有事务嵌套事务，没有事务新建一个事务</td></tr><tr><td>NOT_SUPPORTED</td><td>非事务执行，当前事务挂起</td></tr></tbody></table><p>spring与mybatis项目整合使用的xml管理的配置文件，其中涉及到context约束和命名空间、aop约束和命名空间、tx事务的约束的命名空间、数据源datasource、工厂sqlSessionFactory、sqlSession、事务、aop的相关配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd         http://www.springframework.org/schema/tx        https://www.springframework.org/schema/tx/spring-tx.xsd         <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入数据源，使用spring的数据源替换mybatis的配置 s3p0 dputils druid--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加mybatis配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/itxing/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置sqlSession,可选配置，也可以使用继承类SqlSessionDaoSupport实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明式事务 使用数据库事务--></span>    &lt;bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--结合aop，执行数据库操纵时自动添加事务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定的方法配置事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--将事务织入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itxing.mapper.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>mybatis中的相关配置，简洁了很多，大多数交给spring去管理和配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--别名管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven工具</title>
      <link href="/2020/05/14/maven-gong-ju/"/>
      <url>/2020/05/14/maven-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>Maven工具  </p><p>前提是已经在自己本地有一个maven仓库，个人使用的是3.3.9版本的maven。</p><p>准备构建一个maven项目来进行spring的复习，发现之前学习的maven搭建项目的步骤突然忘记了，最近一直在做一些算法的题目和论文的知识，有点疏忽工具的使用了，用此来记录maven工具并创建maven项目做简单的复习。</p><p>maven是apache下面的一个开源项目，只用来管理java项目以及项目依赖的jar包。</p><p>好处：maven将jar包放在本地的仓库，通过坐标(公司-项目-版本号)进行获取，对jar包依赖管理</p><p>仓库分为本地仓库共个人使用，公司的仓库一般为远程仓库又称私服，网络中的仓库为中央仓库。</p><p>maven的标准目录结构：</p><blockquote><p>src/main/java   核心代码部分</p><p>src/main/resources  配置文件</p><p>src/test/java  测试文件</p><p>src/test/resources  测试配置文件</p><p>如果是web项目：</p><p>src/main/webapp  web相关的文件，静态资源等</p></blockquote><p>maven的命令：</p><blockquote><p>mvn clean  将编译的项目进行清理，每个人的环境都是不同的因此对项目在本地需要clean</p><p>mvn  compile  将项目编译</p><p>mvn test   测试项目</p><p>mvn package  项目打包</p><p>mvn install  项目发布到本地仓库</p><p>mvn deploy  发布</p><p>mvn tomcat:run  启动tomcat</p></blockquote><p>maven的声明周期：三种声明周期（clean周期、default周期、site周期）</p><p><strong>默认的周期</strong>为（compile、test、package、install、deploy），可以一键构建</p><p>maven的依赖包含的信息有：公司组织名称、项目名、版本号</p><p>idea配置maven：</p><p>点击configure选择settings</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/idea01.png" alt="image-20200514174706024"></p><p>左上角搜索框中填入maven，设置自己的maven位置与xml</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image02.png" alt="image-20200514175156031"></p><p>为了防止在不能上网的情况下maven项目有问题，配置一个参数：</p><blockquote><p>-DarchetypeCatalog=internal</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image03.png" alt="image-20200514175543835"></p><p>创建一个maven的java工程：idea提供许多的maven骨架，选择java的骨架点击next</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image04.png" alt="image-20200514175800914"></p><p>填写项目的坐标信息、并且配置路径：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image05.png" alt="image-20200514180043974"></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image06.png" alt="image-20200514180208078"></p><p>创建项目成功并运行测试：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image07.png" alt="image-20200514180734962"></p><p>当前的文件目录结构缺少资源目录结构，自定义一个文件夹并且设置为资源文件夹，选中文件夹右键进行设置。</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image08.png" alt="image-20200514181020322"></p><p>如果不适用骨架创建出来的maven只是在test路径下没有resources文件夹，并且没有默认的测试类文件，但是在main目录下有resources文件夹。推荐在创建maven的时候不要使用上面的选择骨架创建。</p><p>不适用骨架创建的maven项目：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image09.png" alt="image-20200514181748329"></p><p>使用maven创建一个web项目：<strong>需要使用骨架</strong></p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image10.png" alt="image-20200514181932854"></p><p>其余操作与上面类似，web的目录结构是：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/image11.png" alt="image-20200514182132452"></p><p>web项目需要有tomcat服务器，配置如果有如下问题：</p><blockquote><p>No artifacts marked for deployment</p></blockquote><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat01.png" alt="image-20200514183015819"></p><p>参考：<a href="https://www.cnblogs.com/lbrs/p/11620694.html" target="_blank" rel="noopener">以上问题解决方案</a></p><p>问题二：创建Servlet时没有Servlet选项：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat02.png" alt="image-20200514184027669"></p><p>一次点击并选中：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat03.png" alt="image-20200514184146448"></p><p>最后就可以创建Servlet了。</p><p>创建Servlet出现的问题：在创建好Servlet后由于没有jar的包汇报错误，需要在pom.xml中引入依赖：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--这是单元测试的包，需要配置其坐标以及scope作用范围，只在test的时候生效--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--这是servlet的包，用于创建servlet是java中文件引入jar包，但是需要设置scope为provided，只在编译的时候使用，因为maven中有tomcat的相关jar包，如果不配置则会产生冲突，jsp的包也是相同的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>配置自定的的插件模板：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat04.png" alt="image-20200514191029786"></p><p>在搜索框中填入live，先创建一个自己的组，customer</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat05.png" alt="image-20200514191128705"></p><p>配置模板，并配置模板名称，模板内容以及设置其在xml中使用</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat06.png" alt="image-20200514191349570"></p><p>maven的pom文件中依赖的作用范围：scope的值</p><table><thead><tr><th>依赖的范围</th><th>对于编译classpath有效</th><th>对于测试classpath有效</th><th>对于运行时classpath有效</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>spring-core</td></tr><tr><td>test</td><td>—-</td><td>Y</td><td>—-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>—-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>—–</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>—-</td><td>本地的，maven仓库之外的类库</td></tr></tbody></table><p>maven使用mysql数据库简单记录</p><p>pom的文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据库驱动的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>项目目录结构如下：</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tomcat07.png" alt="image-20200514221749031"></p><p>测试以及测试结果：</p><p>创建数据层接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建实现类：采用的传统的数据库格式连接，代码有冗余，在于基础。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>ItemDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itxing<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ItemDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接数据库的四个要素</span>        <span class="token comment" spellcheck="true">//1.数据库驱动</span>        <span class="token comment" spellcheck="true">//2.连接对象</span>        <span class="token comment" spellcheck="true">//3.执行对象</span>        <span class="token comment" spellcheck="true">//4.结果集</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pst <span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet resultSet<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加载驱动类</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//先获取Connection对象</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///test"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取真正操作数据的对象</span>            pst <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将结果集转换成java的List集合</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"u_sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pst<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection conn <span class="token operator">=</span>null<span class="token punctuation">;</span>        PreparedStatement pstm <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//编写sql语句</span>            String sql<span class="token operator">=</span><span class="token string">"insert into user(u_name,u_id,u_sex) values(?,?,?)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取预处理对象</span>             pstm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql语句</span>            <span class="token keyword">int</span> line <span class="token operator">=</span> pstm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新添加有"</span><span class="token operator">+</span>line<span class="token operator">+</span><span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放资源</span>            pstm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/5/14-maven_java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ItemDaoImpl itemDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> all <span class="token operator">=</span> itemDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Item item<span class="token operator">:</span>all<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is a pretty "</span><span class="token operator">+</span>item<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" hero "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ItemDaoImpl itemDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hhhaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>end: maven学习主要还是要多多使用。</p>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx笔记</title>
      <link href="/2020/05/04/nginx-bi-ji/"/>
      <url>/2020/05/04/nginx-bi-ji/</url>
      
        <content type="html"><![CDATA[<h5 id="nginx是什么？能做什么？"><a href="#nginx是什么？能做什么？" class="headerlink" title="nginx是什么？能做什么？"></a>nginx是什么？能做什么？</h5><p>  nginx是一个高性能的Http和反向代理web服务器，占用内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p><p>  专为性能优化而开发，性能是其最重要的考量，实现上注重效率，能经受高负载的考验，报告中支出其能支持高达50000个并发连接数。</p><h5 id="nginx的反向代理"><a href="#nginx的反向代理" class="headerlink" title="nginx的反向代理"></a>nginx的反向代理</h5><p>  正向代理：如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问internet，则需要通过代理服务器进行访问，这种代理称为正向代理。（需要客户端配置，输入的是目标地址）</p><p>  反向代理：客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，只需要将请求发送反向代理服务器，通过反向代理选择目标服务器获取数据后，返回客户端，向外暴露的是代理服务器地址，隐藏了真实服务器 IP地址。（客户端不需配置，访问反向代理服务器即可）</p><h5 id="nginx的负载均衡"><a href="#nginx的负载均衡" class="headerlink" title="nginx的负载均衡"></a>nginx的负载均衡</h5><p>服务器进行集群，单个服务器解决不了的问题，通过增加服务器数量，然后将请求分发到各个服务器上，将最原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，称之为负载均衡。</p><h5 id="nginx动静分离"><a href="#nginx动静分离" class="headerlink" title="nginx动静分离"></a>nginx动静分离</h5><p>为了加快网站的解析速度，可以把静态资源和动态资源分开放置，有不同的服务器来进行解析，加快解析速度，降低原来单个服务器的压力。</p><h5 id="nginx的linux安装"><a href="#nginx的linux安装" class="headerlink" title="nginx的linux安装"></a>nginx的linux安装</h5><p>nginx安装需要的依赖（根据个人的需要进行下载相关的依赖）：</p><p>pcre-8.37.tar.gz、openssl-1.0.1t.tar.gz、</p><p>zlib-1.2.8.tar.gz、nginx-1.11.1.tar.gz</p><p>使用linux命令在有网的情况下安装</p><p>1.安装pcre依赖</p><blockquote><p>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.32/pcre-8.37.tsr.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.32/pcre-8.37.tsr.gz</a></p><p>解压文件：tar - xvf  pcre.tar.gz</p><p>在解压的文件夹中 cd pcre</p><p>执行检查配置文件：./configure</p><p>编译并安装：make  &amp;&amp;make install</p><p>使用命令查看版本号：pcre-config  –version</p></blockquote><p>2.安装openssl和安装zlib</p><blockquote><p>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</p></blockquote><p>注：</p><blockquote><p>一键命令安装四个依赖</p><p>yum -y install gcc  zlib  zlib-devel  pcre-devel  openssl  openssl-devel</p></blockquote><p>3.安装nginx</p><blockquote><p>1.将安装包传输到linux服务器</p><p>2.解压文件： tar - xvf  nginx.tar,gz</p><p>3.检查相关的配置：cd  nginx后执行./configure</p><p>4.编译并安装：make &amp;&amp; make install</p><p>安装成功后在usr/local/中有一个nginx的目录，启动nginx命令在sbin中</p><p>启动nginx命令：./nginx</p><p>查看启动的端口：ps -ef  |  grep  nginx</p></blockquote><p>启动时遇到错误：</p><blockquote><p> error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p></blockquote><p>安装的pcre依赖需要建立连接</p><pre class=" language-shell"><code class="language-shell">##查找出错的文件位置find / -type f -name *libpcre.so.*##进行软连接ln -s /lib64/libpcre.so.0.0.1 /lib64/libpcre.so.1##启动nginx，在usr/local/nginx/sbin中执行./nginx##验证是否启动成功ps -ef | grep nginx##centos6查看防火墙service iptables status##开启防火墙service iptables start##关闭防火墙service iptables stop##开机不启动防火墙chkconfig iptables off##开机启动防火墙chkconfig iptables on##查看端口状态/etc/init.d/iptables status##重启防火墙service iptables restart##开放指定的端口，修改/etc/sysconfig/iptables文件,重启防火墙-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT##centos7查看防火墙firewall-cmd --list-all##查看防火墙状态firewall-cmd --state##开启防火墙systemctl stop firewalld.service##开机不启动防火墙systemctl disable firewalld.service##开机启动防火墙systemctl enable firewalld.service##设置开放端口号firewall-cmd --add-service = http -permanentsudo firewall-cmd --cmd --add-port=80/tcp --permanent##重启防火墙firewall-cmd -reload</code></pre><h5 id="nginx常用命令-在-usr-local-nginx-sbin-下使用"><a href="#nginx常用命令-在-usr-local-nginx-sbin-下使用" class="headerlink" title="nginx常用命令(在/usr/local/nginx/sbin/下使用)"></a>nginx常用命令(在/usr/local/nginx/sbin/下使用)</h5><p>1.查看nginx版本号</p><blockquote><p>./nginx -v</p></blockquote><p>2.关闭nginx</p><blockquote><p>./nginx  -s  stop</p></blockquote><p>3.启动nginx </p><blockquote><p>./nginx</p></blockquote><p>4.重加载(更改配置文件后，不需要重启nginx)</p><blockquote><p>./nginx -s reload</p></blockquote><h5 id="nginx配置-配置文件的位置-usr-local-nginx-conf"><a href="#nginx配置-配置文件的位置-usr-local-nginx-conf" class="headerlink" title="nginx配置(配置文件的位置/usr/local/nginx/conf/)"></a>nginx配置(配置文件的位置/usr/local/nginx/conf/)</h5><p>配置文件的组成(主要分为三部分)：</p><p>1.全局块：可以支持并发的数量，值越大可以支持的并发量越多</p><p>work    processes    1;</p><p>2.events块：涉及nginx服务器与用户的网络连接</p><p>例如：worker   processes   1024</p><p>3.http块：配置最频繁的部分，http包含http全局块和server块</p><p>server与虚拟主机相关，包括监听的端口号，主机名称，本地路径</p><h5 id="反向代理实例"><a href="#反向代理实例" class="headerlink" title="反向代理实例"></a>反向代理实例</h5><p>访问nginx时，跳转到tomcat的服务器中。</p><p>1.linux需要有tomcat，并且tomcat依赖jdk因此需要安装jdk</p><p>2.启动tomcat，进入tomcat的安装的路径下的bin文件夹下</p><pre class=" language-shell"><code class="language-shell">##启动tomcat./startup.sh##查看启动情况，在tomcat的路径在，有logs目录cd logs/##查看日志tail -f catalina.out##在防火墙总添加8080端口(vim /etc/sysconfig/iptables)-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></pre><p>3.用户访问80端口，利用反向代理转发到8080端口的web服务器中</p><p>1.用户本地host配置域名：</p><blockquote><p>C:\Windows\System32\drivers\etc\的路径下有一个hosts文件，添加域名和用户名的映射</p><p>192.168.159.132  www .xing123.com</p></blockquote><p>2.在nginx的配置文件中</p><p>修改server_name为自己的服务器地址</p><p>在licalation块中添加：proxy_pass  http:  localhost:8080;表示访问本地的web服务器位置</p><p>3.不同的路径访问不同的tomcat服务器</p><blockquote><p>安装不同的tomcat并设置配置文件中的端口：8001、8002、8003等</p><p>设置nginx的server监听以及location中的转发位置，具体如下图：</p></blockquote><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="image-20200504105942408"></p><p>将监听的nginx端口号以及tomcat的端口号在linux的防火墙中配置</p><blockquote><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8081 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 9001 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT</p></blockquote><p>重新启动防火墙以及nginx</p><p>测试：</p><p>访问路径为：192.168.159.132:9001/edu/a.html，该路径映射到端口为8080的tomcat</p><p>访问路径为：192.168.159.132:9001/vod/b.html，该路径映射到端口为8081的tomcat</p><p>配置location路径是使用的通配符：</p><blockquote><p>=：用于不含正则表达式的uri前，要求请求的字符串严格匹配</p><p>~:表示uri包含正则表达式，并且区分大小写</p><p>~*:表示uri包含正则表达式，并且不区分大小写</p><p>^~:用于不含正则表达式的uri前</p></blockquote><h5 id="负载均衡实例"><a href="#负载均衡实例" class="headerlink" title="负载均衡实例"></a>负载均衡实例</h5><p>对于同一请求分别均衡的分发到8080和8081的服务器中</p><p>1.准备两台服务器，8080和8081，并准备相同的资源及路径edu/a.html</p><p>2.负载均衡配置</p><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE.png" alt="image-20200504112024745"></p><p>3.测试路径：http: 192.168.159.132/edu/a.html</p><p>对于同一地址分别在浏览器上显示不同的服务器地址</p><p>4.nginx分配服务器的策略：</p><p>第一种，默认策略为轮询策略；第二种，根据权重分配策略</p><p>第三种，ip地址hash；第四种，fair方式，按后台响应时间来分配请求</p><h5 id="动静分离实例"><a href="#动静分离实例" class="headerlink" title="动静分离实例"></a>动静分离实例</h5><p>将动态请求与静态请求分离开来，可以有两种分离方式</p><p>一种是将静态文件独立成单独的域名，放在独立的服务器上；另一种办法是动态跟静态文件混合在一起发布，通过nginx来分开。</p><p>通过location指定不同的后缀名实现不同的请求转发，通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体的Expires定义：是一个资源设定过期时间，也就是无需去服务器端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量，此方法不适合经常变动的资源。例如设置为3d表示3天之内访问这个URL，发送一个请求，对比服务器改文件最后更新时间没有变化，则不会从服务器抓取，返回状态吗304，如果有更新，则直接从服务器重新下载，返回200。</p><p>案例准备：先建立一些静态资源,在根路径在建立data文件夹并建立两个子文件夹image以及www，在两个文件夹中放置静态的资源。</p><p>在nginx的配置文件中进行配置(/usr/local/nginx/conf/nginx.conf)</p><p><img src="%5Cmedias%5Cimages%5Cwebimg%5Cnginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="image-20200504145326327"></p><p>在浏览器中测试，http: //192.168.159.132/image/dncs.jpg</p><h5 id="nginx高可用集群"><a href="#nginx高可用集群" class="headerlink" title="nginx高可用集群"></a>nginx高可用集群</h5><p>场景，当nginx服务器出现问题时，能够保证用户能够正常访问tomcat，配置两个nginx一个主服务器一个备份服务器，使用keeplived检测nginx是否存活，对外提供虚拟ip给两个nginx的ip地址进行绑定。</p><p>准备：两台服务器，两个服务器安装nginx，两台服务器安装keepaived</p><p>安装keepalived</p><blockquote><p> yum install keepalived -y</p><p>查看安装情况</p><p>rpm  -q  -a  keepalived</p></blockquote><p>安装完成后在路径：/etc/keepalived/  中有一个配置文件keepalived.conf文件，可以配置相关的信息。</p><p>启动nginx和keepalived</p><blockquote><p>./nginx</p><p>systemctl start keepalived.service</p></blockquote><p>当主nginx挂掉后，需要调用外部的配置文件（shell脚本）将kill掉nginx主机上的keepalived。</p><h5 id="nginx原理"><a href="#nginx原理" class="headerlink" title="nginx原理"></a>nginx原理</h5><p>master&amp;&amp;worker,启动nginx后会启动master进程和worker进程，worker进程争抢资源。</p><p>一个master和多个worker设计有利于热部署，每个worker为一个独立的进程，worker的数量与服务器的cpu核数大致相等。</p><p>worker_connection，一个请求会占用2个或者4个连接数</p><p>一个master有4个worker，worker最大支持1024连接，求最大并发数量：</p><p>请求的是静态资源，需要除以2</p><p>worker_connection<em>worker_processes/2</em></p><p><em>或者</em></p><p>如果作为反向代理，需要除以4</p><p><em>worker_connection</em>worker_processes/4</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pddl规划</title>
      <link href="/2020/04/30/gui-hua-xiang-guan/"/>
      <url>/2020/04/30/gui-hua-xiang-guan/</url>
      
        <content type="html"><![CDATA[<p>角括号&lt;&gt; 表述名字</p><p>圆括号（）元素名字</p><p>方括号[]围绕着option</p><p>An asterisk（*）means “zero or more of”</p><p>a plus（+）means“one or more of”</p><p>规划系统是问题求解算法，它在关于状态和行动的显示命题表示或关系表示上运转。这些表示方法使获得高效启发式和强有力且灵活的问题求解算法成为可能。</p><p>状态空间搜索能够在前向方向（前进）和后向方法（后退）上操作。有效的启发式可由子目标独立性假设和状态规划问题的各种松弛而获得。</p><p>一个规划图可从初始状态开始增量式地构造出来。每一层包含一个所有在那个时间步出现的文字和行动的超集，并且对文字之间或行动之间互斥（或简称mutex）关系进行编码。规划图为状态空间和偏序规划器产生有有的启发式，并能直接用于GRAPHPLAN算法中。</p><p>其他方法包括情景演算公理上的一阶逻辑推理；将规划问题编制为布尔满足性问题或约束满足问题；在偏序规划空间进行显示地搜索。</p><p>进行规划的每一种主流方法都有其拥护者，而哪种方法最好还没有达成一致。方法之间的竞争和杂交导致了规划系统的效率上的重要收货。</p><p>规划系统的五大类：</p><h5 id="基于图规划的规划系统："><a href="#基于图规划的规划系统：" class="headerlink" title="基于图规划的规划系统："></a>基于图规划的规划系统：</h5><p>其代表有美国卡乃基一梅隆大学( Carnegie Mellon University) 的图规划系统GraphPlan (Blum和Furst) 、德国的IPP、英国的STAN 、美国盛顿大学(University ofWashington)的SGP(Daniel S。Weld 等)89]。</p><p>先来介绍几个概念:</p><p>1.有效(valid) 规划解:规划问题的一个有效规划解是一一个动作的集合和对每- - 一个动作发生时间的指定。</p><p>2.规划图(planning graph) :是一个具有两类节点和三类边的有向、分层图。规划图各层是命题层(propositionlevels)和动作层(actionlevels)交替出现的，命题层包含命题节点(标识为一些命题)，动作层包含动作节点(标识为动作)。规划图的第- - 层是命题层，包括规划问题初始条件下的所有命题。</p><p>图规划在两个阶段(phases)交替进行:图扩展( graph expansion)阶段和解提取(solutionextraction)阶段。图扩展阶段正向扩展规划图直到目标状态的所有命题都出现为止。解提取阶段反向搜索规划图以求出规划解。</p><h5 id="基于启发式搜索的规划方法"><a href="#基于启发式搜索的规划方法" class="headerlink" title="基于启发式搜索的规划方法"></a>基于启发式搜索的规划方法</h5><p>目前规划系统为了提高效率，几乎都采用了启发信息。启发式搜索的基本思想是:人为给定一个评估函数，对每个搜索状态进行计算，得到每个状态的值，从而决定哪个状态较好。但是，这个启发函数用在与领域无关的规划系统上比较困难。</p><p>在当前智能规划研究中，领域无关的启发信息的抽取技术是基于实现目标的动作数量，对要解决的问题P放宽到一个比较简单的问题P’，抽取技术就是基于P’来评估。Bonet提出的向前搜索的一个放宽方法7就是将操作的删除边忽略，对于每个状态s，得到在放宽了的问题P’的启发函数h’(s)就可以作为原有问题P的启发函数h*(s)的下限，这样h’(s)就可以作为合适的启发函数作用在原有问题P.上。.</p><p>实质上，初始状态和操作可以理解为-一个定义了的节点有向图，对于每个操作op都有一条由其前提条件节点指向正效果节点的边，这样从初始状态到达节点p的开销就可以计算。从状态s到节点p的开销g(s)递归定义为:</p><p>O(p)表示添加效果为p的操作集，就是p∈Add(op)。g,(Prec(op)) 是从状态从状态s到操作op前提条件节点的计算。</p><p>Bonet对上面的g ,(p)提出更为简单的向前计算过程，首先初始化图上各个节点:当p∈s，令g,(p)为0;否则令g,(p)=∞。这样，每一次操作op作用在状态s上，每个添加效果节点p∈Add(op)添加到s，g,(p) 更新为:</p><p>g,(p)= min[g,(p),1 + g,(Prec(op))]</p><p>这个计算g,(p)的过程一直到g,(p) 不再改变为止，显然，这个过程在节点数目一-定的情况下，时间复杂度是多项式的。</p><p>这样，节点集C的估算g , (C)可以由在这节点集C里面每个节点估算来得到。同理h(s)定义为:</p><p>def  h(s)= g,(G)g, (C)可以定义为三种估算:节点集C中所有节点估算值的和、节点集C中节点最小估算、节点集C中节点最大估算。在HSp[28]中，Bonet 主要采用两种估算:</p><p>A) g,(C)为节点集中所有节点估算值的和，称作添加启发函数haa:</p><p>1.HSP</p><p>规划系统HSP ( Heuristic Search Planner)[3在AIPS-00的规划大赛上取得了成功，它的与领域无关的启发信息的抽取是基于实现目标的动作数量，对要求解的问题P放宽到一个比较简单的问题P’，抽取技术就是基于P’来评估。Bonet提出的向前搜索的-一个放宽方法就是将操作的删除边忽略。对于每个状态s得到在放宽了的问题P’的启发函数h’(s)就可以作为原有问题P的启发函数h*(s)的下限，这样h’(s)就可以作为合适的启发函数作用在原有问题P .上。</p><p>2.FF<br>两个版本的FF (FAST-FORWARD)规划系统23参与了这次比赛。第-一个版本是FF-v2.2，它大致跟在2000年比赛使用的FF-v2.2版本- <em>致， 只是改掉了在预处理阶段存在的小错误:另一个版本是Metric-FF，它能处理用数字表示的约束和对用数字表示的状态数值变量的影响。两个版本的FF (FAST-FORWARD)规划系统23参与了这次比赛。第-一个版本是FF-v2.2，它大致跟在2000年比赛使用的FF-v2.2版本- *致， 只是改掉了在预处理阶段存在的小错误:另一个版本是Metric-FF，它能处理用数字表示的约束和对用数字表示的状态数值变量的影响。<br>Metric-FF可以根据用户两个要求来分别对规划系统进行两种设置。这两个要求是: 1.在最短时间内生成合法规划; 2、 生成最优的规划。前- -种设置搜索技术采用跟FF-v2.2类似的加强爬山法。这种方法是:采用放宽规划长度作为从初始状态到目标状态距离的估计和利用动作互斥来剪枝向前搜索;后一种设置搜索技术采用类似标准的A</em>算法，利用采用放宽规划长度作为从初始状态到目标状态距离的估计也就是启发函数。在两种设置中放宽规划很自然的从STRIPS/ADL中扩展得到。只需要在预处理阶段把数值型约束和影响转化，使得它们都是严格单调的。</p><p>在这些严格单调的限定下通过忽略所有删除边和数值影响变元来放宽一一个规划。 如果这个放宽规划得到解决，那么Metric-FF 综合考虑它的逻辑和数值因素跟FF-v2.2计算启发函数，假如在没有一个放宽规划能到达这个状态，那就证明这个状态是不可达的。</p><p>3.LGP</p><p>规划系统LPGl76 (Local Search in Planning Graphs)是一个基于局部搜索和规划图的规划系统，并且能处理在PDDL2.1领域上用数值来表示的度量和持续时间，和能解决生成规划和优化规划方面问题。</p><p>LGP基本的搜索策略基于Walksat- 一个 高效的SAT问题求解程序。LGP的搜索空间是一个“动作图”(“actiongraphs”),部分规划子图就表示了部分规划搜索步骤就是一一个图的修改，使得一个“动作图”转换成为另一个“动作图”。LGP使用了一种紧凑的规划图表示形式来定义搜索邻近点，使用参数启发函数来评价它的值。这些参数表示在这个部分规划中不同种类冲突的权值在搜索过程中动态计算。评价函数采用了–些通常的启发技术，例如对一个前提条件计算启发搜索开销和启发执行开销。持续的动作和数字化的量值都表示在“动作图”，且通过评价函数模型化。LGP在测试例子中能产生高质量的规划，因为每一次生成一个规划的序列，下一次质量会在这基础上得到提高。LGP采用了跟FF.相似的“最好优先”(best-first)算法，系统能在进行了若干步搜索后会自动转换到“最好优先”搜索。</p><h5 id="基于逐步细化的分层规划方法"><a href="#基于逐步细化的分层规划方法" class="headerlink" title="基于逐步细化的分层规划方法"></a>基于逐步细化的分层规划方法</h5><p>以SHOP2[36为代表的层次规划方法思想是:首先勾画出- -个完整但又比较粗略的规划解，然后逐步细化、逐步明确，直到足以具体完成整个规划的每一步 操作，层次规划方法实际上把不同性质的问题放在不同层次上加以考虑。</p><p>SHOP2</p><p>SHOP2[36]是-一个分层任务网络规划系统。跟在一般的规划需要一组目标不一 一样， 取而代之是SHOP2需要一个半序的任务序列去执行。为了解决一些领域上的规划问题，SHOP2需要- -些基于领域知识的方法来将一一个任务分解为- 组半序的子任务。 为了得到合法的规划，SHOP2将问题变形:它递归地将任务分解为子任务，直到它到达能被规划操作直接执行的原始的任务。</p><p>跟大多数分层任务网络规划系统不一样，SHOP2是从初始状态向前规划:给出几个任务需要分解SHOP2按它们同一执行顺序来得到规划。在规划过程中的每个点上，SHOP2已经知道在这个点之前所执行的操作，故SHOP2了解当前状态。这种技术使得SHOP2的预处理估计机制相当强大: SHOP2预处理方法和操作可以包含逻辑推理、复杂数值计算和外接程序。</p><p>SHOP2比SHOP成功的地方在于它的预处理过程。SHOP 需要他的任务是全序结构,然而SHOP2只需要它的任务是半序结构。因为SHOP2可以插入不同的子任务，- - 些领域知识在SHOP2比SHOP更容易表示。</p><h5 id="基于约束可满足的规划方法"><a href="#基于约束可满足的规划方法" class="headerlink" title="基于约束可满足的规划方法"></a>基于约束可满足的规划方法</h5><p>起初SATPLAN是Henry Kautz和Bart Selman深入地分析了传统的基于定理证明的规划以后提出来的完全不同于以往演绎技术的一种特殊的规划系统，它克服了传统规划系统的异常(每一个模型不一定对应一一个有效的规划解)情况，使得每-一个 正确模型都有一个有效的规划解与其相对应。</p><p><img src="https://github.com/fengyanxing/fengyanxing.github.io/raw/master/medias/images/planimages/planGsat.png" alt="算法描述"></p><p>SAT规划系统的体系结构如图11.10 所示，编译器(Compiler) 的输入是规划问题(包括初始状态、目标状态和动作集合)，它首先猜测规划解的长度，产生一个逻辑命题公式，如果逻辑命题公式是可满足的，它蕴涵着规划解是存在的:符号表( Symbol Table)记录了命题变量和规划实例之间的对应;简化器(Simplifier)运用较快(通常为线性时间)的技术(如单元子句法，纯文字消去法等)来降低CNF公式的规模;求解器(Solver)运用系统或统计的方法来找到-一个满足的赋值:解码器(Decoder) 用符号表把赋值转换成一个规划解。如果求解器发现公式是不可满足的，那么编译器就会产生新的编码(代表更长的规划解)。</p><p>由基于SAT的规划的体系结构可以看到，这种规划方法关键在于两个环节，- -个是编码方式，另一个是求解方式。有关第一个问题的研究取得了一系列的进展，如[38]中综合叙述了几种普遍的编码方式，由于基于SAT的规划算法是基于SAT算法来实现的，所以第二个问题其实就是选择好的SAT算法，而可满足性(SAT)问题是人工智能研究领域中的一个基本理论问题，最近几年来，每年都有新的SAT算法问世，人们设计各种各样的技术来提高解决SAT问题的效率39-441，这几年来主要有GSAT算法和WALKSAT算法，但是这两个算法都不是完备的，一一个比较经典的完备SAT 算法是DP算法，以下就先来介绍GSAT算法和DP算法。</p><p>总结GraphPlan和SATPlan的相同点和异同点之处，共同点: SATPlan 和GraphPlan都分两阶段进行，建立一个命题结构( Propositional Structure) ，在图规划中是规划图，在SAT规划中是CNF wff， 在第一-步所建立的结构中搜索规划解。异同点:图规划(GrphPlan)用的实例化命题结构算法较好，SAT规划( SatPlan)的搜索算法更加强大。</p><p>结合以上两种算法的优点，Kautz 和Selman于1998 年在AIPS.上提出了BLACKBOX规划算法，此系统分三个步骤进行工作:</p><p>1.把一个规划问题(以标准的STRIPS形式描述的)转化为一个规划图。</p><p>2.把第一步中生成的规划图转化成一个CNF wff。</p><p>3.运用最快的SAT引擎解决wff。</p><h5 id="基于模型检测的规划方法"><a href="#基于模型检测的规划方法" class="headerlink" title="基于模型检测的规划方法"></a>基于模型检测的规划方法</h5><p>模型检测(Model Checking)是当前计算机研究领域上的一个热点，它将一个系统模型跟逻辑需要进行比较，从而发现不一致性。传统上，这个思想用来硬件电路上的验证和网络协议的验证。近期，这个思想用在智能规划中，取得了令人瞩目的成就，产生了一系列功能较强的规划系统:MBP、MIPS 、TALPL ANNER、TLPI AN和UMOp。</p><p>命题公式可以转化为不同的范式，一 般情况下转化得到的范式有合取范式(CNF,Conjunctive Normal Form)和析取范式(DNF，Disjunctive Normal Form)。对于每个命题公式都有一个相应的逻辑范式来跟其相等价，但是这样的范式复杂度是以指数级增长的。为何要使用范式?其主要理由有两个: </p><p>1、当采用某种范式来描述命题公式的时候，相当一部分算法更加容易来设计。例</p><p>如:很多定理机器证明的算法基础–消解规则，它就采用合取范式来描述命题公式，假如不采用合取范式来描述，那么设计消解规则将是比较困难的。</p><p>2、当采用某种范式来描述命题公式的时候，相当一部分可计算问题解决起来的效率</p><p>更加高。例如:测试命题公式的有效性是一个co-NP 难题，但这个命题公式采用合取范式来描述时，那么这复杂度就是-一个多项式时间，只需要对每一个合取项进行检查是否对一个命题变量p都包含了p和→p。</p><p>但是对于一-些可计算问题来说，转化为一个普通的范式通常不是一个最好的解决方案。就如采用合取范式来测试命题公式的有效性，它的时间复杂度是多项式时间，但是这是由空间复杂度来换取的，它的空间复杂度为指数级。</p><p>近期在智能规划系统上，各位研究者也根据相应的设计采取了不同的范式，其中之一是两元判定图表BDD’511 (Binary Decision Diagrams)，采用BDD的主要原因是:采用BDD表达的两个谓词公式时，两个BDD范式逻辑相等，当且仅当这两个BDD范式是语法相等，即两个BDD范式逻辑相等，当且仅当这两个BDD范式是同一个BDD范式。然而,BDD范式空间复杂度也是没加限制的命题公式的指数级倍数，但是在BDD.上的操作通常可以是在多项式时间完成。</p><p>BDD表达式是基于三重布尔操作ifthen-else ite ( p,φ,,φ2 )定义为</p><p>(p^φ)v(-p^φ2)，p是一个命题。任何- -个布尔表达式都能采用这个布尔操作和其命题变量和常量(1: true，0: false)。它为布尔函数提供了一个有效地的、规范的表达方法，被广泛用于模型检测领域，特别是使用在协议验证方面。</p><h4 id="智能规划的应用"><a href="#智能规划的应用" class="headerlink" title="智能规划的应用"></a>智能规划的应用</h4><p>目前智能规划应用在自动系统中使得自动化系统灵活性、健壮性和适应性得到提高。主要应用研究领域有:机器人、智能企业和商业软件。</p><p>在IJCAI-01的智能规划讨论会上，会议主题是“资源约束规划”，目标是为实际应用上的规划研究学者提供一一个交流的平台。 会议.上的规划系统都是在计算机实际应用系统中得到广泛使用的规划系统，例如:美国宇航局的ASPEN规划系统、马里兰大学的CIRCA、.美国宇航局的EUROPA、华盛顿大学的LPSAT规划系统和爱丁堡大学的O-Plan规划系统等等。这次会议主要讨论内容有:混合规划系统、整合规划系统、资源约束上的推理技术、时序规划、智能规划和调度、优化目标规划和有关规划的模型、问题领域和实验结果。</p><h5 id="航空航天中的应用"><a href="#航空航天中的应用" class="headerlink" title="航空航天中的应用"></a>航空航天中的应用</h5><p>智能规划的一个重要应用领域是航天航空，有兴趣的读者可以参照《宇航学报》上的一篇综述《航天器自主运行技术的进展》[68], 这是宇航专业的文章，可是它大部分讲的是智能规划的一个重要应用领域是航天航空，有兴趣的读者可以参照《宇航学报》上的一篇综述《航天器自主运行技术的进展》[68], 这是宇航专业的文章，可是它大部分讲的是</p><h5 id="ASPEN"><a href="#ASPEN" class="headerlink" title="ASPEN"></a>ASPEN</h5><p>在航天航空应用中取得最好效果的是美国宇航局的ASPEN (Automated Scheduling andPlanning Environment)00规划系统。ASPEN获得了1999年美国宇航局的软件比赛优秀奖并旷泛用在进行外太空任务的宇航器上，包括Citizen Explorer、MARS-01 和DS-T 等宇航器目前对外也有其商业版本出售。<br>在宇航器中智能规划的应用主要是将较高层次的科学研究和工程操作指令转化为较低层次的宇航器执行指令。ASPEN结合了宇航器操作约束、飞行规范、 宇航器硬件模型、科学实验目标和操作过程来自动生成较低层次的宇航器操作序列。通过自动生成宇航器操作序列和结合了相关的领域知识APSEN使得宇航任务可以由一个小分队来控制，这样降低了开销。</p><p>ASPEN是一个基于面向对象的系统，提供了- -组可重用的软件部件，这些部件可以比较简单地应用在目前复杂的规划系统上，包括:<br>1、约束模型语言，可以令用户方便的定义应用领域。</p><p>2、约束管理系统，用来表示和维护宇航器的可操作性、资源约束和操作需要的条件。3、一组搜索策略，用来规划生成和修改，并满足“硬约束”。</p><p>4、一种语言来表示规划选择和优化这些选择。</p><p>5、 “软”的、实时的修正规划能力。</p><p>6、时序推理系统，用来表示和维护时序约束。<br>7、图形化规划和调度的界面。</p><p>这方面应用的-一个具体例子是哈勃空间望远镜(HST, Hubble Space Telescope)的修复,在修复过程中,地面人员不断得到关于HST能作什么、不能作什么的最新信息，然后对修复工作作出规划,从而使HST恢复了正常观测能力!</p><h5 id="机器人中的应用"><a href="#机器人中的应用" class="headerlink" title="机器人中的应用"></a>机器人中的应用</h5><p>规划在机器人中的应用主要有:环境的模型化描述、机器人能力的模型化描述、目标的模型化描述和实时的输入响应。机器人规划研究跟其它规划研究领域不一样，主要在于机器人处于有噪音的各类部分的环境模型中，它通过感应器和交流信道得到的信息都存在噪音，这样机器人就需要将感应和执行的整合来进行直接规划。</p><p>目前主要研究领域包括: 1、路径规划:指在机器人从一个开始的位置如何走到目标位置的控制机制并且要满足动态的约束。2、感知规划:主要是有关如何采集外部和内部信息的规划，例如:辨别物体确定机器人位置对环境的观察。3、任务规划:跟传统的规划问题相似，不过更加注重时间和资源的分配在动态的环境、不确定的或部分已知的状态知识的条件下进行规划。4、规划交流:多个机器人之间和人与机器人之间如何进行信息交换，包括询问信息和反馈信息两大部分。</p><p>智能规划在机器人学中具体的应用方向有:环境模型的描述，控制知识的表示，路径规划，任务规划，非结构环境下的规划，含有不确定性时的规划，协调操作(运动)规划，装配规划，基于传感信息的规划，任务协商与调度和制造(加工)系统中机器人的调度。</p><h5 id="在智能工厂中的应用"><a href="#在智能工厂中的应用" class="headerlink" title="在智能工厂中的应用"></a>在智能工厂中的应用</h5><p>智能规划是人工智能研究中应用性很强的–个研究领域.例如,在工厂作业调度规划问题中(Job shop scheduling)，就是要考虑在有限的加工资源(车床,刨床,钻床)的情况下，根据已知的工件的加工顺序要求对整个车间的生产作出安排,使得加工完所有工件所需的时间尽可能的少,每台机床的等待时间尽可能的短.这就使工厂在同样设备条件下，由于作业调度规划合理而增加了生产能力,从而给工厂带来了可观的经济效益.</p><p>智能规划在智能化工厂“中的应用”是指从生产设计到生成产品监测生产的一系列过程它不只包括单个企业，还可以处理多个企业之间的关系，例如:供应链和虚拟企业。主要采用资源约束的方法进行求解[72]。目前主要研究领域包括:</p><p>1、生产流程规划:在一个功能化的工厂中将-一个生产要求转变为一组详细的操作指令。许多基于知识工程的软件在这方面取得了较好的效果，先将现实生产流程转化为知识库中信息，然后再根据相应的生产要求来转化。</p><p>2、生产安排规划和调度:将生产安排用来迎合客户的需求按时交货，即我们通常说的ERP作业调度。</p><h5 id="商业中的应用"><a href="#商业中的应用" class="headerlink" title="商业中的应用"></a>商业中的应用</h5><p>1.网路信息集成</p><p>网络信息集成74的过程是根据领域本体的内容，从互联网上采集信息并将信息集成到领域本体中，网络信息集成的实质意义是为网络信息提供–种重新组织和理解的机制。目前研究主要集中在查询规划中。查询规划可以定义为:把对信息对象框架的查询转化成只对信息源作访问的操作序列。在规划的执行过程中有时需要将信息源返回的结果合并起来分析以作出下一步的规划。所以信息的合并是查询规划中的一个重要环节。我们把信息的合并定义为:合并两个残缺信息对象的框架，即将两个属性值对集结合成一一个 属性值对集。合并的依据是信息源之间的相关链接。目前查询规划已经扩展到生物信息查询上，较好的有在IBM公司的DiscoveryLink系统上的应用75]。</p><p>2.运输规划<br>网络信息集成74的过程是根据领域本体的内容，从互联网上采集信息并将信息集成到领域本体中，网络信息集成的实质意义是为网络信息提供–种重新组织和理解的机制。目前研究主要集中在查询规划中。查询规划可以定义为:把对信息对象框架的查询转化成只对信息源作访问的操作序列。在规划的执行过程中有时需要将信息源返回的结果合并起来分析以作出下一步的规划。所以信息的合并是查询规划中的一个重要环节。我们把信息的合并定义为:合并两个残缺信息对象的框架，即将两个属性值对集结合成一一个 属性值对集。合并的依据是信息源之间的相关链接。目前查询规划已经扩展到生物信息查询上，较好的有在IBM公司的DiscoveryLink系统上的应用75]。<br>在目前物流应用问题中根据动态的不断改变的运输要求而对一-队交通工具进行实时规划(行程调整和计划安排) [701。 这些交通工具可以是:在一个房子里边的移动机器人、在一个城市道路上的的士甚至是经典的电梯问题。然而在这个问题中存在着很多的制约条件来使得运输规划变得复杂，例如时间限制(Time window)、最终期限、运输能力、行程时间、资源优化，更多的是象交通状况、天气状况、车辆中途损坏等不可预测的事件。另外运输规划在突发事件的大规模运输调度中也有所应用73]，例如:短时间内的军事调度和部署。</p><p>另一个典型的工厂作业调度规划问题是考虑在有限辆的货运汽车的前提下，在不同的地点之间运送货物.规划的输出是一张车辆运转计划表,使得汽车尽可能地满载运输,空车运行情况尽可能地少,车辆闲置的情况尽可能地少,这当然也会给运输公司带来可观的效益.美国联帮太平洋铁路(Union Pacific Railroad, UPRR)有 31000 多英里的铁路，覆盖美国西部的24个州。手工编制部分调度计划需要几天时间，而且由于规划的资源利用率低造成很大浪费. Murphy等人1996 年1月为美国联帮太平洋铁路建立的铁路自动调度系统(Rail TrainScheduler, RTS), RTS能够产生好的,低费用的调度计划691.美国联帮太平洋铁路由于使用了这个调度系统，每年可节约资金50万美元。.</p><p>protege</p><p>可以自定义本体也可以使用URI进行获取本体。</p><p><a href="http://www.pizza.com/ontologies/pizza.owl" target="_blank" rel="noopener">http://www.pizza.com/ontologies/pizza.owl</a></p><p>关于形式语义学(参考书籍：形式语义学引论 第二版)：</p><p>形式语义学(Formal Semantics)，是研究程序设计语言的语义的学问，以数学为工具，运用符号和公式，严格的解释程序设计语言的语义，使语义形式化。</p><p>形式语义学：</p><blockquote><p>操作语义学(Operational Semantics),着重模拟数据加工过程中计算机系统的操作;</p><p>指称语义学(Denotational Semantics),主要刻画数据加工的结果，而不是加工过程的细节;</p><p>代数语义学(Algebraic Semantics),可看作是指称语义学的一个分支，以使用代数学为特征;</p><p>公理语义学(Axiomatic Semantics)，用公理化的方法描述程序对数据的加工</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 课题相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java概念与工具类</title>
      <link href="/2020/04/30/java-wen-ti-ji-lu/"/>
      <url>/2020/04/30/java-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>java基础与概念:</p><p>1.什么是面向对象？</p><blockquote><p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个问题的步骤中的行为。面向对象技术是一种以对象为基础，以事件或消息来驱动对象执行处理的程序设计技术，它具有抽象性、封装性、继承性、多态性。</p></blockquote><p>什么是面向过程？</p><blockquote><p>面向过程是分析出解决问题所需要的步骤，然后把这些步骤一步一步实现，使用的时候一个一个一次调用即可。将函数与函数操作的数据进行分离，面向对象对于数据和数据的操作进行了封装。</p></blockquote><p>什么是多态？</p><blockquote><p>同一操作作用于不同的对象，可以有不同的解释，产生不同的结果，多态的前提是继承和方法的重写。<strong>实质是父类引用指向子类对象。</strong></p><p>使用多态:封装隐藏了实现的细节，使得代码模块化，继承可以扩展已经存在的类/模块，使得代码重用，多态增加代码的重用且一定程度解决软件模块之间的紧耦合，提高扩展性</p><p>多态的好处：提高程序复用性、提高可扩充性和可维护性</p></blockquote><p>什么是继承？</p><blockquote><p>描述的是事物之间的所属关系，通过继承可以使得事物之间形成一种关系体系</p><p>类的继承是指在一个现有的类的基础上构建一个新的类，构建出来的类称之为子类，现有的类称之为父类，子类会自动拥有父类除了私有的方法之外所有可继承的属性和方法</p><p>继承的好处：提高了代码的复用性，提高软件开发的效率；</p></blockquote><p>什么是封装？</p><blockquote><p>封装将类的某些信息隐藏在类的内部，不允许外部程序直接访问，只能通过该类提供的方法来实现对隐藏信息的操作和访问。</p></blockquote><p>小结：</p><blockquote><p>总结封装、继承、多态的作用：<br>1.封装：把对象的属性与方法的实现细节隐藏，仅对外提供一些公共的访问方式<br>2.继承：子类会自动拥有父类所有可继承的属性和方法<br>3.多态：配合继承与方法重写提高了代码的复用与扩展；如果没有方法重写，则多态同样没有意义</p></blockquote><p>java中的基本数据类型(4类8种)</p><table><thead><tr><th>四类</th><th>八种</th><th>字节数</th><th>数据表示范围</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td></td><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td></td><td>int</td><td>4</td><td>-2147486348~2147483648</td></tr><tr><td></td><td>long</td><td>8</td><td>-2^65~2^65-1</td></tr><tr><td>浮点数</td><td>float</td><td>4</td><td>-3.403E38~3.403E38</td></tr><tr><td></td><td>double</td><td>8</td><td>-1.798E308~1.798E308</td></tr><tr><td>字符型</td><td>char</td><td>2</td><td>表示一个字符,’a’</td></tr><tr><td>布尔型</td><td>boolean</td><td>1</td><td>false或者true</td></tr></tbody></table><p>如果使用long类型的数据必须在后缀添加L字符，小数不加后缀默认double类型</p><p>数据类型范围：</p><blockquote><p>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p><p>数据类型小的能够转换成数据类型大的，数据类型大的不能直接转换成类型小的数据</p></blockquote><p>常见的字符的Ascii编码：</p><blockquote><p> 数字<strong>0-9</strong>对应ASCII编码十进制为<strong>48-57</strong>, </p><p>字母<strong>a-z</strong>对应ASCII编码十进制为<strong>97-122</strong>，</p><p>字母<strong>A-Z</strong>对应ASCII编码十进制为<strong>65-90</strong></p></blockquote><p>访问修饰符：</p><table><thead><tr><th></th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>所有类</td><td>*</td><td></td><td></td><td></td></tr><tr><td>不同包的类的子类</td><td>*</td><td>*</td><td></td><td></td></tr><tr><td>同一包中</td><td>*</td><td>*</td><td>*</td><td></td></tr><tr><td>同一类中</td><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><p>常用类:</p><p>System类</p><blockquote><p>currentTimeMillis();方法，用于记录系统当前时间的毫秒值</p><p>exit(int status);终止正在运行的java程序</p><p>gc()用来运行jvm中垃圾回收器，完成内存中垃圾的清除</p><p>getProperty(String key)用来获取指定键中所记录的系统属性信息</p><p>arraycopy方法，用来实现将源数组部分元素复制到目标数组的指定位置</p><p>arraycopy(int[] a,int index1 ,int[] b,int index2,int num);分别表示a数组中index1位置的元素复制到b数组中index2位置开始的位置，复制num个元素</p></blockquote><p>Math类：</p><blockquote><p>1.ceil方法，结果为比参数值大的最小整数的double值;</p><p>例如：Math.ceil(3.3); //d1的值为 4.0；Math.ceil(-3.3); //d2的值为 -3.0</p><p>2.floor方法，结果为比参数值小的最大整数的double值</p><p>例如：Math.floor(3.2);结果为3.0；Math.floor(-3.3);结果为-4.0</p><p>3.pow方法，返回第一个参数的第二个参数次幂的值</p><p>例如：Math.pow(2.0,3.0);值为8.0</p><p>4.round方法：返回参数值四舍五入的结果</p><p>例如：Math.round(5.5);结果为6.0 Math.round(5.4)结果为5.0</p></blockquote><p>Arrays类：</p><blockquote><p>binarySearch(int[] a,int key);二分搜索法来对指定的数组获取指定的值</p><p>sort方法，用来对指定数组中的元素进行排序（元素值从小到大进行排序）</p></blockquote><p>BigInteger类：</p><blockquote><p>构造方法有：</p><p>BigInteget(byte[] val);</p><p>BigInteger(int signum,byte[] magnitude);</p><p>BigInteger(int bitLength,int Certainty,Random rnd);</p><p>BigInteger(int numBits,Random rnd);BigInteger(String val);</p><p>BigInteger(String val,int tadix)</p><p>a.add(BigInteger  b)；将两个大整数相加</p><p>a.subtract(BigInteger  b)；将两个大整数相减</p><p>a.multiply(BigInteger  b)；将两个大整数相乘</p><p>a.divide(BigInteger  b)；将两个大整数相除</p></blockquote><p>BigDecimal类</p><blockquote><p>常用的构造函数BigDecimal(String  num)</p><p>建议浮点数据以字符串形式给出,因为参数结果是可以预知的</p><p>除法需要设置精度与保留位数</p><p>bigDecimal.divide(BigDecimal bigDecimal2,int  scale,int roundModel);</p></blockquote><p>集合类(Collection集合、List集合、Set集合、Map集合)</p><p>Collection集合是一个接口，其实现有List集合和Set集合</p><p>List接口，是一个元素存取<strong>有序的、带有索引</strong>的集合，集合中可以存储<strong>重复</strong>的元素。</p><p>List接口实现的子类有ArrayList集合和LinkedList集合</p><p>​    ArrayList集合存储的数据结构是<strong>数组结构</strong>，元素增删慢，查找快</p><p>​    LinkedList集合存储数据的数据结构是<strong>链表</strong>，方便元素添加删除的集合</p><p>​    Vector集合：数据存储的结构是<strong>数组结构</strong>，Vector中提供一个独特的取出方式，就是枚举Enumeration，早期的迭代器</p><p>Set集合接口：setz中<strong>不能存放重复</strong>的元素，并且元素<strong>没有顺序</strong>，通过equals来判断元素是否重复</p><p>HashSet集合采用<strong>哈希表结构</strong>存储数据，保证元素唯一性的方式依赖于hashCode和equals方法。哈希表底层也是使用数组，数组也存放对象，而对象的位置比较特殊，当需要把这些对象存放在数组中时，会根据这些对象的特有数据结合相应的算法，计算这个对象在数组中的位置，然后把这个对象存放在对象数组中，称之为哈希表。</p><p><strong>使用hashCode来判断对象存储的位置，使用equals判断两个对象是否为同一个对象</strong></p><p>HashSet保证<strong>元素唯一</strong>,可是元素存放进去是<strong>没有顺序</strong>的，那么我们要保证有序可以使用HashSet的子类LinkedHashSet，它是<strong>链表和哈希表</strong>组合的一个数据存储结构。</p><p>Map接口：存储的元素是成对存在的，每个元素有键和值两部分组成，通过键找到对应的值。</p><p>map中不能包含重复的键，值可以重复，每个键只能对应一个值。常用的集合HashMap和LinkedHashMap集合。</p><p>HashMap&lt;K,V&gt;存储采用的是哈希表结构，元素存取顺序不保证一致，为了保证键的唯一不重复，需要重写键的hashCode和equals方法</p><p>LinkedHashMap：采用哈希表结构+链表结构，通过链表结构保证元素存取顺序一致，通过哈希表结构保证键的唯一、不重复。</p><p>Entry键值对对象：</p><p>Entry将键值对的对应关系封装成了对象，在遍历map时可以单独的获取kay或者value</p><p><strong>Map集合不能直接使用迭代器</strong>，将其转换成set集合然后使用迭代器遍历元素。</p><p>Collectiions集合工具类：常用的部分方法有：</p><p>Collections.sort(list); // 集合元素排序</p><p>Collections.shuffle(list);//  集合元素存储位置打乱</p><p><strong>接口与抽象类：</strong></p><p>1.抽象类：</p><blockquote><p>抽象类使用abstract修饰</p><p>抽象类不能使用new关键字来实例化对象</p><p>抽象类可以有抽象方法，抽象类也可以有具体的方法</p><p>抽象类中的抽象方法只有方法体</p></blockquote><p>2.接口：</p><blockquote><p>接口使用interface修饰</p><p>接口不能实例化</p><p>一个类只能继承一个抽象类，但是可以实现多个接口</p><p>接口中的方法为抽象方法，jdk1.8对接口进行增强，使用default关键字，可以使得接口中对方法实现</p></blockquote><p>异常(异常分类，如何使用，如何自定义异常)</p><p>IO（File类、字符流、字节流、文件上传与下载、读取excel，txt）</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring学习笔记</title>
      <link href="/2020/04/30/spring-shu-ji-yue-du/"/>
      <url>/2020/04/30/spring-shu-ji-yue-du/</url>
      
        <content type="html"><![CDATA[<p>Spring学习笔记</p><p>1.IOC的概念：全称是Inversion of  Contorl叫做控制反转，和依赖注入概念等同，思想是不需要自己去创建对象，让IOC创建好拿来。</p><p>主要是通过引入中间代理消除对象间复杂的耦合关系，并统一管理分散的复杂耦合关系。</p><p>IOC三种依赖注入方式:</p><table><thead><tr><th>方式</th><th>构造方法注入</th><th>Setter注入</th><th>接口注入</th></tr></thead><tbody><tr><td>好处</td><td>对象被构造后进入就绪状态，可以马上使用</td><td>当前对象只要为其依赖对象所对应的属性添加setter方法，就可以通过Setter将相应的依赖对象设置到被注入的对象中</td><td>被注入对象如果想要为其注入依赖对象，就必须实现某个接口，接口中提供注入方法</td></tr><tr><td>优点</td><td>构造后即进入就绪状态；</td><td>setter方法可以被继承，允许设置默认值</td><td>—</td></tr><tr><td>缺点</td><td>当依赖对象比较多时，构造方法参数比较长</td><td>对象构造后无法进入就绪状态</td><td>强制被注入对象实现不必要的接口，带有侵入性</td></tr></tbody></table><p>注：接口和接口方法不重要，重要的是接口声明方法的参数类型必须是“被注入的对象”所依赖的对象类型</p><p>2.IOC Service Provider职责是：</p><p>1.业务对象的构建管理：IOC Service Provider需要将对象的构建逻辑从客户端对象剥离</p><p>2.业务对象间的依赖绑定：IOC Service Provider通过结合之前构建和管理所有业务对象，以及各个业务间可以识别的依赖关系，将这些对象依赖的对象注入绑定，从而保证每个业务对象在使用的时候，可以处于就绪状态。</p><p>IOC Service Provider如何管理对象间的关系：</p><p>方式一：直接编码方式注册对象管理信息</p><p>方式二：配置文件的方式</p><p>方式三：元数据方式（即注解的方式）</p><p>3.IOC容器之BeanFactory</p><p>IOC Service Provider是一个可以有对象创建管理和依赖注入服务的一个容器，是Spring IOC容器的一部分，Spring Ioc还提供对象生命周期管理，线程管理，查找服务，AOP支持等</p><p>Spring提供了两种容器类型：BeanFactory和ApplicationContext</p><p><strong>BeanFactory：</strong>基础类型IOC容器，提供完整的IOC服务支持，如果没有特殊指定，默认采用延迟初始化策略（lazy-load）。</p><p><strong>ApplicationContext：</strong>在BeanFactory的基础上构建，是相对比较高级的容器实现，其拥有BeanFactory的所有支持，还提供了时间发布、国际化信息等。ApplicationContext间接继承BeanFactory，还实现了其他的接口。</p><p>BeanFactory的对象注册与依赖绑定方式：</p><p>方式一：直接编码</p><p>方式二：外部配置文件方式（properties配置和xml配置）</p><p>方式三：注解方式</p><p>spring相关的问题：</p><p>1.请用自己的语言描述springIOC、DI、MVC的基本执行原理。</p><blockquote><p>答：SpringIOC、DI、MVC主要执行分为三个阶段</p><p>配置阶段：主要完成web.xml和Annotation配置</p><p>初始化阶段：完成IOC容器的初始化、DI的自动注入和HandlerMapping的初始化</p><p>运行阶段：根据用户请求的URL调用对应的Method，将结果打印到浏览器</p></blockquote><p>2.Spring中的Bean是线程安全的吗？为什么？</p><blockquote><p>Spring中的Bean是用户自己写的类，该bean的线程是否安全与spring无关，因为Spring只承担了创建和管理bean的职责，并没有对Bean进行任何修改。</p></blockquote><p>3.使用自己的语言详细描述SpringIOC和DI的工作流程</p><blockquote><p>IOC流程：</p><p>a.读取配置文件</p><p>b.解析配置文件，并封装成BeanDefinition</p><p>c.把BeanDefinition对应的实例放入容器进行缓存</p><p>DI流程：</p><p>a.循环读取BeanDefinition的缓存信息</p><p>b.调用getBean()方法创建对象实例</p><p>c.将创建好的对象实例包装为BeanWarpper对象</p><p>d.将BeanWapper对象缓存到IOC容器</p><p>e.循环IOC容器进行注入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门</title>
      <link href="/2020/04/29/netty-ru-men/"/>
      <url>/2020/04/29/netty-ru-men/</url>
      
        <content type="html"><![CDATA[<p>Netty入门</p><p>Netty是JBOSS提供的开源项目，github上的独立项目</p><p>Netty是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠的网络IO程序。Netty主要是针对TCP协议下，面向客户端高并发应用或Peer to Peer场景下的大量数据持续传输的应用，本质是NIO框架。</p><p>互联网行业在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高性能通信框架。</p><p>java支持3中网络编程模型I/O模式：BIO、NIO、AIO</p><p>java BIO同步并阻塞，服务器实现模式为一个连接一个线程，客户端有一个连接就有一个服务器线程进行处理，如果连接不做任何事产生不必要的开销（服务器监听与等待客户端发送数据产生的阻塞），应用场景：适用于连接数目较小且固定的架构，服务器资源要求较高</p><p>java NIO同步非阻塞，服务器实现模式为一个线程处理多个请求，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求就进行处理。连接数目较多，连接比较短，聊天服务器，弹幕系统，服务器通讯</p><p>java AIO异步非阻塞：AIO引入通道的概念，采用Proactor模式，有效的请求才启动线程，特点是先有操作系统完成后才通知服务器端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。适用于连接数目多且连接比较长的架构，例如相册服务器。</p><p>BIO连接流程：</p><p>1.服务器端启动ServerSocket</p><p>2.客户端启动Socket对服务器进行通信，默认情况下服务器需要对每个客户建立一个线程与之通信。</p><p>3.客户端发出请求后，先咨询是否有线程响应，没有则等待或被拒绝</p><p>4.服务器响应后，客户端等待请求结束后，再继续执行</p><p>Bio服务器端程序（使用线程池）</p><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> xing <span class="token operator">*</span> <span class="token annotation punctuation">@create</span> <span class="token number">2020</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">-</span>Multithreading<span class="token operator">-</span>study<span class="token operator">-</span>master <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//线程池机制</span>        <span class="token comment" spellcheck="true">//1.创建一个线程池</span>        <span class="token comment" spellcheck="true">//2.如果有客户端连接就创建一个线程，与之通信</span>        ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//监听，等待客户端的连接</span>            <span class="token keyword">final</span> Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接到一个客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//线程池监听到一个连接就与之通信</span>            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程Id"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"当前线程名"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过socket，获取输入流</span>            InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭socket的连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Bio的程序中会后两个阻塞的位置，第一个位置在于serverSocket.accept();，服务器端箭筒时阻塞，第二个位置在inputStream.read(bytes);，服务器端接受数据的阶段。</p><p>windows7安装telnet服务</p><p>1.点击控制面板——》程序——》打开或关闭windows功能，选择telnet服务器与telnet客户端进行勾选，点击确定。</p><p>2.设置，win+R，services.msc回车，将telnet设置为手动启动</p><p>3.输入命令telnet  ip    端口号  例如： telnet 127.0.0.1   6666</p><p>注：连接后如果不显示字符只显示光标，使用ctrl+]解决</p><p>java NIO，三大核心部分：Channel(通道)、Buffer(缓冲区)、Selector(选择器)</p><p>NIO面向通道，面向块的的编程，数据读取到稍后处理的缓冲区，需要时在缓冲区中前后移动。Bio使用流的方式处理数据，Nio使用快的方式处理数据，I/O的效率比流I/O高很多</p><p>nio三大核心的关系：</p><p>每个channel对应一个Buffer，Selector对应一个线程，一个线程对应多个Channel连接，selector进行切换，轮询channel由事件（Event）决定，Selector根据不同的事件，在各个通道上切换。Buffer是一个内存块，是一个数组，数据的读取写入是通过Buffer，BIO要么是输入流要么是输出流。NIO的buffer可以读也可以写，需要一个flip方法切换，channel是双向的，可以返回底层操作系统的情况。</p><p>缓冲区(Buffer)：缓冲区本质上是一个可以读写数据的内存块，可以理解成一个容器对象该对象提供了一组方法，可以使用内存块，缓冲区对象内置一些机制，能够跟踪和记录缓冲区的状态变化情况。常用的缓冲区：ByteBuffer、shortBuffer、CharBuffer、IntBuffer、LongBuffer、DoubleBuffer、FloatBuffer</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//buffer抽象类中的变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编辑</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位置，下一个要被读或者写的索引，每次读写缓冲区都会改变</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//容量，缓冲区可容纳最大数据量</span><span class="token comment" spellcheck="true">/*常用方法：    public static ByteBuffer allocateDirect(int capacity);创建直接缓冲区    public static ByteBuffer allocate(int capacity);创建直接缓冲区    public abstract byte get();从当前位置position上get，get之后，position会自动+1    public abstract byte get(int index);从绝对位置get    public abstract ByteBuffer put(byte b);从当前位置上put，put后，position+1    public abstract ByteBuffer put(int index,byte b);从绝对位置上put*/</span></code></pre><p>通道(Channel)</p><p>通道类似于流，但其能够同时进行读写，而流只能读或者写；通道可以实现异步读写数据；通道可以从缓冲区读数据，也可以在缓冲区写数据</p><p>Channel是一个接口，常用的实现类有：FileChannel(文件的数据读写)、DatagramChannel()、ServletSocketChannel()和SocketChannel()</p><p>FileChannel类：</p><p>public int read(Buffer dst)从通道读取数据并放到缓冲区</p><p>public int write(ByteBuffer src) 把缓冲区的数据写到通道</p><p>public long transferFrom(ReadableByteChannel src,long position,long count);从目标通道复制数据到当前通道</p><p>public long transferTo(long position,long count,WriteableByteChannel target);把数据从当前通道复制给目标通道</p><p>记录linux的一个命令</p><blockquote><p>strace -ff -o out  /usr/java/jdk1.8.0_181-amd64/bin/java TestOldSocket</p></blockquote><p>Selector(多路复用器)：Selector能够检测多个注册的通道上是否有事件发生，可以同时并发处理多个客户端连接</p><p>Selector类：其子类SelectorImpl，selector与线程相关。</p><p>客户端连接后ServerSocketChannel会有SocketChannel，一个Selector可以注册多个SocketChannel，注册后返回SelectorKey，监听select()有事件发生时，通过SelectorKey能够通过方法channel()反向获取事件发生的channel,</p><p>SelectionKey API：</p><blockquote><p>public static final int OP_READ = 1;<br>public static final int OP_WRITE = 4;<br>public static final int OP_CONNECT = 8;<br>public static final int OP_ACCEPT = 16;</p></blockquote><p>ServletSocketChannel API：</p><p>服务器端监听客户端socket连接</p><blockquote><p>open()；得到一个ServlerSocketChannel通道</p><p>bind(SocketAddress local);设置服务器端口号</p><p>configBlocking(boolean block)；设置阻塞或非阻塞</p><p>accept();接受一个连接，返回代表这个连接的通道对象</p><p>register();注册一个选择器并设置监听事件。</p></blockquote><p>SocketChannel API</p><p>网络IO通道，具体负责进行读写操作，NIO把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。</p><p>群聊系统：</p><blockquote><p>需求：实现一个服务器和客户端之间的数据简单通讯，实现多人群聊。</p><p>服务器端可以监测用户上线，离线，并实现消息转发功能</p></blockquote><p>零拷贝(没有Cpu参与的拷贝)：</p><p>java中常用的零拷贝有mmap(内存映射)和sendFile。</p><p>java AIO（异步不阻塞的IO）常用的两种模式Readctor和Proactor</p><p>java中的NIO是Reactor模式，有效的请求才能够启动线程，适用于连接数较多且连接时间较长的应用。</p><table><thead><tr><th></th><th>BIO</th><th>NIO</th><th>AIO</th></tr></thead><tbody><tr><td>io模型</td><td>同步阻塞</td><td>同步非阻塞(多路复用)</td><td>异步非阻塞</td></tr><tr><td>编程难度</td><td>简单</td><td>复杂</td><td>复杂</td></tr><tr><td>可靠性</td><td>差</td><td>好</td><td>好</td></tr><tr><td>吞吐量</td><td>低</td><td>高</td><td>高</td></tr></tbody></table><p>Netty：异步的基于时间驱动的网络应用框架，可以快速开发高性能、高可靠的网络IO程序</p><p>原生的NIO存在的问题：API较为复杂，需要熟悉Selector、ServerSocketChannel、SocketChannel、ByteBuffer等，需要熟悉多线程编程以及网络编程。</p><p>优点：高性能、高吞吐量，延迟更低，减少资源消耗，最小化不必要的内存复制</p><p>Reactor解决传统IO的问题：Reactor称之为反应器模式、分发者模式、通知者模式</p><p>1.基于I/O复用模型，多了连接公用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个链接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始处理业务</p><p>2.基于线程池复用线程资源，不必为每个连接创建线程，将连接完成后的业务处理任务分配给其他线程进行处理，一个线程可以处理多个连接的业务。</p><p>Reactor是将客户端的多个请求交给服务处理器模式（ServiceHandler）又称事件驱动，服务器端程序处理传入的请求并将这些请求同步分派到响应的处理线程。</p><p>核心组成：Rector和Handlers</p><p>Rector在一个单独的线程，用于监听和分发时间</p><p>Handlers是一个事件处理器，用来在线程池中获取线程来处理事件</p><p>模式一:单Reactor单线程(一个线程能够处理多个客户端的消息)</p><p><strong>Reactor里有：Selector和dispatch</strong></p><p>模式二：单Reactor多线程</p><p>Reactor对象通过selector监控客户端请求事件，通过dispatcher进行分发，如果建立连接请求，则Acceptor通过accept处理连接请求，然后创建一个Handler对象，处理完连接后的各种事件。如果不是连接请求，reactor将分发调用连接对象的handler来处理，handler负责响应时间不进行处理，通过read读取数据后，将其发送给后面的worker线程池的某个线程处理，worker线程会分配独立线程完成业务并将结果返回给handler，handler收到响应通过send方法将结果进行返回。</p><p>模式三：主从Reactor多线程</p><p>Reactor主线程MainReactor对象通过select监听连接事件，通过Acceptor处理客户端的连接，将其他的数据请求分给SubReactor进行处理，SubReactor将连接的客户端加入一个队列，并创建handler进行各种事件处理，handler通过read读取数据，分发给后面的worker线程处理。</p><p>Netty模型(基于主从Reator模型)</p><p>BossGroup线程维护Selector，只关注Accept；当接收到Accept事件时，获取对应的Socketchannel，封装成NIOScoketChannel并注册到Worker的selector中，并维护</p><p><strong>Boss Group和WorkerGroup类型都是NioEventGroup</strong>，这是一个事件循环组，每一个事件循环都是一个NIOEventLoop，每个NioEventLoop都有一个Selector，用于监听绑定在其上的socket的网络通讯。Boss专门负责接收客户端的连接，Worker专门负责网络读写操作。</p><p>Boss  NioEventLoop循环的步骤有三步：</p><p>1.轮询accept事件</p><p>2.处理accept事件，与客户端建立连接，生成NioSocketChannel，并将其注册到某个worker NioEventLoop上的selector</p><p>3.处理任务队列的任务，即runAllTasks</p><p>Worker NioEventLoop循环执行的步骤：</p><p>1.轮询read，write事件</p><p>2.处理IO事件，即read，write事件，在对应NioSocketChannel处理</p><p>3.处理任务队列的任务，即runAllTasks</p><p>任务队列的三种使用场景：用户程序自定义普通任务、用户自定义定时任务、非当前Reactor线程调用Channel的各种方法。</p><blockquote><p>NioEventLoopGroup下包含多个NioEventLoop</p><p>每个NioEventLoop中包含有一个Selector，一个taskQueue</p><p>每个NioEventLoop的Selector上可以注册监听多个NioChannel</p><p>每个NioChannel只会绑定在唯一的NioEventLoop上</p><p>每个NioChannel都绑定有一个自己的ChannelPipline</p></blockquote><p>Future表示异步的执行结果，可以通过它提供的方法来检测是否完成。ChannelFuture是一个接口，可以对其添加监听器，当事件发生时监听器会得到通知。</p><p>Bootstrap、ServerBootStrap，一个netty应用通常是由bootstrap开始主要作用是配置整个Netty程序。</p><p>Future、ChannelFuture通过该类或接口实现监听事件</p><p>Channel：Netty的网络组建，能够用于执行网络I/O操作，能够获取网络连接通道状态、网络连接配置等信息。</p><p>NioSocketChannel，异步的客户端TCP Socket连接</p><p>NioServerSocketChannel，异步服务器端TCP Socket连接</p><p>NioDatagramChannel异步UDP连接</p><p>NioSctpChannel，异步的客户端sctp连接</p><p>NioSctpServerChannel，异步的Sctp服务器端连接</p><p>Selector：基于Selector对象实现I/O多路复用，通过Selector一个线程可以监听多个连接的Channel事件。</p><p>ChannelHandler是一个接口，处理O/I事件或拦截I/O操作。</p><blockquote><p>//通道就绪状态事件</p><p>channelActive(ChannelHandlerContext ctx)</p><p>//通道数据读取事件</p><p>channelRead(ChannelHandlerContext ctx, Object msg)</p><p>//异常处理事件</p><p>exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</p></blockquote><p>PipeLine和ChannelPipeline是一个handler集合，一个Piprline中有多个handler，一个Channel包含了一个ChannelPipeline，而ChannelPineline又维护了一个由ChannelHandlerContext组成的双向链表，并且每个ChannelHandlerContext中又关联着一个ChannelHandler。</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高并发</title>
      <link href="/2020/04/29/java-gao-bing-fa/"/>
      <url>/2020/04/29/java-gao-bing-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="java高并发基础概念"><a href="#java高并发基础概念" class="headerlink" title="java高并发基础概念"></a>java高并发基础概念</h4><p>什么是进程？</p><blockquote><p>进程，是并发执行的程序在执行过程中<strong>分配和管理资源的基本单位</strong>，是一个动态概念，竟争计算机系统资源的基本单位。每一个进程都有一个自己的地址空 间，即进程空间或（虚空间）。进程空间的大小 只与处理机的位数有关，一个 16 位长处理机的进程空间大小为 216 ，而 32 位处理机的进程空间大小为 232 。进程至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。<strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在</strong></p></blockquote><p>什么是程序？</p><blockquote><p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念；<strong>进程是</strong>执行程序的一次执行过程，它是一个动态的概念，是<strong>资源分配的单位</strong>，一个进程中可以包含有若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义,<strong>线程是CPU调度和执行的单位</strong></p></blockquote><p>什么是线程？</p><blockquote><p>线程，在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引进了。线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为<strong>轻权进程或轻量级进程</strong>，也是 CPU <strong>调度</strong>的一个基本单位。<strong>线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源</strong>。</p></blockquote><p>什么是协程？</p><blockquote><p>协程是一种<strong>用户态的轻量级线程</strong>，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则<strong>基本没有内核切换的开销</strong>，可以不加锁的访问全局变量，所以<strong>上下文的切换非常快</strong>。</p></blockquote><p>启动一个java程序</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>jps</td><td>显示系统内所有Hotspot虚拟机进程</td></tr><tr><td>jstat</td><td>用于收集Hotspot虚拟机各个方面的运行数据</td></tr><tr><td>jinfo</td><td>显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>生成虚拟机的内存转储快照</td></tr><tr><td>jstack</td><td>生成虚拟机的线程快照</td></tr><tr><td>jhat</td><td>用于分析heapdump文件，建立http/html服务器，使得用户在浏览器中访问</td></tr></tbody></table><blockquote><p>jps [options] [hostid]</p><p>参数有：</p><p>-p 只输出LVMID，省略主类的名称</p><p>-m  输出虚拟机进程启动时传递给主类main的函数参数</p><p>-l  输出主类的全名，如果进程执行的是jar包，输出jar路径</p><p>-v  输出虚拟机进程启动时jvm参数</p></blockquote><h4 id="java多线程与并发编程"><a href="#java多线程与并发编程" class="headerlink" title="java多线程与并发编程"></a>java多线程与并发编程</h4><h6 id="1-多线程的三大特性"><a href="#1-多线程的三大特性" class="headerlink" title="1.多线程的三大特性"></a>1.多线程的三大特性</h6><p><strong>原子性：</strong> java的内存模型保证了基本数据类型的操作具备原子性的，对于double和long类型的数据非原子操作，虚拟机提供了字节码指令monitorenter和moniterexit进行lock和unlock</p><p><strong>可见性：</strong>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。java内存模型是通过将工作内存中的变量值同步到主内存中，依赖于主内存作为媒介的方式实现可见性。Volatile关键字保证了线程之间的可见性。java中还能够保证可见性的有cynchronized(是同步快对一个变量unlock时，必须先把此变量同步到主内存中)和final关键字(在构造器中完成初始化后，构造器没有将this的引用传递出去，对于其他线程就可见final的值)</p><p><strong>有序性：</strong>java内，一个线程内部所有的操作都是有序的，如果在一个线程中观察另一个线程，所有的操作都是无序的。java中使用volatile和synchronized两个关键字来保证线程之间操作的有序性，Synochronized是一个变量在同一时刻只允许一条线程对其进行lock操作。</p><h6 id="2-java内存模型"><a href="#2-java内存模型" class="headerlink" title="2.java内存模型"></a>2.java内存模型</h6><p>可以参考另一篇文章：</p><h6 id="3-Volatile关键字"><a href="#3-Volatile关键字" class="headerlink" title="3.Volatile关键字"></a>3.Volatile关键字</h6><p>volatile与synchronized的区别：</p><blockquote><p>a.volatile轻量级，只能修饰变量，synchronized重量级，还可以修饰方法</p><p>b.volatile只能保证数据的可见性，不能够用来同步，因为多个线程并发访问volatile修饰的变量不会阻塞</p><p>c.synchronized不仅可以保证可见性，还保证原子性，因为只有获得了锁的线程才能进入临界区，从而保证临界区中的所有语句全部执行，多个线程之间争抢synchronized锁对象时，会出现阻塞。</p></blockquote><h6 id="4-ThrreadLocal"><a href="#4-ThrreadLocal" class="headerlink" title="4.ThrreadLocal"></a>4.ThrreadLocal</h6><p>提高一个线程的局部变量，访问某个线程拥有自己的局部变量</p><p>当使用threadlocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响到其他线程对应的副本。</p><p>ThreadLocal通过map集合，Map.put(“当前线程”，值);</p><h6 id="5-线程池"><a href="#5-线程池" class="headerlink" title="5.线程池"></a>5.线程池</h6><p>什么是线程池?</p><p>线程池是指在初始化一个多线程应用程序的过程中创建一个线程集合，然后需要执行新的任务时重用这些线程而不是新建一个线程。线程池的个数完全取决于可用内存数量和应用程序的需求。</p><p>线程池的作用：</p><blockquote><p>1.线程池改进了一个应用程序的响应时间，由于线程池中的线程已经准备好等待被分配任务，应用程序可以直接拿了使用而不用新建一个线程</p><p>2.线程为每个短生存周期任务创建一个完整的开销并可以在任务完成后回收资源</p><p>3.线程池根据当前在系统中运行的进程来进行优化线程时间片</p><p>4.线程池允许我们开启多个任务而不用为每个线程设置属性</p><p>5.线程池允许我们正在执行的任务的程序参数传递一个包含状态信息的对象</p><p>6.线程池可以用来解决处理一个特定的求情最大线程数量限制问题</p></blockquote><p>线程池的四种创建方式：</p><blockquote><p>Executors提供的四种线程池</p><p>1.newCachedThreadPool:创建一个可以缓存的线程池，如果线程池长度超过处理需要，可灵活回收空余线程</p><p>2.newFixedThreadPool:创建一个定长的线程池，可控制线程最大并发数，超出线程会在队列中等待</p><p>3.newScheduledThreadPool:创建一个定长的线程池，支持定时及周期任务执行</p><p>4.newSingleThreadExecutor:创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行。</p></blockquote><p>线程池使用时会用到的概念：</p><p>核心数——》任务队列——》最大线程数——》拒绝策略</p><p>个人理解该过程类似于银行业务，一开始有三个业务窗口，两个VIP窗口，顾客少的时候不用排队，再多的人时，安排叫号，使其在候选区域等候，当再多人员时，开放vip窗口办理业务，当人数过多时，选择一定的拒绝策略，让多余的人不用等候。</p><p>拒绝策略有四种：</p><p>1.AbortPolicy：抛出异常，RejectedExecutionException</p><p>2.DisCardPolicy：什么也不做，直接忽略</p><p>3.DiscardOldestPolicy：丢弃执行队列中最老的任务，尝试为当前提交的任务腾出位置</p><p>4.CallerRunsPolicy：直接由提交任务者执行这个任务</p><h4 id="线程以及线程实例"><a href="#线程以及线程实例" class="headerlink" title="线程以及线程实例"></a>线程以及线程实例</h4><h5 id="1-线程的创建-三种"><a href="#1-线程的创建-三种" class="headerlink" title="1.线程的创建(三种)"></a>1.线程的创建(三种)</h5><blockquote><p> 继承Thread类、实现Runnable接口、实现Callable接口</p></blockquote><h6 id="1-1继承Thread类"><a href="#1-1继承Thread类" class="headerlink" title="1.1继承Thread类"></a>1.1继承Thread类</h6><p>重写run方法，使用线程从网上下载一个图片</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebDownloader ed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ed<span class="token punctuation">.</span><span class="token function">downloader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载文件名为"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token function">TestDemo02</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestDemo02 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo02</span><span class="token punctuation">(</span><span class="token string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595563900064&amp;di=efff05e7793f5b061865ceebb724c354&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.feizl.com%2Fupload%2Fallimg%2F170614%2F0913162K0-3.jpg"</span><span class="token punctuation">,</span><span class="token string">"./file1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestDemo02 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo02</span><span class="token punctuation">(</span><span class="token string">"fileurl"</span><span class="token punctuation">,</span><span class="token string">"filename.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//下载器,使用工具类commons-io.jar</span><span class="token keyword">class</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloader</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileUtils<span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="1-2实现runnable接口"><a href="#1-2实现runnable接口" class="headerlink" title="1.2实现runnable接口"></a>1.2实现runnable接口</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo03</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建实现Runnable接口的对象t1</span>        TestDemo03 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方式</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"runnable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Thread类:<br>    子类继承Thread类<br>    子类对象.start()方法<br>    继承Thread类后不能再继承其他的类</p><p>实现Runnable接口，实现重写run方法<br>    启动线程的方式：传入目标对象+Thread对象.start()<br>    避免了单继承的局限性，灵活方便，方便同一个对象被多个线程使用</p></blockquote><p>并发带来的问题</p><blockquote><p>并发问题发生在多个线程对同一个共享资源或静态资源操作的时候，例如一个购票场景，可能或有多余的票，存在，一下是一个存在线程安全的程序。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo04</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到第"</span><span class="token operator">+</span>ticket<span class="token operator">--</span><span class="token operator">+</span><span class="token string">"票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestDemo04 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token string">"gizz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token string">"guy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>视频中龟兔赛跑的小例子，兔子设计的速度比乌龟快，但是兔子被胜利冲昏了头脑，睡了一觉，赢得或许就不是自己了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Race</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String winner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标识唯一的胜利者</span>    <span class="token comment" spellcheck="true">//每个人跑到100，谁赢</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">%</span><span class="token number">99</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasWin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->跑了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断是否已经存在胜利者了</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            winner <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"winner is"</span><span class="token operator">+</span>winner<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Race r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Race</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">"乌龟"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="1-3实现Callable接口"><a href="#1-3实现Callable接口" class="headerlink" title="1.3实现Callable接口"></a>1.3实现Callable接口</h6><blockquote><p>1.实现Callable接口，需要指定返回值类型</p><p>2.重写call方法，需要抛出异常</p><p>3.创建目标对象</p><p>4.创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(n);</p><p>5.提交执行: Future<Boolean> result = ser.submit(T);</p><p>6.获取结果: boolean r1 = result.get();</p><p>7.关闭服务:ser.shutdownNow();</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用FutureTask类创建线程对象并获取返回值</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现Callable接口，重写call方法，含有返回值</span><span class="token keyword">class</span> <span class="token class-name">CallDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-静态代理"><a href="#2-静态代理" class="headerlink" title="2.静态代理"></a>2.静态代理</h5><p>被代理对象与代理兑现实现同一个接口，代理对象调用被代理对象的真正的接口方法，被代理对象专注做自己的事情，代理对象做更多其他的事情。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/7/24-concurrent */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WedingCompany wdc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WedingCompany</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">WeMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wdc<span class="token punctuation">.</span><span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span>  <span class="token class-name">Marry</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//被代理的对象1</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新郎很开心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//被代理的对象2</span><span class="token keyword">class</span> <span class="token class-name">WeMan</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新娘很开心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代理对象，做其他的事情，接口中的具体事情调用被代理对象的方法</span><span class="token keyword">class</span> <span class="token class-name">WedingCompany</span> <span class="token keyword">implements</span>  <span class="token class-name">Marry</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Man m <span class="token punctuation">;</span>    <span class="token keyword">private</span> WeMan wm<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WedingCompany</span><span class="token punctuation">(</span>Man m <span class="token punctuation">,</span>WeMan wm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wm <span class="token operator">=</span> wm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wm<span class="token punctuation">.</span><span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"布置婚礼现场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收钱，收拾结婚现场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-Lambda表达式"><a href="#3-Lambda表达式" class="headerlink" title="3.Lambda表达式"></a>3.Lambda表达式</h5><p>$$<br>\lambda 是希腊字母中排序第十一位的字母，读作Lambda<br>$$</p><p>函数式编程：</p><blockquote><p>(params)-&gt;expression[表达式]</p><p>(params)-&gt;statement[语句]</p><p>(params)-&gt;{statements}</p></blockquote><p>关键所在是需要有一个<strong>函数式接口</strong> 只有一个抽象方法的接口</p><blockquote><p>定义一个接口，定义一个实现类实现接口以及实现接口的方法，由于该类的对象可能只使用一次，因此使用一个静态内部类以及局部内部类简化，对于接口也可以使用匿名内部类简化，java8使用lambda对函数式接口做了更多简化。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//3.静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">Like2</span> <span class="token keyword">implements</span>  <span class="token class-name">Ilike</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ilike like <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.局部内部类</span>        <span class="token keyword">class</span>  <span class="token class-name">Like3</span> <span class="token keyword">implements</span> <span class="token class-name">Ilike</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        like <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.匿名内部类，没有类的名称，必须借助接口或者父类</span>        like  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ilike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.lambda简化</span>        like <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.创建接口对象</span><span class="token keyword">interface</span> <span class="token class-name">Ilike</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.创建实现类</span><span class="token keyword">class</span> <span class="token class-name">Like</span> <span class="token keyword">implements</span>  <span class="token class-name">Ilike</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><blockquote><ol><li>new Thread();    新建状态</li><li>start()；  就绪状态</li><li>run();      执行状态</li><li>中断或者结束时     死亡状态</li><li>sleep()等方法     阻塞状态</li></ol></blockquote><table><thead><tr><th align="left">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">setPripority(int newPripority)</td><td align="center">更改线程的优先级</td></tr><tr><td align="left">static void sleep(long millis)</td><td align="center">在指定的毫秒数内让当前正在执行的线程休眠</td></tr><tr><td align="left">void join()</td><td align="center">等待该线程终止</td></tr><tr><td align="left">static void yield()</td><td align="center">暂停当前正在执行的现场呢过对象，并执行其他线程</td></tr><tr><td align="left">void interrupt()</td><td align="center">中断线程，一般不使用</td></tr><tr><td align="left">boolean isAlive()</td><td align="center">测试现场呢过是否存活</td></tr></tbody></table><p><strong>线程停止</strong></p><p>jdk提供的stop、destory方法已经废弃不建议使用，一般希望线程自己停下来，自己使用一个标志位进行终止变量使得线程停止。</p><p><strong>线程休眠</strong></p><blockquote><p>1.sleep(时间) 指定当前线程阻塞的毫秒数</p><p>2.sleep存在异常InterruptedException</p><p>3.sleep时间达到后线程进入就绪状态</p><p>4.sleep可以模拟网络延迟，倒计时等</p><p>5.每个对象都有一个锁，sleep不会释放锁</p></blockquote><p>使用sleep(时间)模拟网络延迟，放大问题的发生性。</p><p>使用sleep倒计时，每秒钟递减一</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>线程礼让 yield</strong></p><blockquote><p>礼让线程，让当前正在执行的现场线程暂停，但不阻塞</p><p>将线程从运行状态转为就绪状态</p><p>礼让是让cpu重新调度，但不一定成功，</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YieldDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyYield yield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>yield<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>yield<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span>  <span class="token class-name">MyYield</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程停止运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>线程强制执行</strong></p><p>线程的合并，类似于插队使用join方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinDemo</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程vip来了"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        JoinDemo jd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>jd<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主函数执行，会被插队</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>线程的优先级</strong></p><blockquote><p>java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程去执行</p><p>线程优先级用数字表示，范围从1~10</p><p>Thread.MIN_PRIORITY =  1</p><p>Thread.MAX_PRIORITY = 10</p><p>Thread.NORM_PRIORITY = 5</p><p>使用以下方式改变或获取优先级</p><p>getPriority();setPriority(int  xxx)</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyPriority th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th1<span class="token punctuation">,</span><span class="token string">"低优先级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th1<span class="token punctuation">,</span><span class="token string">"高优先级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPriority</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>守护(daemon)线程</p><blockquote><p>线程分为用户线程和守护线程</p><p>虚拟机必须确保用户线程执行完毕</p><p>虚拟机不用等待守护线程执行完毕</p><p>后台记录操作日志、监控内存、垃圾回收等待</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        God god<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        People people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread goddeame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置线程为守护线程</span>        goddeame<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goddeame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//守护现场</span><span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"守护你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一般线程</span><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">36500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"活着不易"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========GoodBye World!==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>同一个对象(全局变量或静态变量)被多个线程同时操作，线程同步问题的解决使用的是<strong>队列+锁</strong>  （Synchronized）</p><p>同步快Synchronized(Obj){}，Obj称之为同步监视器，一般使用共享的资源作为同步监视器。</p><blockquote><p>同步监视器的执行过程(底层使用的是monitor  enter和monitor exit)</p><p>1.第一个线程访问，锁定同步监视器，执行其中代码</p><p>2.第二个线程访问，发现同步监视器被锁定，无法访问</p><p>3.第一个线程执行完毕，解锁同步监视器</p><p>4.第二个线程访问，加锁并访问</p></blockquote><p><strong>死锁</strong></p><blockquote><p>互斥条件：一个资源只能被一个进程使用</p><p>请求与保持：一个进程因请求资源而阻塞时，对已获得的资源保持不放</p><p>不可剥夺：进程已获得的资源，在未使用完前，不能强行剥夺</p><p>循环等待：若干进程之间形成一种头尾相接的循环等待资源关系</p></blockquote><p>死锁实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经获取到1，准备获取到2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1获取2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经获取到2，准备获取到1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2获取1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DeadLock dc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dc1<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        DeadLock dc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dc2<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dc1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dc2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Lock接口：是java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p><p><strong>ReentrantLock类实现了Lock接口</strong>，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以<strong>显式加锁、释放锁。</strong></p><p>synchronized与Lock的对比</p><blockquote><p>Lock是显式锁，synchronized是隐式的锁，作用域之外自动释放</p><p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好</p><p>使用优先级顺序：Lock&gt;同步代码块&gt;同步方法</p></blockquote><h5 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h5><p>线程之间的通信问题，需要线程之间同步处理，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。生产者和消费者之间，仅有synchronized是不够的。</p><blockquote><p>synchronized可阻止并发更新同一个共享资源，实现了同步</p><p>synchronized不能用来实现不同线程之间的消息传递</p></blockquote><p><strong>Object的方法</strong>解决线程之间的通信问题</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一致等待，直到其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的现场呢过</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级高的线程优先调度</td></tr></tbody></table><p>解决方式1：管程法</p><blockquote><p>生产者:负责生产数据的模块</p><p>消费者:负责处理数据的模块</p><p>缓冲区:消费者不能直接使用生产者的数据，因此引入一个缓冲区</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQuestion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SynContainer sy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生产者线程类</span><span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>SynContainer container<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者生产了"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费者线程类</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>SynContainer container<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者消费了第"</span><span class="token operator">+</span>container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品</span><span class="token keyword">class</span> <span class="token class-name">Chicken</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//缓冲区</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//容器</span>    Chicken<span class="token punctuation">[</span><span class="token punctuation">]</span> chick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//容器计数器</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生产者放产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Chicken chickpara<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果容器满了，就需要等待消费者消费</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span>chick<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通知消费者消费</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果没有满，就将产品放入容器中</span>        chick<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> chickpara<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知消费者消费</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//消费者消费</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  Chicken <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//消费者等待生产者生产商品</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        Chicken chicken <span class="token operator">=</span> chick<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知生产者生产</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>解决方式2：信号量法</p><p>采用一个标志位，标志位不同时通知不同的线程做事</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQuestion02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TVshow tVshow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>tVshow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>tVshow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>tVshow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>tVshow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生产者(演员)</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">{</span>    TVshow tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span>TVshow tv<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"大本营播放中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"广告播放中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费者(观众)</span><span class="token keyword">class</span>  <span class="token class-name">Watcher</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">{</span>    TVshow tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Watcher</span><span class="token punctuation">(</span>TVshow tv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品（节目）</span><span class="token keyword">class</span> <span class="token class-name">TVshow</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//演员表演，观众等待</span>    <span class="token comment" spellcheck="true">//观众观看，演员等待</span>    String voice<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表演</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String voice<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"演员表演了"</span><span class="token operator">+</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span>  <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观看了："</span><span class="token operator">+</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>线程的创建与销毁、使用量比较大，对性能的影响很大。</p><blockquote><p>ExecutorService pool = Executors.newFixedThreadPool(10);</p></blockquote><p>线程池的好处：</p><blockquote><p>1.提高响应速度(减少了创建线程的时间)</p><p>2.降低资源消耗(重复利用线程池中线程，不需要每次创建)</p><p>3.便于线程管理</p><p>​    corePoolSize:核心线程池的大小</p><p>​    maximunPoolSize：最大线程数</p><p>​    keepAliveTime：线程没有任务时最多保持多长时间后会终止</p></blockquote><p>线程池相关的类：ExecutorService和Executors</p><p>ExecutorService：线程池接口，常见的子类有ThreadPoolExecutor</p><blockquote><p>void execute(Runnable command)： 执行任务/命令，没有返回值，一般用来执行Runnable</p><p>Future submit(Callable task):执行任务，有返回值，一般又来执行Callable</p><p>void shutdown()：关闭连接池</p></blockquote><p>Executor：工具类、线程池的工具类，用于创建并返回不同类型的线程池</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个池子，大小为10</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>基础的知识，反复学习，更加牢固</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网通信</title>
      <link href="/2020/04/26/tcp-xie-yi-ma-shi-bing-jiang-jie/"/>
      <url>/2020/04/26/tcp-xie-yi-ma-shi-bing-jiang-jie/</url>
      
        <content type="html"><![CDATA[<p>互联网通信(后期自己对内容进行完善)</p><p>1.分层（主要是为了解耦）</p><pre class=" language-shell"><code class="language-shell">exec 9<> /dev/tcp/www.baidu.com/80#9表示文件描述符#<>：表示输入输出流#exec#/dev/tcp/www.baidu.com/80  在linux表示文件，linux一切皆文件（摄像头、显示器的等）echo -e "GET / HTTP/1.0\n" 1>& 9##  1>&  指令表示输出指向一个文件描述符cat 0<& 9</code></pre><p>传输控制层（UDP、TCP）</p><p>TCP面向<strong>连接的、可靠的</strong>传输协议（三次握手）</p><p>1.客户端发送SYN给服务器请求连接，其中约定数据包大小</p><p>2.服务器给客户端发送syn+ack(该ack=客户端seq+1)</p><p>3.客户端发送ack给服务器进行确认</p><p>当传输层建立连接后双方的操作系统开辟资源</p><p>为什么两次连接不可行？</p><blockquote><p>对于两次连接时：</p><p>客户端A给服务器B发送请求，由于网络时延导致A发送的消息在网络中过久，A重新发送数据给服务器B，B与A完成正常的数据交换后，延时的数据到达服务器，B等待A连接，A已经拿到资源，不回复服务器B会导致B一致处于监听状态。</p></blockquote><p>四次挥手</p><p>1.客户端发送fin给服务器请求连接，进入FIN_WAIT_1状态</p><p>2.服务器给客户端发送ack，Server进入LAST+ACK状态(不确认是否断开，只表示接收到消息)</p><p>3.服务器给客户端发送fin,Server进入LAST_ACK状态（服务器确认断开）</p><p>3.客户端发送ack给服务器进行确认，客户端进入TIME_WAIT状态，Server进入CLOSED状态</p><blockquote><p>#linux下抓包</p><p>yum  install  tcpdump</p><p>tcpdump   -nn  -i  eth0   port  80</p><p>curl  url     —&gt; 例如  curl   <a href="http://www.baidu.com:80" target="_blank" rel="noopener">www.baidu.com:80</a></p></blockquote><p>网络层（ip）</p><p>ip地址点分字节，ip地址与子网掩码进行按位与操作得到网络号（网关）</p><p>linux路由表：route -n</p><p>arp协议，主机获取网关的mac的地址进行广播，网关将自己的mac地址交给主机，主机进行数据与ip地址封装</p><blockquote><p>arp -d  删除的路由中的记录 &amp;&amp; curl url</p><p>tcpdump -nn -i eth0 port 80 or arp</p></blockquote><p>Http协议的一些基本概念：</p><p>HTTP超文本传输协议是一个基于请求与相应模式的，无状态的，应用层协议，常基于TCP的连接</p><p>http协议内容：请求行、请求头、空行、数据</p><p>客户端请求消息：请求方法，URL，协议版本为请求行，请求头部，头部字段名，值，请求数据</p><p>服务器端响应消息：状态行，消息报头，空行，响应正文</p><blockquote><p>URI：统一资源标识符    访问资源的命名机制，存放资源的主机名、资源的名称由路径决定</p><p> URL：统一资源定位符      URN：统一资源命名</p></blockquote><p>Http：的方法有：</p><blockquote><p>1.GET为获取资源数据get方法用于请求指定的页面信息，并返回请求消息的主体</p><p>2.POST为提交资源数据post方法用于向指定的资源提交数据</p><p>3.PUT为更新资源数据</p><p>4.DELETE为删除资源数据</p><p>5.HEAD为读取资源的元数据</p><p>6.OPTIONS为读取资源多支持的所有请求方法</p><p>7.TRACE为回显服务器收到额请求</p><p>8.CONNECT为保留将来使用</p></blockquote><p>多个socket对应一个进程：多路复用器：EPOLL</p><p>netty需要了解线程池相关知识</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bos项目的简单记录</title>
      <link href="/2020/04/22/bos-xiang-mu-ji-lu/"/>
      <url>/2020/04/22/bos-xiang-mu-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>BOS项目</p><p>1.数据库环境搭建：</p><blockquote><ol><li><p>net start mysql</p></li><li><p>mysql -uroot -p123</p></li><li><p>create database bos32 character set utf-8;</p></li><li><p>use bos32;</p><p>—-查看所有的用户，先使用root用户登录</p><p>select user,host from mysql.user;</p><p>—-创建当前数据库的专享用户xing</p></li><li><p>create user xing identified by ‘root123’;</p></li><li><p>grant all on bos32.* to xing;</p><p>—-重新登录</p><p>mysql -uxing -proot123</p></li></ol></blockquote><p>2.搭建项目环境</p><p>创建一个父工程bos-parent，maven项目，是一个pom文件格式</p><p>创建子工程bos-utils，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-domain，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-dao，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-service，是一个maven module，是一个jar文件格式</p><p>创建子工程bos-web，是一个maven module，是一个war文件格式</p><p>对于web模块eclipse下会有红色的叉，这是由于创建的项目缺少WEB-INF文件，web模块右键，使用java EE  Tools工具，Generator Deployment…构建项目目录。</p><p>一个包裹其他模块的父工程是一个pom文件格式，其中有组件和模块的配置信息：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 通过属性定义指定jar的版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate.version</span><span class="token punctuation">></span></span>5.0.7.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts2.version</span><span class="token punctuation">></span></span>2.3.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts2.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro.version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- struts2 begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 排除传递的依赖 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-spring-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.struts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>struts2-convention-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${struts2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- struts2 end --></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate end --></span>        <span class="token comment" spellcheck="true">&lt;!-- log start --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log end --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 加入servlet和jsp的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入pinyin4J的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.belerweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pinyin4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入json-lib的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json-lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入c3p0jar包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入ehcache的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入shiro框架的依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入MySQL数据库驱动依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 引入tomcat插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/bos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-domain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>bos-utils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>3.配置</p><p>第一步配置web.xml文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 配置过滤器，解决hibernate懒加载 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>openSessionInView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>openSessionInView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通过上下文参数指定spring文件位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置spring框架的监听器 默认寻找WebInfo下的spring配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置struts的过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>第二步配置struts.xml文件(文件存放在web模块的main中的resource目录下)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE struts PUBLIC    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"    "http://struts.apache.org/dtds/struts-2.3.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出信息，false输出struts的信息少 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constant</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts.devMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在struts-spring的整合包中已经进行的相关的设置        &lt;constant name="struts.objectFactory" value="spring"/>     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basicstruts2<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 需要进行权限控制的页面访问  没有指定默认执行struts中的ActionSupport中的execute方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_*_*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dispatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/WEB-INF/pages/{1}/{2}.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts</span><span class="token punctuation">></span></span></code></pre><p>第三步配置log4j.properties日志文件(一般的项目在src文件下，maven继承的项目放在web模块的main中resource目录下)</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">### direct log messages to stdout </span><span class="token comment" spellcheck="true">### 使用控制台记录日志信息，因此不会打印到文件中</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span><span class="token comment" spellcheck="true">### direct messages to file mylog.log ###</span><span class="token attr-name">log4j.appender.file</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.FileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">d:\\mylog.log</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span><span class="token comment" spellcheck="true">### set log levels - for more verbose logging change 'info' to 'debug' ###</span><span class="token comment" spellcheck="true">### fatal error warn info debug trace</span><span class="token comment" spellcheck="true">### (六个日志等级：致命错误、普通错误、警告、普通信息、调试信息、堆栈信息)</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">off, stdout(第一个参数设置日志的级别，off为关闭日志输出，第二个参数为日志的输出位置stdout输出到控制台，file输出到指定的文件中)</span></code></pre><p>第四步配置applicationContext.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                         http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context                        http://www.springframework.org/schema/context/spring-context.xsd                        http://www.springframework.org/schema/aop                        http://www.springframework.org/schema/aop/spring-aop.xsd                        http://www.springframework.org/schema/tx                         http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上面引入springxml中的约束，有context、aop、tx等，配置数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driverUrl}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置LocalSessionFactionBean,Spring提供的用于整合Hibernate的工厂bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate5.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--嵌套配置时需要注意参数的设置是name和ref属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernateProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.dialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>org.hibernate.dialect.MySQL5Dialect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.hbm2ddl.auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.show_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.format_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置hibernate的映射文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappingLocations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath:com/itxing/bos/domain/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate5.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  使用注解开发，无需配置dao、service以及切面、切点等--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itxing.bos<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 支持sprig注解        例如：@Controller、@Service、@Repository、        @Component、@AutoWired、@Resource     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>第五步创建一个项目的目录结构</p><p>​     每一个模块下建立相应的包文件结构，web层下一般放置拦截器、过滤器、监听器等；service层一般是接口和实现类；dao层是接口与实现类；domain放置的是POJO文件。</p><p>第六步将项目使用的资源文件复制到项目中</p><p>  复制静态页面到web目录下的webapp目录下</p><p>将项目进行关联,在web项目上点击run选择maven   install命令将各个模块组建起来，点击run on service在服务器上运行访问：<a href="http://localhost:8080/bos-web/login.jsp" target="_blank" rel="noopener">http://localhost:8080/bos-web/login.jsp</a> ,查看是否启动</p><p>使用svn管理代码：</p><p>1.创建一个新的文件夹作文仓库管理的位置，点击右键在此创建版本库。</p><p>2.更改conf文件夹下的svnserve.conf</p><pre class=" language-conf"><code class="language-conf">anon-access = noneauth-access = writepassword-db = passwdauthz-db = authz</code></pre><p>3.更改conf文件夹下的passwd文件(创建用户)</p><pre class=" language-conf"><code class="language-conf">[users]# harry = harryssecret# sally = sallyssecretxing = root123</code></pre><p>4.更改conf文件夹下的authz文件</p><pre class=" language-conf"><code class="language-conf">[aliases][groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&joe### 定义组，向组总添加人员信息、添加人员的权限信息，添加组的权限信息developgroup = xing[/]xing = rw@developgroup = rw</code></pre><p>在该仓库外的文件夹下进入cmd启动服务，使用命令</p><blockquote><p>svnserve  -d -r   当前的仓库路径</p></blockquote><p>如果在cmd命令行之下不能svn命令，先进行svn的修复工作，在对其进行svn命令的检查svn info</p><p>创建一个配置文件每次启动时点击.bat文件即可，使用svn对代码进行管理</p><p>前端页面使用jquery easyui</p><p>引入静态资源文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../themes/default/easyui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../themes/icon.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../demo.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../jquery-1.8.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../jquery.easyui.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>前端的编写</p><p>1.layout页面布局</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用div描述每个区域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星制作管理系统<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 北部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统菜单<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>西部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>东部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>南部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>2.accordion折叠面板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星管理系统2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统设置<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 制作accordion折叠面板            使用div表示每个面板             --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-accordion<span class="token punctuation">"</span></span> <span class="token attr-name">dataoptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>3.tabs选项卡面板</p><pre class=" language-html"><code class="language-html">s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>星星管理系统3.0<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>north<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>系统设置<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>west<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-accorfion<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板一<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-save<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板二<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>center<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>easyui-tabs<span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fit:true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 制作一个tabs选项卡面板 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconCls:<span class="token punctuation">'</span>icon-cut<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板一<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closable:true<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板二<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>面板三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>east<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>region:<span class="token punctuation">'</span>south<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>ztree插件</p><p>引入ztree的文件</p><p>使用标准json构建ztree</p><p>使用普通的json构建ztree</p><p>使用ajax异步请求获取数据</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle学习</title>
      <link href="/2020/04/15/guan-xi-xing-shu-ju-ku-zhi-oracle/"/>
      <url>/2020/04/15/guan-xi-xing-shu-ju-ku-zhi-oracle/</url>
      
        <content type="html"><![CDATA[<p>关系型数据库之Oracle</p><p>Oracle数据库是一个数据管理系统（RDBMS），提供开放的，全面的，近乎完整的信息管理，一个Oracle数据库由多个实例组成，实例操作数据库，任意时刻一个实例只能与一个数据库关联，一个数据库上只有一个实例对其进行操作。</p><p>Oracle数据库：是硬件上存放数据库的文件，文件组织在一起成为一个逻辑整体，成为Oracle数据库。</p><p>Oracle实例：位于物理内存里的数据结构，有一个共享的内存池和多个后台进程所组成，共享的内存池可以被所有进程访问。用户需通过实例获取数据库的数据，不能直接读取硬盘的信息。</p><p>表空间(users)与数据文件：表空间由多个数据文件组成；数据文件只能属于一个表空间。表空间为逻辑概念，数据文件为物理概念。</p><p>段存在于表空间中，段是区的集合；区是数据块的集合，数据块被映射到磁盘块</p><p>oracle命令练习</p><pre class=" language-oracle"><code class="language-oracle">----使用用户名为scott密码为tiger登录oracle数据库sqlplus scoitt/tiger----查看当前用户show user----查看表select * from tab;----降序排列表desc 表名----显示行大小show linesize----设置行大小set linesize----设置列宽col 列名 for a8(表示字符长度为8)----显示行大小col 列名 for 9999(表示设置数字为4位)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService学习</title>
      <link href="/2020/04/13/webservice-xue-xi/"/>
      <url>/2020/04/13/webservice-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="WebService学习"><a href="#WebService学习" class="headerlink" title="WebService学习"></a>WebService学习</h4><p><strong>注：</strong>(不会maven的可以先去学习maven配置和简单的命令)</p><h5 id="Webservice介绍"><a href="#Webservice介绍" class="headerlink" title="Webservice介绍"></a>Webservice介绍</h5><h5 id="apacheCXF"><a href="#apacheCXF" class="headerlink" title="apacheCXF"></a>apacheCXF</h5><h5 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h5><p>1.pox文件引用：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--项目依赖--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jaxws规范包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-frontend-jaxws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0shiyong.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jetty包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.cxf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cxf-rt-transports-http-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--插件的添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>2.编写服务器端(使用@WebService注解进行标注其是一个服务)</p><p>编写简单的服务接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * 使用注解@WebService    * 对外发布服务接口    * */</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口的实现类编写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">",Welcome to xingxinghome!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.在测试模块下测试服务端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.访问设置的地址显示如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultcode</span><span class="token punctuation">></span></span>soap:Server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultcode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>faultstring</span><span class="token punctuation">></span></span>No binding operation info while invoking unknown method with params unknown.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>faultstring</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Fault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span></code></pre><p>在其访问地址加上?wsdl就会显示出wsdl展示</p><blockquote><p><a href="http://localhost:8000/ws/hello?wsdl" target="_blank" rel="noopener">http://localhost:8000/ws/hello?wsdl</a></p></blockquote><p>显示结果如下：</p><p><img src="/medias/images/image-20200325092919279.png" alt="image-20200325092919279"></p><p>3.客户端的编写</p><p>客户端需要知道服务端是什么样子的接口，在客户端够构建与服务端一样的接口，不需要实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试连接服务端：(测试时，服务端需要启动)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//服务接口访问的地址</span>        <span class="token comment" spellcheck="true">//创建cxf代理工厂</span>        JaxWsProxyFactoryBean factory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">JaxWsProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置远程服务器端的地址</span>        factory<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置接口类型</span>        factory<span class="token punctuation">.</span><span class="token function">setServiceClass</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对接口生成代理对象$Proxy34jdk代理，$CGLIB123使用cglib代理</span>        HelloService helloService <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程访问服务端方法</span>        String content <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"jet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.控制台使用日志拦截器来进行soap请求的拦截</p><p>在发布服务的时候添加代码：首先在main路径下的resource文件夹中添加log4j的配置文件</p><pre class=" language-text"><code class="language-text"># Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLElog4j.rootCategory=INFO, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.Threshold=INFOlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout#log4j.appender.CONSOLE.layout.ConversionPattern=- %m%nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601}%-6r[%15.15t]&-5p %30.30c %x - %m\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppenderlog4j.appender.LOGFILE.File=axis.loglog4j.appender.LOGFILE.Append=truelog4j.appender.LOGFILE.Threshold=INFOlog4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发布服务工厂</span>        JaxWsServerFactoryBean factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JaxWsServerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/ws/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务类</span>        factor<span class="token punctuation">.</span><span class="token function">setServiceBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加日志输入，输出连接器，观察soap请求，soap响应内容</span>        factor<span class="token punctuation">.</span><span class="token function">getInInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">.</span><span class="token function">getOutInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingOutInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布服务</span>        factor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功：8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>控制台有信息：其中有服务的名称，服务的参数，soap封装格式</p><blockquote><p>Payload: &lt;soap:Envelope xmlns:soap=”<a href="http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;" target="_blank" rel="noopener">http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</a><a href="soap:Body">soap:Body</a>&lt;ns2:sayHello xmlns:ns2=”<a href="http://service.itxing.com/&quot;&gt;" target="_blank" rel="noopener">http://service.itxing.com/&quot;&gt;</a><arg0>jet</arg0></ns2:sayHello></soap:Body></soap:Envelope></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java源码</title>
      <link href="/2020/04/13/java-yuan-ma-bi-ji/"/>
      <url>/2020/04/13/java-yuan-ma-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>java源码笔记</p><h5 id="注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的"><a href="#注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的" class="headerlink" title="注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的"></a>注：源码学习是一个长久的过程，目前有的程序还模糊，相信自己以后会明白的</h5><p>1.ArrayList</p><blockquote><p>ArrayList是由长度可变的数组组成的，允许null值，与Vector相类似，<strong>该类的方法不同步</strong><br> size、empty、get、set、iterator等为常数时间，add方法是一个O(n)的时间复杂度<br> 与linkedList相比较常数因子比较低，有一个初始的容量，列表元素至少和数组一样，<br> 可自动扩容grow()</p></blockquote><p>2.继承与实现关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始大小10，用户可以手动指定</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//底层使用Object数组实现</span>    <span class="token comment" spellcheck="true">//底层的扩容函数，扩容为原来的1.5倍</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新数组的长度=旧数组的长度+旧数组长度右移一位（相当于除以2）</span>        <span class="token comment" spellcheck="true">//新数组长度是旧数组的1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM虚拟机学习</title>
      <link href="/2020/04/10/jvm-xu-ni-ji-xue-xi/"/>
      <url>/2020/04/10/jvm-xu-ni-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>关于该学习笔记参考网上的jvm课程以及一些文章的讲解</p><p><strong>JVM结构：</strong></p><p><img src="/medias/images/jvm.png" alt="JVM运行时数据区"></p><p>局部变量表存放了编译期可知的基本数据类型、对象引用和returnAddress类型，其所需的内存空间在编译期间完成分配，方法运行期间不会改变局部变量表的大小。</p><p>除了程序计数器之外，内存区域可能都会产生OutOfMemoryError异常，还可能抛出该异常的有直接内存，例如N I/O是一种基于通道和缓冲区的I/O方式，可以使用Native区域直接分配堆外内存。</p><p><strong>对象的创建：</strong></p><p>当遇到new对象时，虚拟机首先检查该指令的参数是否能够在常量池中定位到一个类的符号引用，并检查类的符号引用的类是否被加载、解析和初始化。</p><p>检查后为新生的对象分配大小固定的堆空间，分配的方式有“指针碰撞”和“空闲列表”，依据垃圾回收器是否带有压缩整理功能决定。例如：Serial和ParNew采用指针碰撞；CMS使用Mark-Sweep算法的收集器采用空闲列表。</p><p>频繁的对象创建导致内存空间分配出错，虚拟机采用两种解决方法，第一种是CAS失败重试的方式保证更新操作的原子性；另一种是把内存分存，又称本地线程分配缓冲(Thread Local Allocation Buffer,TLAB)为每个线程分配内存，此时的对象是一个半初始化的值，随后调用<init>方法，产生真正可用的对象</p><p><strong>对象的布局：</strong></p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%83%E5%B1%80.png" alt="对象的布局信息"></p><p><strong>Mark Word</strong>用于存储对象自身的运行时数据，有<strong>哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳。</strong></p><p>对象访问定位：</p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D.png" alt="对象使用句柄访问"></p><p><img src="/medias/images/%E5%AF%B9%E8%B1%A1%E5%AE%9A%E4%BD%8D2.png" alt="对象直接指针访问"></p><p>两种访问方式的特点</p><table><thead><tr><th align="left">使用句柄访问</th><th>使用直接指针访问</th></tr></thead><tbody><tr><td align="left">好处是reference中存储的是稳定的句柄地址，在对象移动时只改变句柄中实力数据指针，reference本身无需修改，垃圾收集器对象移动较多。</td><td>速度更快，节省了一次定位的时间开销，对象的访问在java中十分的频繁，Sun Hotspot使用该方式实现</td></tr></tbody></table><p><strong>JMM java的内存模型：</strong></p><p><img src="/medias/images/jmm.png" alt="JMM内存模型"></p><p>1、  Java的并发采用“共享内存”模型，线程之间通过读写内存的公共状态进行通讯。多个线程之间是不能通过直接传递数据交互的，它们之间交互只能通过共享变量实现。</p><p>2、 主要目的是定义程序中各个变量的访问规则。</p><p>3、 Java内存模型规定所有变量都存储在主内存中，每个线程还有自己的工作内存。</p><p>（1）  线程的工作内存中保存了被该线程使用到的变量的拷贝（从主内存中拷贝过来），线程对变量的所有操作都必须在工作内存中执行，而不能直接访问主内存中的变量。</p><p>（2） 不同线程之间无法直接访问对方工作内存的变量，线程间变量值的传递都要通过主内存来完成。</p><p>（3）主内存主要对应Java堆中实例数据部分。工作内存对应于虚拟机栈中部分区域。</p><p>4、Java线程之间的通信由内存模型JMM（Java Memory  Model）控制。</p><p>（1）JMM决定一个线程对变量的写入何时对另一个线程可见。</p><p>（2）线程之间共享变量存储在主内存中 </p><p>（3）每个线程有一个私有的本地内存，里面存储了读/写共享变量的副本。</p><p>（4）JMM通过控制每个线程的本地内存之间的交互，来为程序员提供内存可见性保证。</p><p>5、可见性、有序性(volatile)：</p><p>（1）当一个共享变量在多个本地内存中有副本时，如果一个本地内存修改了该变量的副本，其他变量应该能够看到修改后的值，此为可见性。</p><p>（2）保证线程的有序执行，这个为有序性。（保证线程安全） </p><p>6、内存间交互操作：</p><p>（1）lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</p><p>（2）unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p><p>（3）read（读取）：作用于主内存变量，把主内存的一个变量读取到工作内存中。</p><p>（4）load（载入）：作用于工作内存，把read操作读取到工作内存的变量载入到工作内存的变量副本中 </p><p>（5）use（使用）：作用于工作内存的变量，把工作内存中的变量值传递给一个执行引擎。（6）assign（赋值）：作用于工作内存的变量。把执行引擎接收到的值赋值给工作内存的变量。</p><p>（7）store（存储）：把工作内存的变量的值传递给主内存 </p><p>（8）write（写入）：把store操作的值入到主内存的变量中 </p><p>6.1、注意：（1）不允许read、load、store、write操作之一单独出现</p><p> （2）不允许一个线程丢弃assgin操作 </p><p>（3）不允许一个线程不经过assgin操作，就把工作内存中的值同步到主内存中 </p><p>（4）一个新的变量只能在主内存中生成 </p><p>（5）一个变量同一时刻只允许一条线程对其进行lock操作。但lock操作可以被同一条线程执行多次，只有执行相同次数的unlock操作，变量才会解锁 </p><p>（6）如果对一个变量进行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或者assgin操作初始化变量的值。</p><p>（7）如果一个变量没有被锁定，不允许对其执行unlock操作，也不允许unlock一个被其他线程锁定的变量 </p><p>（8）对一个变量执行unlock操作之前，需要将该变量同步回主内存中</p><p><strong>堆的内存划分：</strong></p><p><img src="/medias/images/heap.png" alt="java堆的内存结构"></p><p>Java堆的内存划分分别为年轻代、Old  Memory（老年代）、Perm（永久代）。其中在Jdk1.8中，永久代被移除，使用MetaSpace代替。</p><p>1、新生代：（1）使用复制清除算法（Copinng算法），原因是年轻代每次GC都要回收大部分对象。新生代里面分成一份较大的Eden空间和两份较小的Survivor空间。每次只使用Eden和其中一块Survivor空间，然后垃圾回收的时候，把存活对象放到未使用的Survivor（划分出from、to）空间中，清空Eden和刚才使用过的Survivor空间。（2）分为Eden、Survivor From、Survivor To，比例默认为8：1：1 （3）内存不足时发生Minor GC </p><p>2、老年代：（1）采用标记-整理算法（mark-compact），原因是老年代每次GC只会回收少部分对象。</p><p>3、Perm：用来存储类的元数据，也就是方法区。（1）Perm的废除：在jdk1.8中，Perm被替换成MetaSpace，<strong>MetaSpace存放在本地内存中</strong>。原因是永久代进场内存不够用，或者发生内存泄漏。（2）MetaSpace（元空间）：元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。</p><p>垃圾回收之前首先判断该对象能否被回收</p><p><strong>判断对象是否要回收的方法：可达性分析法</strong> </p><p>1、 可达性分析法：通过一系列“GC Roots”对象作为起点进行搜索，如果在“GC  Roots”和一个对象之间没有可达路径，则称该对象是不可达的。不可达对象不一定会成为可回收对象。进入DEAD状态的线程还可以恢复，GC不会回收它的内存。（把一些对象当做root对象，JVM认为root对象是不可回收的，并且root对象引用的对象也是不可回收的）</p><p> 2、 以下对象会被认为是<strong>root对象</strong>：</p><blockquote><p>JVM stack;native method stack;run-time constant pool;</p><p>static references in methodarea;Clazz</p></blockquote><p>（1） 虚拟机栈（栈帧中本地变量表）中引用的对象 （2） 方法区中静态属性引用的对象 （3） 方法区中常量引用的对象 （4） 本地方法栈中Native方法引用的对象 </p><p>对象的存活都与引用相关，java中的引用分为强引用、弱引用、软引用、虚引用。</p><p>强引用是程序代码中普遍的存在，只要强引用还在该对象不会被回收。</p><p>软引用是描述一些还有用但并非必需的对象在系统内存溢出前将会将这些对象列入垃圾回收的范围，SoftReference类实现软引用。（常用做缓存）</p><p>弱引用也用来描述非必需对象，被弱引用关联的对象只能生存到下一次垃圾收集发生之前（放置内存泄露）</p><p>虚引用最弱的引用不能够获取对象实例，该引用关联的对象被回收时收到一个系统的通知（管理堆外内存）</p><p>3、 对象被判定可被回收，需要经历两个阶段：（1） 第一个阶段是可达性分析，分析该对象是否可达 （2）  第二个阶段是当<strong>对象没有重写finalize()方法</strong>或者<strong>finalize()方法已经被调用过</strong>，虚拟机认为该对象不可以被救活，因此回收该对象。（finalize()方法在垃圾回收中的作用是，给该对象一次救活的机会） </p><p>4、 方法区中的垃圾回收：（1） 常量池中一些常量、符号引用没有被引用，则会被清理出常量池 （2） 无用的类：被判定为无用的类，会被清理出方法区。判定方法如下：A、 该类的所有实例被回收 B、 加载该类的ClassLoader被回收 C、 该类的Class对象没有被引用 (无法通过反射访问该类反射)</p><p>5、 finalize(): （1） GC垃圾回收要回收一个对象的时候，调用该对象的finalize()方法。然后在下一次垃圾回收的时候，才去回收这个对象的内存。（2）  可以在该方法里面，指定一些对象在释放前必须执行的操作。</p><p>常见的垃圾回收算法：</p><p><strong>1、Mark-Sweep（标记-清除算法）：</strong>（1）思想：标记清除算法分为两个阶段，标记阶段和清除阶段。标记阶段任务是标记出所有需要回收的对象，清除阶段就是清除被标记对象的空间。（2）优缺点：实现简单，容易产生内存碎片 </p><p><strong>2、Copying（复制清除算法）：</strong>（1）思想：将可用内存划分为大小相等的两块，每次只使用其中的一块。当进行垃圾回收的时候了，把其中存活对象全部复制到另外一块中，然后把已使用的内存空间一次清空掉。（2）优缺点：不容易产生内存碎片；可用内存空间少；存活对象多的话，效率低下。</p><p><strong>3、Mark-Compact（标记-整理算法）：</strong>（1）思想：先标记存活对象，然后把存活对象向一边移动，然后清理掉端边界以外的内存。（2）优缺点：不容易产生内存碎片；内存利用率高；存活对象多并且分散的时候，移动次数多，效率低下</p><p><strong>4.分代垃圾回收算法：</strong></p><p>因为新生代每次垃圾回收都要回收大部分对象，所以新生代采用Copying算法。（1）新生代里面分成一份较大的Eden空间和两份较小的Survivor空间。每次只使用Eden和其中一块Survivor空间，然后垃圾回收的时候，把存活对象放到未使用的Survivor（划分出from、to）空间中，清空Eden和刚才使用过的Survivor空间。（2） 由于老年代每次只回收少量的对象，因此采用mark-compact算法。（3） 在堆区外有一个永久代。对永久代的回收主要是无效的类和常量 GC使用时对程序的影响？垃圾回收会影响程序的性能，Java虚拟机必须要追踪运行程序中的有用对象，然后释放没用对象，这个过程消耗处理器时间。</p><p>几种不同的垃圾回收类型：</p><p>（1）Minor GC：从年轻代（包括Eden、Survivor区）回收内存。</p><p>（2）Major GC：清理整个老年代，当eden区内存不足时触发。</p><p>（3）Full GC：清理整个堆空间，包括年轻代和老年代。当老年代内存不足时触发</p><p>常用的垃圾收集器</p><p><strong>GC垃圾回收：</strong></p><p><img src="/medias/images/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="垃圾收集器"></p><p>内存分配和回收策略</p><p><strong>内存管理</strong>在于给<strong>对象分配内存</strong>和<strong>回收分配给对象的内存</strong></p><p>对象优先分配在Eden区域，大的对象直接进入老年代，例如数组对象；</p><p>长期存活的对象进入老年代，虚拟机给每个对象定义了一个对象年龄计数器（默认大于15岁进入老年代）。动态对象年龄判定，survivor区中相同年龄的所有的对象大于survivor区域的一半，比该年龄大的对象进入老年代；</p><p>空间分配担保MinorGC发生之前，需要确保老年代的最大可用连续空间是否大于新生代对象总空间，大于时直接Minor    GC；不大于的时候需要查看HandlePromotionFailure担保值，可担保时进行Minor GC否则进行Full GC。</p><p>简单的测试题（j++和++j）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输出的结果为10</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的结果为0</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           j <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字节码指令的比较</p><pre class=" language-text"><code class="language-text"> j++字节码(在if内部的指令是先进栈，再改变局部变量表中j的值，栈中的元素值不会受到影响，依旧是0) 0 iconst_0  将int类型数据0入栈 1 istore_1  将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始） 2 iconst_0  将int类型数据0入栈 3 istore_2  将栈顶int类型数值存入第三个局部变量表 4 iload_2    第三个局部变量进栈 5 bipush 10   将一个byte类型的常量值推送至栈顶 7 if_icmpge 21 (+14)  比较栈顶两int型数值大小，当结果大于等于0时跳转到21位置10 iload_1     第二个局部变量进栈11 iinc 1 by 1   指定int型变量增加指定值,局部变量的增加不会改变栈中元素的值，最后会被覆盖14 istore_1    将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始）15 iinc 2 by 1  指定int型变量增加指定值18 goto 4 (-14)  无条件跳转21 getstatic #2 <java/lang/System.out>24 iload_125 invokevirtual #3 <java/io/PrintStream.println>28 return++j字节码(在if内部的指令是先改变局部变量表中j的值，再将局部变量表中的值入栈，栈中元素的值会随着局部变量表的值更改，栈中的元素值不会受到影响，依旧是0)0 iconst_0 将int类型数据0入栈 1 istore_1  将栈顶int类型数值存入第二个局部变量表（istore_1表示第二个，从0开始） 2 iconst_0  将int类型数据0入栈 3 istore_2  将栈顶int类型数值存入第三个局部变量表 4 iload_2    第三个局部变量进栈 5 bipush 10   将一个byte类型的常量值推送至栈顶 7 if_icmpge 21 (+14)   比较栈顶两int型数值大小，当结果大于等于0时跳转到21位置10 iinc 1 by 1    指定int型变量增加指定值，先增加变量表中的值13 iload_1       第二个局部变量进栈14 istore_1    将栈顶int类型数值存入第二个局部变量表15 iinc 2 by 1   指定int型变量增加指定值18 goto 4 (-14)   无条件跳转21 getstatic #2 <java/lang/System.out>24 iload_125 invokevirtual #3 <java/io/PrintStream.println>28 return</code></pre><p>Class文件结构：</p><p>class文件是以8字节为基础单位的二进制流紧凑的排列在一起，中间无分割符，高于8位字节的数据项以Big-Endian(高位字节地址在最低位、最低位字节地址在最高位)存储。Class文件中只有两种伪数据结构：无符号数(u1、u2、u4、u8)和表(_info)。</p><p><img src="/medias/images/class%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B.png" alt="类的文件结构"></p><p><strong>魔数：</strong>class文件中的头4个字节为魔数，0xCAFEBABE</p><p><strong>主次版本号：</strong>第5，6字节存储的是class文件的版本号，第7,8字节存储的是主版本号。</p><p><strong>常量池：</strong>首先放置u2类型的常量池容量计数值，从1开始计数。常量池最要存放的是字面量(文本字符串，final常量等)和符号引用(类和接口的权限定名、字段的名称和描述符、方法的名称和描述符)</p><p><strong>访问标志：</strong>标识当前的类是Class还是接口；是否定义为Public；是否为abstract类型；如果是类的话，是否声明为final。</p><p><strong>类索引、父类索引、接口索引集合：</strong>由于java是单继承多实现，需要由标识，类索引与父类索引为u2的类型，接口是一组u2类型的数据集合，根据这三个数据项确定类的继承关系。</p><p><strong>字段表集合：</strong>用于描述接口或者类中声明的变量，字段作用域(public;private;protect)、实例变量或类变量(static)、可变性(final)、并发可见性(valitatle)、是否被序列化(transient)、字段数据类型(基本类型、对象、数组)、字段名称.</p><p><strong>方法表集合：</strong>对方法的描述，访问标志(access_flags)、名称索引(nane_index)、描述符索引(descriptor_index)、属性表集合(attributes)。</p><p><strong>属性表集合：</strong>class文件、字段表、方法表都可以携带自己的属性表集合，用于描述某些专有的信息。</p><p><strong>字节码指令：</strong></p><p>字节码的指令类型(后面学习时再完善字节码指令部分)</p><p>加载和存储指令、运算指令、类型转换指令、对象创建与访问指令、操作数栈管理指令、控制转移指令、方法调用和返回指令、异常处理指令、同步指令、公有设计和私有实现</p><p><strong>类加载机制：</strong></p><p>类的生命周期：加载、验证、准备、解析、初始化、使用和卸载，验证、准备、解析三个部分统称为连接（Linking）</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java操作excel</title>
      <link href="/2020/04/07/java-cao-zuo-excel/"/>
      <url>/2020/04/07/java-cao-zuo-excel/</url>
      
        <content type="html"><![CDATA[<p>java操作excel</p><h4 id="使用apache提供的工具POI操作Excel"><a href="#使用apache提供的工具POI操作Excel" class="headerlink" title="使用apache提供的工具POI操作Excel"></a>使用apache提供的工具POI操作Excel</h4><p><strong>1.Maven的依赖</strong></p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml-schemas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>也可以在网上下载其jar包(个人使用3.9)</p><p>下载的有三个包：poi、poi-ooxml、poi-ooxml-schemas，三个包下载的版本必须一致</p><p>POI基本功能介绍:</p><blockquote><p>HSSF:操作excel，03版本</p><p>XSSF:操作excel07版本</p><p>HWPF:操作word格式的文档</p><p>HSLF:操作ppt文档</p><p>HDGF:操作visio文档</p></blockquote><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoi39jar.htm" target="_blank" rel="noopener">poi的jar包</a></p><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoiooxml39jar.htm" target="_blank" rel="noopener">poi-ooxml的jar包</a></p><p><a href="http://www.java2s.com/Code/Jar/p/Downloadpoiooxmlschemas39jar.htm" target="_blank" rel="noopener">poi-ooxml-schemas的jar包</a></p><p><strong>简单使用1</strong>,创建一个工作簿：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建一个工作簿</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个io流，通过io流将数据写入磁盘</span>            FileOutputStream fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的工作簿.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关流</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>简单使用2</strong>,创建一个sheet：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义新的工作簿</span>        wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第一个sheet页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义第一个sheet</span>        wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第二个sheet页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义第二个sheet</span>        FileOutputStream fileout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的sheet.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>简单使用3</strong>,创建cell,根据行创建多个列并写入数据：</p><pre class=" language-java"><code class="language-java">Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义新的工作簿</span>        Sheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"第一个sheet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建行</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个列，根据行创建列</span>        Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第二列</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"字符串类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第三列</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第四列</span>        <span class="token comment" spellcheck="true">//使用流将创建的数据写到磁盘上</span>        FileOutputStream fileout <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的cell.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><strong>简单使用4</strong>，某一列数据使用日期类型，对其进行格式化输出：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个新的工作簿</span>        Workbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建第一个sheet页</span>        Sheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个行</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个单元格</span>        Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给第一列元素赋值</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给单元格设定值</span>        <span class="token comment" spellcheck="true">//row.createCell(1).setCellValue(new Date());</span>        <span class="token comment" spellcheck="true">//创建helper元素</span>        CreationHelper chelp <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getCreationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置单元格样式</span>        CellStyle cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span>chelp<span class="token punctuation">.</span><span class="token function">createDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将单元格设置为自己设置的样式</span>        cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建第三列并设置样式，使用Calendar类进行设置样式</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java生成的style.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>简单使用5</strong>，读取excel文件内容：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件输入流</span>        FileInputStream filein <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java读取的文件.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用POIFSFileSystem类，传入数据流进行读取</span>        POIFSFileSystem fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POIFSFileSystem</span><span class="token punctuation">(</span>filein<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用poifs读取一个工作簿</span>        HSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>        HSSFSheet hsheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hsheet<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历工作簿中的行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>rowNum<span class="token operator">&lt;=</span>hsheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HSSFRow hsrow <span class="token operator">=</span> hsheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hsrow <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//遍历一行中的列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cellRow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cellRow<span class="token operator">&lt;</span>hsrow<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cellRow<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HSSFCell hscell <span class="token operator">=</span> hsrow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hscell <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                String ss <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>hscell<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ss<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将列中的不同的元素转换成String类型进行输出</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getValue</span><span class="token punctuation">(</span>HSSFCell hscell <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将布尔类型转换成字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_BOOLEAN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将数字类型转换成字符串</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hscell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用工具类进行数据抽取(功能与上边读取一致)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream filein <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\file\\java读取的文件.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用POIFSFileSystem类，传入数据流进行读取</span>        POIFSFileSystem fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POIFSFileSystem</span><span class="token punctuation">(</span>filein<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用poifs读取一个工作簿</span>        HSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelExtractor excel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelExtractor</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span>        excel<span class="token punctuation">.</span><span class="token function">setIncludeSheetNames</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>excel<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="大批量的导入"><a href="#大批量的导入" class="headerlink" title="大批量的导入"></a>大批量的导入</h5><p>大文件写HSSF：(03版本)</p><blockquote><p>缺点：最多只能处理65536，多出会出现异常</p><p>优点：过程写入缓存，不操作磁盘，最后一次性写入，速度快</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//批量操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite003</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//时间</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个工作簿</span>        HSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个表</span>        HSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入数据</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cellnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cellnum<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>cellnum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//写入数据后，使用IO流将数据写入磁盘</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"three.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> ll <span class="token operator">=</span> end <span class="token operator">-</span> begin<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>大文件写XSSF：</p><blockquote><p>缺点：写数据时，全部放入内存，会产生OOM，如100万条数据</p><p>优点：可以写较大数据量，如：20万</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite007</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//时间</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个工作簿</span>        XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个表</span>        XSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入数据</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cellnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cellnum<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>cellnum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//写入数据后，使用IO流将数据写入磁盘</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"four.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> ll <span class="token operator">=</span> end <span class="token operator">-</span> begin<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>针对以上的大量数据导入的XSSF写入时比较慢，因此可以使用SXSSF</p><blockquote><p>SXSSF优点：可以写入非常大量的数据，多余100万，写数据速度快，占用内存少，会产生一个临时文件。先将部分数据放入临时文件，超过一定数据量时，将临时文件中的数据写入磁盘。</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite007sxssf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//时间</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//多态，父类引用指向子类对象</span>        Workbook work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SXSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sheet sheet <span class="token operator">=</span> work<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"大批量的导入07版sheet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入数据</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cellnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cellnum<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>cellnum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellnum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"five.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        work<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清理临时文件</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>SXSSFWorkbook<span class="token punctuation">)</span>work<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> ll <span class="token operator">=</span> end <span class="token operator">-</span> begin<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadCacle03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件输入流</span>        FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"first.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个工作簿</span>        Workbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个sheet</span>        Sheet sheetAt <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取行</span>        Row row <span class="token operator">=</span> sheetAt<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿到计算公式</span>        FormulaEvaluator formulaEvaluator  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFFormulaEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HSSFWorkbook<span class="token punctuation">)</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cellType <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cellType<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> Cell<span class="token punctuation">.</span>CELL_TYPE_FORMULA<span class="token operator">:</span>                String formula <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用公式进行计算</span>                CellValue evaluate <span class="token operator">=</span> formulaEvaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>                String s <span class="token operator">=</span> evaluate<span class="token punctuation">.</span><span class="token function">formatAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="阿里的easyExcel"><a href="#阿里的easyExcel" class="headerlink" title="阿里的easyExcel"></a>阿里的easyExcel</h4><p>poi会消耗大的内存，使用easyExcel工具操作excel,首先导入依赖文件</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--导入依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--导入日期格式化工具--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--阿里巴巴的easyexcel--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0-beta2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--导入单元测试--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>阿里excel操作文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">阿里excel文档</a></p><p>步骤1：创建一个和表相同列与属性的model实体</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/6/2-mavenStudy */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"字符串标题"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"日期标题"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"数字标题"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Double doubleData<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> String ignore<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>步骤2：读取文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/6/2-mavenStudy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEasy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存放文件的位置</span>   String path <span class="token operator">=</span> <span class="token string">"E:\\file\\"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个存放model的集合</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       List list  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           ExcelModel excelModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           excelModel<span class="token punctuation">.</span><span class="token function">setStr</span><span class="token punctuation">(</span><span class="token string">"星仔"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           excelModel<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           excelModel<span class="token punctuation">.</span><span class="token function">setDoubleData</span><span class="token punctuation">(</span><span class="token number">0.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>excelModel<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> list<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//根据list写入excel</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//文件名(文件位置+文件名称)</span>        String fileName <span class="token operator">=</span> path<span class="token operator">+</span><span class="token string">"easyTets.xlsx"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//指定使用哪个类进行写操作，名字模板，文件流用完会自动关闭</span>        <span class="token comment" spellcheck="true">//write（参数1是文件名称，参数2格式类）</span>        <span class="token comment" spellcheck="true">//sheet（参数是sheet的名字）</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span>ExcelModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"阿里sheet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写excel步骤：(今本都是官方文档的代码，只需要修改自己的路径地址即可，根据工作需要进行学习)</p><p>还是之前的文档对象</p><p>创建一个DAO类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/6/2-mavenStudy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDAO</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建监听器：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author xing * @create 2020/6/2-mavenStudy */</span><span class="token comment" spellcheck="true">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDataListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DemoDataListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BATCH_COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ExcelModel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。     */</span>    <span class="token keyword">private</span> DemoDAO demoDAO<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span>        demoDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来     *     * @param demoDAO     */</span>    <span class="token keyword">public</span> <span class="token function">DemoDataListener</span><span class="token punctuation">(</span>DemoDAO demoDAO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>demoDAO <span class="token operator">=</span> demoDAO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 这个每一条数据解析都会来调用     *     * @param data     *            one row value. Is is same as {@link AnalysisContext#readRowHolder()}     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>ExcelModel data<span class="token punctuation">,</span> AnalysisContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解析到一条数据:{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//再次将自己的数据输出到控制台</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> BATCH_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 存储完成清理 list</span>            list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 所有数据解析完成了 都会来调用     *     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span>        <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"所有数据解析完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数据解析完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加上存储数据库     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}条数据，开始存储数据库！"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"存储数据库成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注：前半部分是自己从博客中进行学习的，后半部分是在b站听狂神的课做的笔记和记录。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千人千面推荐系统</title>
      <link href="/2020/04/01/qian-ren-qian-mian-tui-jian-xi-tong/"/>
      <url>/2020/04/01/qian-ren-qian-mian-tui-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>业务需求BRD(Bussiness Requirement Document)</p><p>用户故事(User Story)</p><p>产品PRD(Product Requirement Document)</p></blockquote><h4 id="业务需求BRD"><a href="#业务需求BRD" class="headerlink" title="业务需求BRD"></a>业务需求BRD</h4><blockquote><p><strong>业务目的：</strong>仿大众点评系统，做一个H5的应用</p><p><strong>业务场景：</strong>具备搜索线下门店服务功能、具备推荐线上门店服务功能，类似于猜你喜欢</p><p><strong>使用的人员：</strong></p><p>1.业务的运营人员</p><p>2.需要获得服务的c端用户</p></blockquote><h4 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h4><blockquote><p>打开页面可以查看服务分类</p><p>打开页面可以查看推荐门店列表</p><p>通过搜索栏，搜索关键字对应的门店列表并筛选或排序</p></blockquote><h4 id="产品PRD"><a href="#产品PRD" class="headerlink" title="产品PRD"></a>产品PRD</h4><blockquote><p>用户注册，登录，进入应用首页的流程</p><p>运营维护服务分类，商家入驻，门店管理等运营后台的功能</p><p>用户通过搜索关键字，筛选条件，找到自己想要的门店服务的过程</p><p>用户打开首页后，系统根据用户的历史行为做推荐门店服务的过程</p></blockquote><h4 id="点评搜索推荐prd"><a href="#点评搜索推荐prd" class="headerlink" title="点评搜索推荐prd"></a>点评搜索推荐prd</h4><blockquote><p>名词定义</p><p>用户：使用该系统搜索产品的人员</p><p>运营后台：提供后台门店、商家、服务类目管理的后台网页</p><p>运营：使用运行后台配置门店，商店，服务类目的人员</p></blockquote><h4 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h4><blockquote><p>1.运营登录功能：输入用户名、密码登录后台系统</p><p>2.运营商家管理功能，商家创建(商家名、商家评分)、商家列表查询(商户id、商户名、商户评分、商户启用禁用)</p><p>3.服务类目管理功能：类目创建(名称、图标、排序)，类目列表查询(类目id、名称、图标、排序)</p><p>4.门店管理功能：门店创建(名字、人均价格、评分、地址、标签、营业时间)、门店列表查询(门店id、名字、人均价格、评分、地址、标签、营业时间)</p><p>h5 C端功能：用户注册、用户登录</p></blockquote><h3 id="技术分解"><a href="#技术分解" class="headerlink" title="技术分解"></a>技术分解</h3><blockquote><p>后端业务模块</p><p>搜索系统</p><p>后端存储系统</p><p>推荐系统</p><p>前端页面设计</p></blockquote><h4 id="模块设计："><a href="#模块设计：" class="headerlink" title="模块设计："></a>模块设计：</h4><blockquote><p>业务模块架构设计、系统模块架构设计</p></blockquote><h4 id="业务实体："><a href="#业务实体：" class="headerlink" title="业务实体："></a>业务实体：</h4><blockquote><p>用户管理、商家管理、服务类型管理、门店管理</p></blockquote><p>业务实体的行为：</p><blockquote><p>用户注册、用户登录</p><p>商家创建、商家浏览</p><p>服务类型创建、服务类型查询浏览</p><p>门店创建，门店搜索及筛选，门店推荐</p></blockquote><h4 id="ER模型图"><a href="#ER模型图" class="headerlink" title="ER模型图"></a>ER模型图</h4><p><img src="../../../blogimages/springcloud0515/ermodel20040101.png" alt="image-20200915100306788"></p><h4 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h4><p><img src="../../../blogimages/springcloud0515/system20040102.png" alt="image-20200915102404153"></p><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><blockquote><p>后端业务：Java(jdk1.8)，SpringBoot框架</p><p>后端存储：mysql数据库(5.6)，mybatis接入</p><p>搜索系统：elasticsearch分布式搜索引擎，canal</p><p>推荐系统：spark mllib机器学习组件</p></blockquote><p>自己的开发环境</p><blockquote><p>jdk1.8、maven3以上、intelliJ Idea</p></blockquote><h3 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h3><blockquote><p> SpringBoot搭建JavaWeb、Mybatis做数据接入、业务系统搭建</p></blockquote><p>项目中依赖的工具包</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入mysql连接工具、引入阿里的德鲁伊连接池、因为mybatis启动包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="Mybatis数据接入"><a href="#Mybatis数据接入" class="headerlink" title="Mybatis数据接入"></a>Mybatis数据接入</h4><h4 id="mybatis-generator代码自动生成"><a href="#mybatis-generator代码自动生成" class="headerlink" title="mybatis-generator代码自动生成"></a>mybatis-generator代码自动生成</h4><h4 id="全局的异常处理"><a href="#全局的异常处理" class="headerlink" title="全局的异常处理"></a>全局的异常处理</h4><h3 id="业务逻辑搭建"><a href="#业务逻辑搭建" class="headerlink" title="业务逻辑搭建"></a>业务逻辑搭建</h3><h4 id="用户服务搭建"><a href="#用户服务搭建" class="headerlink" title="用户服务搭建"></a>用户服务搭建</h4><blockquote><p>用户模型、用户行为(用户登录)</p></blockquote><h4 id="运营后台搭建"><a href="#运营后台搭建" class="headerlink" title="运营后台搭建"></a>运营后台搭建</h4><h5 id="运营后台的模板"><a href="#运营后台的模板" class="headerlink" title="运营后台的模板"></a>运营后台的模板</h5><blockquote><p>metronic模板</p></blockquote><h5 id="运营后台登录授权"><a href="#运营后台登录授权" class="headerlink" title="运营后台登录授权"></a>运营后台登录授权</h5><h5 id="切面权限管理"><a href="#切面权限管理" class="headerlink" title="切面权限管理"></a>切面权限管理</h5><h4 id="商户服务搭建"><a href="#商户服务搭建" class="headerlink" title="商户服务搭建"></a>商户服务搭建</h4><h5 id="商户入驻"><a href="#商户入驻" class="headerlink" title="商户入驻"></a>商户入驻</h5><h5 id="商户查询"><a href="#商户查询" class="headerlink" title="商户查询"></a>商户查询</h5><h5 id="商户禁用"><a href="#商户禁用" class="headerlink" title="商户禁用"></a>商户禁用</h5><h3 id="品类服务搭建"><a href="#品类服务搭建" class="headerlink" title="品类服务搭建"></a>品类服务搭建</h3><h4 id="品类创建"><a href="#品类创建" class="headerlink" title="品类创建"></a>品类创建</h4><h4 id="品类的客户端显示"><a href="#品类的客户端显示" class="headerlink" title="品类的客户端显示"></a>品类的客户端显示</h4><h3 id="门店服务"><a href="#门店服务" class="headerlink" title="门店服务"></a>门店服务</h3><h4 id="门店创建"><a href="#门店创建" class="headerlink" title="门店创建"></a>门店创建</h4><h4 id="门店地理位置"><a href="#门店地理位置" class="headerlink" title="门店地理位置"></a>门店地理位置</h4><h4 id="门店查询"><a href="#门店查询" class="headerlink" title="门店查询"></a>门店查询</h4><h4 id="门店推荐"><a href="#门店推荐" class="headerlink" title="门店推荐"></a>门店推荐</h4><h5 id="门店距离计算"><a href="#门店距离计算" class="headerlink" title="门店距离计算"></a>门店距离计算</h5><h5 id="门店搜索"><a href="#门店搜索" class="headerlink" title="门店搜索"></a>门店搜索</h5><h5 id="门店推荐架构"><a href="#门店推荐架构" class="headerlink" title="门店推荐架构"></a>门店推荐架构</h5><h3 id="ElasticSearch的基础"><a href="#ElasticSearch的基础" class="headerlink" title="ElasticSearch的基础"></a>ElasticSearch的基础</h3><h4 id="ElasticSearch基本原理及其部署"><a href="#ElasticSearch基本原理及其部署" class="headerlink" title="ElasticSearch基本原理及其部署"></a>ElasticSearch基本原理及其部署</h4><p><a href="https://itxingzai.xyz/2020/07/18/elasticsearch/" target="_blank" rel="noopener">ES之前的学习</a>  ES是一个搜索数据库，独立的网络上的一个或一组进程节点。</p><p>ES再学习，Es中的名词</p><blockquote><p>索引 = 数据库 、类型 = 表、文档 = 行数据</p></blockquote><p>关系型数据库与ES对应的关系表</p><table><thead><tr><th>Relational database</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>Database</td><td>Index</td></tr><tr><td>Table</td><td>Type</td></tr><tr><td>Row</td><td>Document</td></tr><tr><td>Column</td><td>field</td></tr><tr><td>Schema</td><td>mapping</td></tr><tr><td>Index</td><td>Everything id indexed</td></tr><tr><td>SQL</td><td>query dsl</td></tr><tr><td>Select * from table</td><td>GET url</td></tr><tr><td>update table set</td><td>PUT url</td></tr></tbody></table><p>ES构建索引：</p><blockquote><p>搜索中的数据库或表定义</p><p>关系型数据库中的数据可以被看做是一个文档document，用来构建索引处理，利用分词器对索引进行分词处理，将索引与分词器分词的结果存储在搜索引擎中。</p><p>构建文档时候的索引创建</p></blockquote><p>分词</p><blockquote><p>1.搜索是以词为单位做基本的搜索单元</p><p>2.依靠分词器构建分词</p><p>3.用分词构建倒排索引</p><p><a href="[https://www.zhihu.com/search?type=content&q=%E5%80%92%E6%8E%92%E5%BA%8F%E7%B4%A2%E5%BC%95](https://www.zhihu.com/search?type=content&q=倒排序索引)">知乎对于倒排索引讲解的较为详细</a></p></blockquote><p>TF-IDF打分</p><blockquote><p>词频TF：Token Frequence,表示document文档包含了多少个这个词，包含的词越多表名越相关</p><p>DF文档频率，包含该词的文档总数目</p><p>IDF：DF取反</p></blockquote><p>本次项目使用的是ES7.6.2</p><h4 id="ElasticSearch基础语法及其应用"><a href="#ElasticSearch基础语法及其应用" class="headerlink" title="ElasticSearch基础语法及其应用"></a>ElasticSearch基础语法及其应用</h4><p>分布式索引：ES支持分布式分片技术</p><p>分片：ES是一个分布式搜索引擎，每一个索引有一个或多个分片，索引数据被分配到各个分片上，相当于一桶水用N个杯子装。</p><p>主从：ES配置主从服务器配置能够提高集群的可靠性，ES的集群有三种状态green、yellow、red</p><blockquote><p>green：表示主服务器与从服务器都处于运行状态，如果其中的一个从服务器宕机，则转为yellow状态</p><p>yellow状态：表示有一个从服务器出现异常，查询时可能会产生错误信息，如果主服务器也宕机了，那么就会状态转变成red状态</p><p>red状态：表示主服务器出现了异常，数据的可能会产生丢失。</p></blockquote><p>路由：</p><h6 id="ES集群搭建"><a href="#ES集群搭建" class="headerlink" title="ES集群搭建"></a>ES集群搭建</h6><blockquote><p>将下载的elasticsearch7.6.2解压三个文件夹，一个作为主服务器，另外两个为从服务器，为一个一主两从分布式系统。</p></blockquote><p>索引的创建、更新、删除</p><pre class=" language-json"><code class="language-json">//新建索引或者更新操作PUT /employee/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"itxing"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">}</span>//强制指定创建，若已存在，则失败POST /employee/_create/<span class="token number">2</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xing12"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span>//指定字段修改POST /employee/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xingzai"</span><span class="token punctuation">}</span>//删除索引delete /emplyee//删除整个文档DELETE /employee/_doc/<span class="token number">2</span>//非结构化创建索引PUT /employee<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//查询索引Get /employee/_doc/<span class="token number">1</span>//查询全部文档Get /employee/_search</code></pre><p>索引的简单查询</p><pre class=" language-json"><code class="language-json">//创建结构化的索引PUT /employee<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"integer"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//添加数据POST /employee/_doc/<span class="token number">1</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"itxing"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">}</span>//不带条件查询所有的记录GET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 索引的复杂查询</p><pre class=" language-json"><code class="language-json">//分页查询GET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"from"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>//带关键字的条件查询GET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"兄长"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//带关键字、有排序的查询GET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"兄长"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"order"</span><span class="token operator">:</span><span class="token string">"desc"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>//带filterGET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"term"</span><span class="token operator">:</span><span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"兄"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//带聚合GET /employee/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"兄"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"group_by_age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ElasticSearch高级语法及其应用"><a href="#ElasticSearch高级语法及其应用" class="headerlink" title="ElasticSearch高级语法及其应用"></a>ElasticSearch高级语法及其应用</h4><p>分词过程</p><blockquote><p>对于英文的分词在于一个词有不同的时态变化，例如下面例子中的eat eating 其实都代表的是吃，但是在分词过程中将其当做两个词进行处理，英文分词器使用空格和标点符号进行拆词。</p><p>字符串建立索引的过程：字符过滤器(过滤特殊符号外加量词)—&gt; 字符处理器—–&gt;分词处理(分词转换，词干替换)</p></blockquote><pre class=" language-json"><code class="language-json">//重新创建一个索引PUT /movie/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Eating an apple a day &amp; keeps the doctor away"</span><span class="token punctuation">}</span>//查询GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"eat"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>//查看分词状态GET /movie/_analyze<span class="token punctuation">{</span>  <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Eating an apple a day &amp; keeps the doctor away"</span><span class="token punctuation">}</span>//删除索引，使用英文分词器分词DELETE /movie//适应结构化方式创建索引，设置自定义的分词器，英文分词器PUT /movie<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>      <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"english"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>analyze分析过程</p><p>相关性查询手段</p><p>Tmdb实例</p></blockquote><p>类型</p><blockquote><p>text：被分析索引的字符串类型</p><p>keyword：不能被分析只能被精确匹配的字符串类型</p><p>Date：日期类型，可以配合format一起使用</p><p>数字类型：long、integer、short、double</p><p>boolean：true、false</p><p>Object：json嵌套</p><p>ip类型</p><p>Geo_point地理位置信息</p></blockquote><h3 id="Tmdb实例"><a href="#Tmdb实例" class="headerlink" title="Tmdb实例"></a>Tmdb实例</h3><blockquote><p>TMDB(the movie DataBase)</p></blockquote><h4 id="数据获取与导入数据"><a href="#数据获取与导入数据" class="headerlink" title="数据获取与导入数据"></a>数据获取与导入数据</h4><p>掌握实际应用中的索引建立和数据导入过程</p><p><a href="https://www.kaggle.com/tmdb/tmdb-movie-metadata" target="_blank" rel="noopener">kaggle上下载tmdb数据信息</a> </p><pre class=" language-json"><code class="language-json">//删除已有的索引数据DELETE /movie//tmdb数据信息建立索引，高级搜索PUT /movie<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"english"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"tagline"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"english"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"release_date"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"date"</span><span class="token punctuation">,</span><span class="token property">"format"</span><span class="token operator">:</span>"8yyyy/MM/dd||yyyy/M/dd||yyyy/MM/d||yyyy/M/d"<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"popularity"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"double"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"overview"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"english"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"cast"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"object"</span><span class="token punctuation">,</span>        <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>          <span class="token property">"character"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"standard"</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//创建完成后导入数据</code></pre><p>将数据导入操作，性github上下载导入数据的项目，能够通过使用开源的项目将csv文件导入到ES中。<a href="https://github.com/wenjunnie/csvimportes">github项目下载地址</a></p><p>项目中需要更改的是：</p><p>1.ESConfig类中的相关ES的信息</p><p><img src="../../../blogimages/0701/es20050101.png" alt="image-20200923092425101"></p><p>2.修改自己的csv文件的地址(个人使用的绝对地址)</p><p><img src="../../../blogimages/0701/es20050102.png" alt="image-20200923092635725"></p><p>直接访问localhost:8080/es/importdata ，将数据导入到ES中。tmdb数据导入后，学习高级的查询操作</p><h4 id="掌握Query-DSL-domain-Specific-Language"><a href="#掌握Query-DSL-domain-Specific-Language" class="headerlink" title="掌握Query DSL(domain Specific Language)"></a>掌握Query DSL(domain Specific Language)</h4><p>ES中的_score表示文档与搜索字符串的关系紧密程度，计算使用的是TF/IDF，TF表示词频，是一个字符在在document字段中出现的次数；IDF为逆文档频率，代表basketball这样的一个分词在整个文档中出现的频率的倒数；TFNorm（token frequency nomalized）：词频归一化。</p><p>BM25算法：解决词频问题</p><pre class=" language-json"><code class="language-json">//查询steve内容<span class="token punctuation">,</span>match按照字段上定义的分词分析后去索引内查询GET /movie/_search<span class="token punctuation">{</span><span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"steve"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>//term查询，不进行分词的分析，直接去索引内查询GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Steve Jobs"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET /movie/_analyze<span class="token punctuation">{</span>  <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"steve zissou"</span><span class="token punctuation">}</span>//分词后的and和or的逻辑<span class="token punctuation">,</span>match使用的是or逻辑关系GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom alies"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//自己制定查询时使用and的关系，文章中对搜索字符串中的分词结果的每一个分词都需要匹配//使用minimum_should_match，设置最小匹配项，默认设置为<span class="token number">1</span>GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"query"</span><span class="token operator">:</span><span class="token string">"basketball love aliens"</span><span class="token punctuation">,</span>        <span class="token property">"operator"</span><span class="token operator">:</span><span class="token string">"or"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_should_match"</span><span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//短语查询GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"steve zissou"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//多字段查询，多字段权重相同GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//查看score计算过程GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"explain"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"steve"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>//不同字段不同的权重GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title^10"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//优化查询权重GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"explain"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title^10"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"tie_breaker"</span><span class="token operator">:</span> <span class="token number">0.3</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>## bool查询##must：都必须为<span class="token boolean">true</span>##must not 都必须为<span class="token boolean">false</span>##should 其中只有一个为<span class="token boolean">true</span>即可##为<span class="token boolean">true</span>的越多则得分越高GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"overview"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>##不同的词模式匹配方式：##不同的multi_query有不同的type##best_fields：默认的得分方式，取得最高的分数作为对应文档的对应分数，“最匹配模式” dis_maxGET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"explain"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"best_fields"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#most_fields考虑绝大多数的字段相加的分数GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"explain"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"most_fields"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#cross_fields以分词为单位计算栏位的总分GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"explain"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"basketball with cartoom aliens"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cross_fields"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查询字符串query String，方便使用AND OR NOT </p><pre class=" language-json"><code class="language-json">#filter过滤条件，但条件查询GET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"steve"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"cast.name"</span><span class="token operator">:</span> <span class="token string">"gaspard"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"release_date"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"lte"</span><span class="token operator">:</span> <span class="token string">"2015/01/01"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"popularity"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"gte"</span><span class="token operator">:</span><span class="token string">"25"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token property">"popularity"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>##带match打分的filterGET /movie/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"life"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"steve"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"cast.name"</span><span class="token operator">:</span> <span class="token string">"gaspard"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"release_date"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"lte"</span><span class="token operator">:</span> <span class="token string">"2015/01/01"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"popularity"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"gte"</span><span class="token operator">:</span><span class="token string">"25"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="掌握查全率和查准率"><a href="#掌握查全率和查准率" class="headerlink" title="掌握查全率和查准率"></a>掌握查全率和查准率</h4><p>两者不可兼得，可以根据参数进行调节选择适合自己的。</p><blockquote><p>查全率：正确结果有n个，查询出来正确的有m，查全率 = m/n</p><p>查准率：查出的n个文档有m个正确 m/n</p></blockquote><h3 id="点评数据的接入"><a href="#点评数据的接入" class="headerlink" title="点评数据的接入"></a>点评数据的接入</h3><h4 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h4><p><a href="https://itxingzai.xyz/2020/07/18/elasticsearch/#toc-heading-9" target="_blank" rel="noopener">IK分词器安装</a></p><p>原理：依旧需要经过字符过滤(中文的停用词)、字符处理(词典词库)、分词过滤(分词转换、词干转换)、分词转化</p><p>两种分词方式：ik_smart和ik_max_word(最大努力分词)</p><blockquote><p>构建索引与查询时可以使用不同的分词方式<br>analyzer指的是构建索引时的分词器<br>search_analyzer指定的是搜索关键字时候的分词</p></blockquote><p>实践中一般使用的是：构建索引使用的是ik_max_word分词算法,在查询时使用的是ik_smart分词算法</p><h4 id="全量索引构建"><a href="#全量索引构建" class="headerlink" title="全量索引构建"></a>全量索引构建</h4><p>使用logstash-jdbc构建全量索引</p><p>定义字段逻辑、定义字段类型、定义字段analyzer</p><p>数据库shop表</p><pre class=" language-json"><code class="language-json">##定义门店索引结构PUT /shop<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span><span class="token property">"search_analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"whitespace"</span><span class="token punctuation">,</span><span class="token property">"fielddata"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"location"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"geo_point"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"remark_score"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"double"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"price_per_man"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"category_id"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"category_name"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"seller_id"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"seller_remark_score"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"double"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"seller_disabled_flag"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>logstash-input-jdbc，类似于一个管道，将mysql与ES进行数据同步</p><blockquote><p>ELK:ElasticSearch、Kibana、logstash</p></blockquote><p>自定义mysql与logstash的配置文件</p><p><img src="../../../blogimages/0701/es20050103.png" alt="image-20200923162201620"></p><p>在bin文件中创建自己的mysql文件夹以及mysql的数据配置</p><p><img src="../../../blogimages/0701/es20050104.png" alt="image-20200923162347091"></p><pre class=" language-conf"><code class="language-conf">input{    jdbc{        #mysql数据库连接，commentdb为数据库名        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/commentdb"        #用户名和密码        jdbc_user => "root"        jdbc_password=>"123"        #驱动        jdbc_driver_library => "G:\elasticsearch\logstash-7.6.2\bin\mysql\mysql-connector-java-5.1.46.jar"        #驱动类名        jdbc_driver_class => "com.mysql.jdbc.Driver"        jdbc_paging_enabled => "true"        jdbc_page_size => "50000"        #执行sql文件路径+名称        statement_filepath => "G:\elasticsearch\logstash-7.6.2\bin\mysql\jdbc.sql"        #设置监听间隔，各个字段含义，分、时、天、月、年,全部设置为*表示每分钟执行一次sql文件        schedule => "* * * * *"    }}output{    elasticsearch{     #ES的IP地址以及端口     hosts => ["localhost:9200"]     #索引名称     index => "shop"     document_type => "_doc"     #自增ID需要关联的数据库中有一个id字段，对应索引的id     document_id => "%{id}"    }    stdout{        #JSON格式输出        codec => json_lines    }}</code></pre><p>启动方式，cmd命令行进入到logbash的bin目录下,指定启动配置</p><blockquote><p>logstash.bat -f  mysql/mysql.conf</p></blockquote><p>查询语句jdbc.sql</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>tags<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>latitude<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span> <span class="token keyword">as</span> location<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>remark_score<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>price_per_man<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>category_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> category_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>seller_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>remark_score <span class="token keyword">as</span> seller_remark_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>disabled_flag <span class="token keyword">as</span> seller_disabled_flag<span class="token keyword">from</span> shop <span class="token number">a</span><span class="token keyword">inner</span> <span class="token keyword">join</span> category <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>category_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>category_id<span class="token keyword">inner</span> <span class="token keyword">join</span> seller <span class="token number">c</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>seller_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id</code></pre><h4 id="增量索引构建"><a href="#增量索引构建" class="headerlink" title="增量索引构建"></a>增量索引构建</h4><p>配置文件中新增两部分，设置timezone以及指定默认的创建时间</p><pre class=" language-conf"><code class="language-conf">input{    jdbc{        #1.增量索引构建，添加一个timezone        jdbc_default_timezone => "Asia/Shanghai"        #mysql数据库连接，commentdb为数据库名        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/commentdb"        #用户名和密码        jdbc_user => "root"        jdbc_password=>"123"        #驱动        jdbc_driver_library => "G:\elasticsearch\logstash-7.6.2\bin\mysql\mysql-connector-java-5.1.46.jar"        #驱动类名        jdbc_driver_class => "com.mysql.jdbc.Driver"        jdbc_paging_enabled => "true"        jdbc_page_size => "50000"        #2.增量索引构建，添加一个        last_run_metadata_path => "G:\elasticsearch\logstash-7.6.2\bin\mysql\last_value_meta.conf"        #执行sql文件路径+名称        statement_filepath => "G:\elasticsearch\logstash-7.6.2\bin\mysql\jdbc.sql"        #设置监听间隔，各个字段含义，分、时、天、月、年,全部设置为*表示每分钟执行一次sql文件        schedule => "* * * * *"    }}output{    elasticsearch{     #ES的IP地址以及端口     hosts => ["localhost:9200"]     #索引名称     index => "shop"     document_type => "_doc"     #自增ID需要关联的数据库中有一个id字段，对应索引的id     document_id => "%{id}"    }    stdout{        #JSON格式输出        codec => json_lines    }}</code></pre><p>sql语句文件的更新</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>tags<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>latitude<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span> <span class="token keyword">as</span> location<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>remark_score<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>price_per_man<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>category_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> category_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>seller_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>remark_score <span class="token keyword">as</span> seller_remark_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>disabled_flag <span class="token keyword">as</span> seller_disabled_flag<span class="token keyword">from</span> shop <span class="token number">a</span><span class="token keyword">inner</span> <span class="token keyword">join</span> category <span class="token number">b</span>  <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>category_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>category_id<span class="token keyword">inner</span> <span class="token keyword">join</span> seller <span class="token number">c</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>seller_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>update_at <span class="token operator">></span> :sql_last_value<span class="token operator">or</span> <span class="token number">b</span><span class="token punctuation">.</span>update_at <span class="token operator">></span> :sql_last_value<span class="token operator">or</span> <span class="token number">c</span><span class="token punctuation">.</span>update_at <span class="token operator">></span> :sql_last_value </code></pre><p>启动出现错误，文件不能读取</p><p><img src="../../../blogimages/0701/es20050201.png" alt="image-20201003092640148"></p><p>该错误是将mysql的连接工具的版本写错，修改与文件夹下的连接jar包一致的版本</p><p>简单的查询测试，在ES中的索引名为shop</p><pre class=" language-script"><code class="language-script">//根据距离进行排序GET /shop/_search{  "query": {    "match": {      "name": "凯悦"    }  },  "_source": "*",  "script_fields": {    "distance": {      "script": {        "source": "haversin(lat,lon,doc['location'].lat,doc['location'].lon)",        "lang": "expression",        "params": {"lat":31.37,"lon":127.12}      }    }  },  "sort": [    {      "_geo_distance": {        "location":{          "lat": 31.37,          "lon": 127.12        },        "order": "asc",        "unit": "km",        "distance_type": "arc"      }    }  ]}</code></pre><h4 id="Java与ES的接入"><a href="#Java与ES的接入" class="headerlink" title="Java与ES的接入"></a>Java与ES的接入</h4><h5 id="方式一：Node接入Node-Client"><a href="#方式一：Node接入Node-Client" class="headerlink" title="方式一：Node接入Node Client"></a>方式一：Node接入Node Client</h5><p>将java应用程序也作为一个Node节点，作为集群中节点的一部分。</p><h5 id="方式二：Transport接入transport-client"><a href="#方式二：Transport接入transport-client" class="headerlink" title="方式二：Transport接入transport client"></a>方式二：Transport接入transport client</h5><p>作为一种客户端通信方式进行与ES服务器交互。</p><h5 id="方式三：Http接入rest-client"><a href="#方式三：Http接入rest-client" class="headerlink" title="方式三：Http接入rest client"></a>方式三：Http接入rest client</h5><p>rest风格是一种基于http的一种数据访问的方式</p><h3 id="引用进阶"><a href="#引用进阶" class="headerlink" title="引用进阶"></a>引用进阶</h3><h4 id="定制化分词器"><a href="#定制化分词器" class="headerlink" title="定制化分词器"></a>定制化分词器</h4><h5 id="扩展词库"><a href="#扩展词库" class="headerlink" title="扩展词库"></a>扩展词库</h5><h5 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a>同义词</h5><h4 id="相关搜索重塑"><a href="#相关搜索重塑" class="headerlink" title="相关搜索重塑"></a>相关搜索重塑</h4>]]></content>
      
      
      <categories>
          
          <category> java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql知识点学习</title>
      <link href="/2020/03/30/mysql-zhi-shi-dian/"/>
      <url>/2020/03/30/mysql-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p>mysql的一些概念与面试常见问题，烦人(小声bb)。</p><h4 id="Mysql常见的问题"><a href="#Mysql常见的问题" class="headerlink" title="Mysql常见的问题"></a>Mysql常见的问题</h4><p>索引相当于一个字典，存放一个文件及在文件中的偏移量。索引存在的位置是存放在磁盘位置。基本概念：局部性原理(时间局部性和空间局部性)和磁盘预读(以页为单位)</p><p>1.mysql原子性和持久性怎么保证？</p><blockquote><p><strong>read log</strong>为了提升不会将每次修改的数据实时同步到磁盘中，而是先存放到缓存中，然后再使用线程去做缓冲池和磁盘中的同步。read log是重做日志，当事务提交的时候会把所有的修改信息存放在read log中，并且会把read Log持久化到磁盘中，当电脑重启后就会重新执行read   log的修改信息，进而达到<strong>持久化</strong>的目的。read log包括两部分，重做日志缓冲和重做日志文件，一个是缓存一个是持久化的文件。read log分为两个步骤，prepare和commit也就是两阶段提交。</p><p><strong>undo log：</strong>一个事务中的操作要么全部成功提交、要么全部失败回滚，这就是事务的原子性。undo log称之为回滚日志，每条数据的变化(insert/update/delete)都会产生一条记录，并且日志持久化到磁盘，undo log用来记录数据修改前的信息。</p><p><strong>read log恢复事务导致的数据页的修改，是一种物理日志，undo log能够恢复数据记录到某个特定的版本，是一种逻辑日志</strong></p></blockquote><p>2.innode和myisam区别</p><blockquote><p>innodb存储引擎的数据文件和索引文件放在一个文件夹中，myisam分为不同的文件</p><p>innodb支持事务，myisam不支持</p><p>innodb支持表锁和行锁，而myisam支持表锁</p><p>innodb有外键，myisam没有外键</p></blockquote><p>3.索引分类：主键索引、唯一索引、普通索引和全文索引、组合索引。</p><blockquote><p>主键索引：主键是一种唯一性索引，但它必须指定为PRIMARY_KEY，每个表只能有一个主键</p><p>唯一索引：索引列的所有值都只能出现一次，即必须唯一，值可以为空</p><p>普通索引：基本的索引类型，值可以为空，没有唯一性限制</p><p>全文索引：全文索引的类型为FULLTEXT，全文索引可以在varchar、char、text类型的列上创建</p><p>组合索引：多列值组成一个索引，专门用于组合搜索</p></blockquote><p>4.innodb的底层数据结构（最左匹配、索引下推）</p><p>innodb的索引文件和数据文件存放在一起，b+树的叶子节点存放的是数据，是索引位置的那一行数据。</p><blockquote><p>innodb是通过B+Tree结构对主键创建索引，然后叶子节点存储记录，如果没有主键，那么会选择唯一键，如果没有唯一键，那么就会生成一个6位的row_id来作为主键</p><p>如果创建索引的键是其他字段，那么会在叶子节点中存储的是该记录的主键，然后通过主键索引找到对应的记录，叫做<strong>回表</strong>。</p></blockquote><p>索引覆盖：根据普通索引查找到维护的主键，再根据主键通过回表查询另一个b+树找到对应的数据；在进行一个查询是只查询主键，不需要回表</p><p>5.为什么使用b+树而不适用b树</p><blockquote><p>数据结构的选取：</p><p>hash表：</p><p>不使用hash表的原因有，利用hash存储的话需要将所有的数据文件添加到内存，比较耗费内存空间；如果所有的查询都是等值查询，效率高，但是常用数据库为范围查询查找数据。</p><p>二叉搜索树和红黑树：</p><p>不使用该树无论是二叉树还是红黑树，都会因为树的深度过深而造成io次数变多，影响数据读取的效率。</p></blockquote><p>数据库三范式：</p><blockquote><p>第一范式：确保每列的原子性，如果每列都是不可再分的最小数据单元，则满足第一范式。</p><p>第二范式：首先需满足第一范式，并且表中非主键列不存在对主键的部分依赖，要求每张表只描述一件事。</p><p>第三范式：满足第二范式，并且表中的列不存在对非主键列的传递依赖，也有称为外键约束</p></blockquote><p><strong>数据库事务以及数据库事务属性：</strong>(相当重要)</p><p>事务作为单个逻辑工作单元执行的一系列操作，这些操作作为一个整体一起向系统提交，要么都执行，要么都不执行。事务需具备的属性ACID：</p><blockquote><p>原子性(Atomicity)：事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行。  </p><p>一致性(Atomicity)：当事务完成时，数据必须处于一致状态。  </p><p>隔离性(Atomicity)：对数据进行修改的所有并发事务是彼此隔离的， 这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。  </p><p>持久性(Atomicity)：事务完成后，它对数据库的修改被永久保持，事务日志能够保持事务的永久性。  </p></blockquote><p>存储过程：</p><blockquote><p>一组为了完成<strong>特定功能的 SQL 语句集</strong>，存储在数据库中，<strong>经过第一次编译后再次调用不需要再次编译</strong>，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。  </p></blockquote><p>存储过程的优化:</p><blockquote><p>1.尽量利用一些 sql 语句来替代一些小循环，例如聚合函数，求平均函数等。</p><p>2.中间结果存放于临时表，加索引。</p><p>3.少使用游标。 sql 是个集合语言，对于集合运算具有较高性能。而 cursors 是过程运算。比如对一个 100 万行的数据进行查询。游标需要读表 100 万次，而不使用游标则只需要少量几次读取。</p><p>4.事务越短越好。 sqlserver 支持并发操作。如果事务过多过长，或者隔离级别过高，都会造成并发操作的阻塞，死锁。导致查询极慢， cpu 占用率极地。</p><p>5.使用 try-catch 处理错误异常。</p><p>6.查找语句尽量不要放在循环内。  </p></blockquote><p>触发器:一段能够自动执行的程序</p><blockquote><p>触发器是一段能自动执行的程序，是<strong>一种特殊的存储过程</strong>。</p><p>触发器和普通的存储过程的区别是：触发器是当对某一个表进行操作时触发。 诸如： update、 insert、 delete 这些操作的时候，系统会自动调用执行该表上对应的触发器。 SQL Server 2005 中触发器可以分为两类： <strong>DML 触发器和DDL 触发器</strong>，其中 DDL 触发器它们会影响多种数据定义语言语句而激发，这些语句有 create、alter、 drop 语句  </p></blockquote><p>数据库并发策略：乐观锁、悲观锁、时间戳</p><blockquote><p>乐观锁是一种不加锁的状态，认为每次读取数据时，没有人更改数据</p><p>悲观锁认为自己访问数据时一定会被别人修改，每次操作数据时对数据进行加锁，悲观锁又有排他锁(写锁)和共享锁(读锁)</p><p>时间戳：在数据库中加入一列时间戳，每次读数据时，读取该字段，写数据时把该字段+1，提交数据时先进行比较，如果数据库的值大时，允许操作，否则不允许保存。</p></blockquote><p>数据库锁:</p><blockquote><p>行锁:排他锁的一种，防止其他事务修改此行</p><p>表锁：对当前整张表加锁，资源消耗大，mysql引擎支持，表锁分为表共享锁和表独占锁</p><p>页级锁:介于行锁与表锁之间，表级锁速度快，冲突多，行级锁冲突少，速度慢。</p></blockquote><p>mysql分区分表：</p><p>分库分表有垂直切分和水平切分两种:</p><p>垂直切分(按照功能模块)</p><blockquote><p>将表按照功能模块、关系密切程度划分出来， 部署到不同的库上。例如，我们会建立定义数<br>据库 workDB、商品数据库 payDB、用户数据库 userDB、日志数据库 logDB 等，分别用于<br>存储项目数据定义表、商品定义表、用户数据表、日志数据表等  </p></blockquote><p>水平切分(按照规则划分存储)</p><blockquote><p>当一个表中的数据量过大时，我们可以把该表的数据按照某种规则，例如 userID 散列，进行划分，然后存储到多个结构相同的表，和不同的库上  </p></blockquote><p><strong>再谈索引(2020年7月1日)</strong></p><h5 id="你好啊，七月！"><a href="#你好啊，七月！" class="headerlink" title="你好啊，七月！"></a>你好啊，七月！</h5><p>为什么需要索引？</p><p>索引是为了更快速地查找到文件或查找到数据，类似于查字典时的前面的拼音或偏旁部首。索引一般需要存储的是：</p><blockquote><p>关键值Key 、文件名称、偏移量offset</p></blockquote><pre class=" language-mysql"><code class="language-mysql">select  name from user where id = 1;</code></pre><p>其中在id上建立索引，根据id = 1进行查找相关的数据</p><p>Mysql中的存储引擎：</p><p>MySam（B+树）、InnoDB（B+树）、Memory（Hash表）</p><p>磁盘读取与cpu速度之间的不匹配性，因此在做相关的IO读取时会利用局部性原理，局部性原理是程序的数据的访问都有聚集性成群的倾向，在一个时间段内，仅适用其中的一小部分，即<strong>空间局部性</strong>，或者最近访问过的程序代码和数据，很快又被访问的可能性跟大，即<strong>时间局部性原理</strong>。因此，再设计磁盘读取文件时一般会有预读，以页(页的大小通常为4k或4k的整数倍)为单位进行数据读取。</p><blockquote><p>页是存储器的逻辑块，操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页，主存和磁盘以页为单位交换数据。</p></blockquote><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p><strong>InnoDb是Mysql的默认事务型引擎</strong>，也是最重要、最广泛的存储引擎，用来处理大量短期事务。</p><p>InnoDB的数据存储在表空间中，是一系列的数据文件组成，<strong>InnoDB可以将每个表的数据和索引存放在单独的文件中</strong>。InnoDB采用MVCC来支持高并发，并实现四个隔离级别，默认级别为可重复读(REPEATABLE READ)，可以通过间隙锁策略(这个并不了解)放置幻读。</p><blockquote><p>InnoDB内部做了很多的优化，从磁盘读取数据时采用可预读性预读，能够自动在内存中创建hash索引以加速读操作的自适应哈希索引(adaptive hash index)，以及能够加速插入操作的插入缓冲区(insert buffer)。</p></blockquote><h4 id="MYISAM存储引擎"><a href="#MYISAM存储引擎" class="headerlink" title="MYISAM存储引擎"></a>MYISAM存储引擎</h4><blockquote><p>myisam是默认的引擎，拥有全文索引、压缩、空间函数等特性，但是<strong>MYISAM不支持事务和行级锁</strong> 崩溃后无法安全恢复</p></blockquote><p>MyISAM将数据文件和索引文件存放在两个文件中，分别为.MYD和.MYI的扩展名文件，该引擎能够对整张数据表进行加锁操作，读取数据时加共享锁，写入时则对表加排他锁，数据崩溃时可以手动或者自动检查和修复操作。</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><p>B-Tree索引(这个不叫B减)</p><p>B-tree（多路搜索树，并不是二叉的）是一种常见的数据结构。B-Tree每个节点包含有：本结点所含关键字的个数、指向父节点的指针、关键字、指向子节点的指针(图片来自MYsql高性能)</p><p><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/tree20070102.png" alt="平衡搜索树"></p><p>通过从根节点开始进行向下查找，通过比较节点页与要查找的值可以适合进入下一层子节点，在节点中有页的上限和下限，对于叶子节点，其指向的是被索引的数据，而不是其他的节点页</p><p>1.全值匹配：与所有的列进行匹配。</p><p>2.匹配最左前缀：从左进行匹配，只是用索引中的最左边的信息</p><p>3.匹配列前缀：只匹配某一列的值的开头部分</p><p>4.匹配范围值：查询时使用范围查询，因此只是用某一列进行匹配</p><p>5.精确匹配某一列并范围匹配另外一列：使用某两列进行先关的数据信息查询</p><p>6.只访问索引的查询：查询只访问索引，不访问数据行。</p><p>B-Tree索引的限制：</p><blockquote><p>必须进行最左匹配，否则无法使用索引</p><p>不能跳过索引的列</p><p>如果查询中是某个列的范围，则右边的所有列无法使用索引优化查找</p></blockquote><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>其基于hash表实现，只有精确匹配索引所有的列的查询才有效，对于没一行数据，存储引擎都会对所有的索引列计算一个hash码，hash码作为键指向数据行。Mysql中的Memory引擎显示的支持hash索引。</p><p>hash索引的限制：</p><blockquote><p>1.hash索引只包含哈希值和行指针，不存储字段值，因此不能使用索引中的值来避免读取行</p><p>2.不可以排序</p><p>3.哈希索引不支持部分索引列匹配，即不支持范围查询，只支持等值查询</p><p>4.可能存在哈希冲突，哈希冲突高时，会导致索引维护代价高</p></blockquote><h4 id="空间数据索引"><a href="#空间数据索引" class="headerlink" title="空间数据索引"></a>空间数据索引</h4><p>MYISAM支持空间数据索引，一般作为地理数据存储，这类索引无需前缀信息，空间索引会进行所有维度的索引数据，查询时，可以任意维度组合查询。空间函数的支持GIS</p><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>全文索引是一种特殊的类型的索引，其是从文件中找出关键词，而不是进行比较索引中的值。</p><h4 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h4><blockquote><p>1.索引大大减少服务器需要扫描的数据量</p><p>2.索引可以帮助服务器避免排序和临时表</p><p>3.索引可以将随机I/O变为顺序I/O</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2020/03/28/an-zhuang-docker/"/>
      <url>/2020/03/28/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>linux内核升级</p><p><strong>yum update -y</strong></p><p><strong>yum install docker -io lxc libcgroup* device-mapp* -y</strong></p><h3 id="安装第三方扩展源"><a href="#安装第三方扩展源" class="headerlink" title="安装第三方扩展源"></a>安装第三方扩展源</h3><blockquote><p>//安装第三方扩展源</p><p>yum install epel-release -y</p><p>//查看是否成功安装扩展源</p><p>ll /etc/yum.repos.d/|grep -w epel</p></blockquote><p>安装docker软件包</p><blockquote><p>yun install docker -y</p><p>yum list docker</p><p>rpm - qa|grep docker</p><p>systemctl start docker.service</p><p>#查看Docker进程</p><p>ps -ef|grep docker</p><p>#查看Docker版本信息</p><p>docker version</p></blockquote><p>1.安装centos7<br>使用阿里云镜像</p><blockquote><p><a href="https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</a></p></blockquote><p> 使用VMware11.0安装centos7<br> 1.设置网络为桥接模式，重启网络设置<strong>service network restart</strong></p><p> 2.查看ip地址：<strong>ip addr</strong><br> 3.查看Centos版本：使用<strong>uname -r</strong> (linux内核版本高于3.10)<br> 4.升级软件包及内核（小于3.10需要该操作）：<strong>yum update</strong><br> 5.安装docker命令：<strong>yum install docker</strong><br> 6.启动docker命令:<strong>systemctl start docker</strong><br> 7.将docker服务设为开机启动：<strong>systemctl    enable docker</strong><br> 8.查看docker版本： <strong>docker -v</strong></p><pre><code>&gt;设置开机启动：systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</code></pre><p>检索操作：<strong>docker search 关键字</strong><br>拉取信息：<strong>docker pull 镜像名</strong>：tag（tag可选择，多为软件的版本，默认最新版本）<br>列表：<strong>docker images</strong><br>删除 ：<strong>docker rmi inage-id</strong>（删除指定版本的镜像）</p><p>搭建环境：<br>安装mysql：<br><strong>docker search mysql；</strong><br><strong>docker pull mysql：latest</strong><br>错误的启动mysql：<br><strong>docker run –name mysql01 -d mysql</strong><br>启动的mysql不能够使用，查看错误日志使用命令docker logs mysql镜像的id<br>正确启动mysql的命令：<strong>docker run –name mysql01 -e MYSQL_ROOT_PASSWORD=root23 -d mysql</strong><br>以上命令在容器中启动不能被外网访问，需要做端口映射。</p><p>重启docker</p><p><strong>docker server restart</strong> </p><p>安装nginx镜像</p><p><strong>docker pull docker.io/nginx</strong></p><p>查看docker镜像</p><p><strong>docker  images</strong></p><p><strong>docker images|grep -i nginx</strong></p><p>运行nginx(使用ip+80端口进行访问)</p><p><strong>docker run -itd -p 80:80 docker.io/nginx</strong></p><p>部署redis：</p><p>1.搜索redis镜像</p><p>docker search redis</p><p>2.拉取redis镜像</p><p>docker pull redis:5.0</p><p>3.创建容器</p><p>docker run -id –name=C_redis -p 6379:6379 redis:5.0</p><p>4.使用外部机器连续redis</p><p>./redis-cli.exe  -h  ip(localhost)  -p  6379</p><h4 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h4><p>操作系统组成有：</p><p>进程调度子系统、进程通信子系统、内存管理子系统、设备管理子系统、文件管理子系统、网络管理子系统、作业控制子系统</p><p> linux文件系统由boot和rootfs两部分组成</p><p>bootfs：包含bootloader（引导加载程序）和kernel内核</p><p>rootfs：root文件系统，包含的就是典型的linux系统中的/dev、/proc、/bin、/etc等标准目录和文件</p><h4 id="docker制作镜像："><a href="#docker制作镜像：" class="headerlink" title="docker制作镜像："></a>docker制作镜像：</h4><p>1.容器转为镜像：</p><p>docker commit 容器id 镜像名称:版本号</p><p>将镜像转为压缩文件，可以用于传输</p><p>docker save -o 镜像的压缩文件  镜像名称:版本号</p><p>恢复镜像：</p><p>docker load -i 镜像的压缩文件</p><p>2.fockerfile将容器转为镜像</p><p>docker  build  -f  自定义的dockerfile  -t app</p><p>dockerfile发布springboot项目</p><p>1.定义父镜像</p><p>From java:8</p><p>2.定义作者信息：</p><p>MAINTAINER itxing <a href="mailto:&#105;&#116;&#120;&#x69;&#110;&#103;&#x7a;&#x61;&#x69;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;">&#105;&#116;&#120;&#x69;&#110;&#103;&#x7a;&#x61;&#x69;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a></p><p>3.添加jar</p><p>ADD 项目jar包 app.jar</p><p>4.启动jar</p><p>CMDjava -jar app.jar</p><p>5.docker启动自定义容器并且端口映射</p><p>docker run -id -p 9000:8080  自定义的项目名app</p><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><p>1.安装Docker Compose</p><p>curl -l <a href="https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname">https://github.com/docker/compose/release/doenload/1.22.0/docker-compose-&#39;uname-s&#39;-&#39;uname</a> -m’ -o /usr/local/bin/docker-compose</p><p>2.设置文件可执行权限</p><p>chmod +x /usr/local/bin/docker-compose</p><p>3.查看版本信息</p><p>docker-compose -version</p><p>4.卸载Docker Compose</p><p>rm /usr/local/bin/docker-compose</p><h4 id="Docker搭建私有仓库"><a href="#Docker搭建私有仓库" class="headerlink" title="Docker搭建私有仓库"></a>Docker搭建私有仓库</h4><p>1.拉取私有仓库连接</p><p>docker pull resistry</p><p>2.启动私有仓库</p><p>docker run -id –name=registry -p 5000:5000 registry</p><p>3.打开连接，浏览器中输入http://私有仓库服务器ip5000/v2/_catalog,看到{“repositories”:[]}表示私有仓库，搭建成功</p><p>4.修改damon.json</p><p>vim /etc/docker/damon.json</p><p>#在中间中添加key，保存退出，该步骤是让docker信任私有仓库，注意将所有私有的仓库服务器ip修改为自己私有仓库服务器的真实ip</p><p>{“insecure-registries”：[私有仓库服务器ip:5000]}</p><p>5.重启docker服务</p><p>systemctl   restart   docker</p><p>docker   start   registry</p><h4 id="将镜像上传至私有仓库"><a href="#将镜像上传至私有仓库" class="headerlink" title="将镜像上传至私有仓库"></a>将镜像上传至私有仓库</h4><p>1.标记镜像为私有仓库镜像</p><p>docker    tag    需要标签的docker镜像   私有仓库服务器ip:5000/centos:7</p><p>2.上传标记的镜像</p><p>docker push 私有仓库服务器ip：5000/标记好的docker镜像</p><p>3.删除当前的镜像</p><p>docker rmi 镜像名</p><p>4.从私有仓库拉取镜像</p><p>docker pull 镜像名</p><h4 id="容器和虚拟机的比较："><a href="#容器和虚拟机的比较：" class="headerlink" title="容器和虚拟机的比较："></a>容器和虚拟机的比较：</h4><p>相同点：容器和虚拟机都是进行相似的资源隔离和分配优势</p><p>不同点：传统虚拟机可以运行不同的操作系统，容器只能运行同一类型的操作系统</p>]]></content>
      
      
      <categories>
          
          <category> java深入学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题党--it星</title>
      <link href="/2020/03/26/hello-world/"/>
      <url>/2020/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2020/03/26/redis-xue-xi-jian-dan-ji-lu/"/>
      <url>/2020/03/26/redis-xue-xi-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>nosql (not only sql)非关系型数据库(需要多多练习使用)</p><p>Nosql数据库种类较多，但是都有一个特点是去点关系型数据库的关系特性。</p><p>互联网的</p><p><strong>三高：高并发、高扩展、高负载</strong></p><p>3V：<strong>海量(Volume)、多样(Variety)、实时(Velocity)</strong></p><p>验证或查看redis命令：</p><blockquote><p> ps  -ef|grep redis</p><p>netstat -antp | grep redis</p></blockquote><p>redis的配置文件中设定了数据库的个数，默认是16个（0-16-1个）</p><p>select 切换数据库</p><p>DBsize查看当前数据库的key的数量</p><p>linux下启动redis：</p><p>进入到redis安装目录(我的路径)：cd  /usr/local/redis/bin/</p><p>将会看到有很多相关的redis文件，启动并访问redis服务：</p><blockquote><p>./redis-server redis.conf</p><p>./redis-cli  -p  6379</p></blockquote><p><strong>redis的通用命令：</strong></p><blockquote><p>keys *</p><p>exists key的名字，判断某个key是否存在</p><p>move   key db  当前库被移除</p><p>expire key  秒值   给当点的key设置过期时间</p><p>ttl key 查看还有多少秒过期 -1表示永不过期 -2表示已经过期</p><p>type key 查看你的key是什么类型</p><p>dbsize  数据库的大小</p></blockquote><p>注:一般不会使用redis的长命令</p><p>例如：keys,flushall,flushdb,slow lua script,mutil/exec,operate big value</p><p><strong>redis的五大数据类型</strong></p><p>redis对象包括：数据类型、内部编码</p><table><thead><tr><th>redis的键Key</th><th>内部的编码</th></tr></thead><tbody><tr><td>String</td><td>raw、int、embstr</td></tr><tr><td>hash</td><td>hashtable、ziplist</td></tr><tr><td>list</td><td>linkedlist、ziplist</td></tr><tr><td>set</td><td>hashtable、insert</td></tr><tr><td>zset</td><td>skiplist、ziplist</td></tr></tbody></table><p><strong>1.redis的String 字符串</strong>：string是redis最基本的类型，一个key对应一个value，最大的value最多可以是512M。可以存图片或者序列化的对象(常用命令)</p><blockquote><p>set/get/del/append/strlen</p><p>Incr/decr/incrby/decrby</p><p>getrange/setrange：getrange key  start   end；setrange  key  start  end</p><p>setex(set with expire)键秒值/setnx(set if not exist)</p><p>mset/mget/msetnx(mget或mset是批次处理，1次mget时间= 网络时间+n次的命令时间)时间复杂度为O（N）</p><p>getset(先get再set)</p><p>append 在次机床叠加字符串</p></blockquote><p><strong>2.redis的Hash哈希</strong>：是一个键值对的集合，适用于存储对象(k,v模式，v是一个键值对,常用命令)</p><blockquote><p>hset/hget/hmset/hmget/hgetall/hdel  基本的添加与查询</p><p>hlen 查询长度</p><p>hexist key 在key里面的某个值的key</p><p>hkeys/hvals</p><p>hincrby/hincrbyfloat</p><p>hsetnx  如果存在不插入，不存在插入</p></blockquote><p><strong>3.redis的List列表</strong>：是一个简单的字符串列表</p><blockquote><p>lpush/rpush/lrange</p><p>lpop/rpop</p><p>lindex：按照索引下标获取元素</p><p>llen ：查看集合长度</p><p>lrem key  删除N个value</p><p>ltrim key 开始index   结束index：截取指定范围的值后在赋值给key</p><p>rpoplpush  源列表   目的列表</p><p>lset key index value</p><p>linsert key before/after 值1 值2</p></blockquote><p><strong>4.redis的Set集合</strong>：是一个无序无重复的集合(单值多value，常用命令)</p><blockquote><p>sadd/smembers/sismember</p><p>scard：获取集合里面的元素个数</p><p>srem key value ：删除集合中元素</p><p>srandmember key 某个整数</p><p>spop key ：随机出栈</p><p>smove key1 key2 在key1里某个值  作用是将key1中的某个值赋给key2</p><p>数学集合类：差集：sdiff  交集：sinter  并集：sunion</p></blockquote><p><strong>5.redis的Zset(Sorted set:有序集合)</strong>：有序的集合，不允许有重复的成员，每个元素都会有一个关联的double类型的分数，根据分数进行从小到大的排序</p><blockquote><ol><li>zadd/zrange</li></ol><p>注：zrange常与withscores联合使用</p><ol start="2"><li>zrangebyscore key 开始score 结束score</li></ol><p>注：zrangebyscore  key 开始scorre 结束score  (withscore 或者‘（’表示不包含或者limit返回限制)</p><p>例子1：zrangescore   zset01  60   (90   表示zset集合中分数大于等于60小于90的元素的键值对的键值</p><p>例子2：zrangescore   zset01  60   (90  withscores   表示zset集合中分数大于等于60小于90的元素整个键值对</p><p>例子3：zrangescore   zset01  60   (90  limit 2  2     表示zset集合中分数大于等于60小于90的元素键值从2位置查两个</p><ol start="3"><li>zcard/zcount key score区间/zrank key values值，作用是获取下标值/zscore key 对应值，获得分数</li><li>zrevrank key values 作用是逆序获取下标值</li><li>zrevrange</li><li>zrevrangebyscore key</li></ol></blockquote><p><a href="http://redisdoc.com/" target="_blank" rel="noopener">redis命令大全</a></p><p><strong>redis的配置文件redis.conf:</strong></p><p>Unitsd单位：对于大小写不敏感，GB gb  都一样。</p><p>INCLUDES包含：标准的模板，可以包含其他的配置文件，使用include进行引入</p><p>GENERAL：TCP-backlog=511（默认），其是一个连接队列。还包含redis日志，四个日志级别：debug、verbose、notice、waring</p><p> SNAPSHOTTING快照：</p><p>SECURITY安全：</p><p>   自己配置密码：config set requirepass “123456”</p><p>   登录时需验证：auth 123456</p><p>LIMITS限制：Maxclients、Maxmemory、Maxmemory-policy、Maxmemory-samples(默认5个样例)</p><blockquote><p>Maxmemory-policy缓存过期机制：</p><p>volatile-lru:使用LRU（最近最少使用淘汰）算法移除key，只针对于过期时间的键</p><p>allkeys-lru：使用LRU（最近最少使用淘汰）算法移除key</p><p>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</p><p>allkeys-random：移除随机的key</p><p>volatile-ttl:移除那些TTL（设置存活时间）值最小的key，即就是将要过期的key</p><p>noeviction：不进行移除，针对写操作（永不过期）</p></blockquote><p>APPEND ONLY MODE追加</p><p>Redis中的功能：</p><p>慢查询、pipeline、发布订阅、Bitmap、HyperLogLog、GEO</p><ul><li>1.慢查询：(慢查询默认配置:slowlog-max-len = 128和slowlog-log-slower-than = 10000)</li></ul><p>​     客户端请求的生命周期：客户端发送命令；排队；执行命令；返回结果。第三阶段慢执行称为慢查询，客户端超时可能不是慢查询的原因。</p><blockquote><p> 动态配置：config set slowlog-max-len = 1000</p><p>slowlog get[n]:获取慢查询队列</p><p>slowlog len :获取慢查询队列长度</p><p>slowlog reset:清空慢查询队列</p><p> slowlog-max-len默认10毫秒，通常设置1ms</p><p>slowlog-log-slower-than队列长度大多设置在1000</p></blockquote><ul><li><p>pipeline流水线：多次操作可以分批进行操作，例如10000次可以分为100*100</p></li><li><p>发布订阅(客户端与客户端之间的消息，类似于生产者消费者)</p></li></ul><blockquote><p> public channel  mrssage   发布消息</p><p>subscribe channel   订阅频道</p><p>psubscribe [pattern]  订阅模式</p></blockquote><ul><li>Bitmap(位图)</li></ul><blockquote><p>setbit key offset value    给位图指定索引设置值</p><p>getbit key offset     获取位图指定索引的值</p><p>bitcount  key  [start  end]   获取指定范围的值</p><p>bittop op destkey  key  [key…]</p></blockquote><ul><li>HyperLogLog(极小控件数据统计)</li></ul><blockquote><p>pfadd key element [emelent]</p><p> pfcount key [key]</p></blockquote><ul><li>GEO(redis3.2的功能)存储两个地理的经纬度，用于计算两地距离</li></ul><blockquote><p>geoadd key  精度 维度 标识</p><p>geopod key 标识 [标识]</p><p>geodist   key   标识1  标识2</p><p>georadius key  精度  维度  选项</p></blockquote><p><strong>Redis持久化：</strong></p><p><strong>1.RDB（Rdies DataBase）</strong>：在<strong>指定时间间隔内</strong>将数据集快照写入磁盘，<strong>Snapshot快照</strong>，恢复时将快照读到内存。Redis会<strong>单独创建一个子进程</strong>来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束，再用该<strong>临时文件替换上次持久化好的文件</strong>，整个过程中主进程不进行IO操作，这样确保了极高的性能。对于需要进行大规模数据的恢复，且对于数据恢复的完整性不敏感，那么RDB方式比AOF方式更加高效。(时间复杂度O(N))</p><p>Fork的作用是复制一个与当前进程一样的进程，新进程的所有数据数值都和原进程一致。</p><p>Rdb保存的是dump.rdb文件：</p><blockquote><p>命令save   秒值   改动次数   （同步）</p><p>bgsave (异步)</p><p>自动生成该文件</p><p>经常将配置文件中的save命令关掉，手动进行save</p><p>dbfilename dump-${port}.rdb</p></blockquote><p>如何触发Rdb快照：将备份的dump.rdb拷贝到redis启动的目录下进行启动</p><p><strong>2.AOF（Append Only File）</strong>：以日志的形式来记录每个写文件，是将redis执行的所有写过程指令记录下来(读不记录)，只允许追加文件但不可以改文件，redis启动之初会读取改文件重新构建数据，即redis将所有写指令从前到后执行一次恢复数据。</p><p>Aof保存的是appendonly.aof(如果开启aof默认加载改文件进行开启redis)：文件出现错误时，启动redis失败，可以使用命令进行自动修复，将不符合的语法进行剔除。</p><blockquote><p>redis-check-aof  –fix  appendonly.aof</p></blockquote><p>Rewrite：Aof采用文件追加方式，文件会越来越大，为了避免此情况，新增加重写机制，当aof文件大小超过所设定的阈值时，Redis就会启动Aof文件内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof。</p><p>重写（rewrite）原理：增长过大时，将fork出新的进程，将文件重写，遍历新进程内存中数据，每条记录有一条Set语句，重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写一个新的aof文件，与数据库快照类似。</p><p>重写触发机制：Redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大小等于64M</p><p>aof默认是时刻进行记录，保证数据完整，缺点是相同数据集的数据而言aof文件远大于rdb文件，恢复速度慢于rdb，Aof运行效率要慢于rdb。每秒同步策略效率较好，不同步效率与rdb相同。</p><p><strong>数据持久化选择：</strong></p><p>RDB持久化方式能够在指定时间间隔对数据进行快照存储；AOF持久化方式记录每次对服务器写的操作，当服务器重启的是时候会重新执行这些恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾</p><p>redis只做缓存时，可以不用持久化</p><p>同时开启两种持久化，redis优先加载aof来恢复原始数据，rdb用作后备用途，每15分钟进行一次备份即可（保留规则：save  900 1）</p><p>Redis事务：一组命令的集合，一起成功一起失败。一个事务中的所有命令被序列化，按顺序地串行执行而不会被其他命令插入，不允许加塞。</p><p>事务作用：一个队列中，一次性、顺序性、排他性的执行一系列命令</p><blockquote><p>事务开启命令：MULTI                       使用调用事务命令：EXEC</p><p>取消事务命令：DISCARD                取消watch命令对所有key的监视：UNWATCH</p><p>监视一个或多个key命令，事务执行前数据被改则事务被打断：WATCH</p></blockquote><p><strong>Redis对于事务是部分支持</strong></p><p><strong>执行事务、放弃事务、</strong></p><p><strong>全体连坐</strong>（事务中的某一条指令不可加入队列中，导致整个指令队列全部错误）、</p><p><strong>冤头债主</strong>（事务中的某一条指令有错误，但是能够加入队列，只有执行的时才会出错）、<strong>watch监控</strong>（悲观锁/乐观锁/CAS：check and set）</p><p>悲观锁：认为每次数据访问时一定会被别人修改，所以每次拿取数据时锁定整个表，别人想要操作数据时进入阻塞直到拿到锁，例如：关系型数据库中的行锁、表锁、读锁、写锁</p><p>乐观锁：认为每次拿取数据时，别人不会修改数据，相当于列锁，添加一个版本列</p><p>Redis的发布订阅：进程间的一种消息通信模式：发送者（Pub）发送消息，订阅者（sub）接受消息</p><blockquote><p>订阅频道(channel)：SUBSCRIBE c1 c2  c3</p><p>消息发布：PUBLISH c1  消息</p><p>订阅多个，通配符：PSUBSCRIBE  new*</p></blockquote><p><strong>Redis的复制（Master/Slaver）</strong>:即主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主（读写分离、容灾恢复）</p><blockquote><p>从库配置：slaveof 主库ip  主库端口</p><p>主机挂掉，从库上升为主库：slaveof  no  one</p></blockquote><p>从库配置操作，拷贝多个redis.conf文件；开启daemonize  yes；pid文件名字；指定端口；log文件名字；dump.rdb名字</p><p><strong>一主两仆</strong>：一个主机两个丛机，使用slaveof指向主机，只允许主机写数据，主机down掉，丛机等待主机复原，丛机down掉需要重新与主机建立连接，可以在配置文件中写就不需要每次手动连接</p><p>主从复制原理，Slave启动成功连接到master后会发送一个sync命令，Master接到命令启动后台的存盘进程，同时收集所有接收到的修改数据集的命令，在后台进程执行完毕之后，master将传送整个数据文件slave</p><p>全量复制：slave服务接收到数据库文件数据后将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改数据的命令依次传递给slave，完成同步，每次重新连接需要做依次全量复制</p><p><strong>常用的模式是哨兵模式(Sentinel)步骤:</strong></p><p>针对于主从复制的体系，主机挂机的情况下，从丛机中进行投票进行选举一个新的主机，步骤：</p><p>自定义配置文件，与redis.conf文件相同的路径建立一个sentinel.conf文件</p><p>配置哨兵：sentinel monitor 被监控数据库名字 (自己起一个名字)    127.0.0.1   6379   1</p><p>配置文件中的数字1表示主机挂掉后，票数多的成为新的主机</p><p>启动哨兵：Redis-sentonel   sentinel.conf</p><p>redis配置实例:</p><blockquote><p>功能包括：(<a href="http://gethub.com/sohutv/cachecloud" target="_blank" rel="noopener">http://gethub.com/sohutv/cachecloud</a>)</p><p>1.一键启动Redis。(Standalone、Sentinel、Cluster)</p><p>2.机器、应用、实例监控和报警</p><p>3.客户端：透明使用、性能上报</p><p>4.可视化运维：配置、扩容、Failover、机器/应用/实例上下线。</p></blockquote><p>redis配置参数：</p><p>daemonize:是否是守护进程（no|yes）</p><p>port：端口设置</p><p>logfile:日志文件</p><p>dir：redis工作目录</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j学习</title>
      <link href="/2020/03/25/neo4j-xue-xi-yu-dao-de-keng/"/>
      <url>/2020/03/25/neo4j-xue-xi-yu-dao-de-keng/</url>
      
        <content type="html"><![CDATA[<h4 id="neo4j下载与安装-windows环境下"><a href="#neo4j下载与安装-windows环境下" class="headerlink" title="neo4j下载与安装(windows环境下)"></a>neo4j下载与安装(windows环境下)</h4><p><a href="https://neo4j.com/" target="_blank" rel="noopener">neo4j官网</a></p><p>注：官网下载neo4j相当的慢。</p><p><a href="http://we-yun.com/index.php/blog/releases-56.html" target="_blank" rel="noopener">国内下载地址</a></p><h5 id="1-neo4j简单介绍"><a href="#1-neo4j简单介绍" class="headerlink" title="1.neo4j简单介绍"></a>1.neo4j简单介绍</h5><p>其是基于java语言编写的图形数据库。图是一组节点和连接这些节点的关系，图数据库也被称作图形数据库管理系统(GDBMS)。</p><h5 id="2-需要安装jdk环境"><a href="#2-需要安装jdk环境" class="headerlink" title="2.需要安装jdk环境"></a>2.需要安装jdk环境</h5><p>先使用java -version，查看自己的java环境是否配置好。</p><p><img src="/medias/images/image-20200324190457173.png" alt="image-20200324190457173"></p><h5 id="3-下载neo4j后解压，主要目录如下"><a href="#3-下载neo4j后解压，主要目录如下" class="headerlink" title="3.下载neo4j后解压，主要目录如下"></a>3.下载neo4j后解压，主要目录如下</h5><blockquote><p>Neo4j应用程序有如下主要的目录结构：</p><ul><li>bin目录：用于存储Neo4j的可执行程序；</li><li>conf目录：用于控制Neo4j启动的配置文件；</li><li>data目录：用于存储核心数据库文件；</li><li>plugins目录：用于存储Neo4j的插件；</li></ul></blockquote><h5 id="4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"><a href="#4-创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）" class="headerlink" title="4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）"></a>4.创建系统环境变量（可以配置也可以不配置，使用时进入bin下启动也可以）</h5><p>新建系统变量：将自己neo4j目录粘贴到变量值位置</p><p><img src="/medias/images/image-20200324190915553.png" alt="image-20200324190915553"></p><p><img src="/medias/images/image-20200324191226568.png" alt="image-20200324191226568"></p><p>最后将bin加入到path路径下：</p><p><img src="/medias/images/image-20200324191354386.png" alt="image-20200324191354386"></p><h5 id="5-测试安装是否成功"><a href="#5-测试安装是否成功" class="headerlink" title="5.测试安装是否成功"></a>5.测试安装是否成功</h5><h6 id="出现错误1"><a href="#出现错误1" class="headerlink" title="出现错误1:"></a>出现错误1:</h6><p><img src="/medias/images/image-20200324193244410.png" alt="image-20200324193244410"></p><p>如果出现这种情况，不能加载.psd1模块，这是由于相对路径配置的问题导致的，打开下面的文件：</p><p><img src="/medias/images/image-20200324193432628.png" alt="image-20200324193432628"></p><p>将路径改成自己的路径：</p><p><img src="/medias/images/image-20200324193542460.png" alt="image-20200324193542460"></p><h6 id="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"><a href="#出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境" class="headerlink" title="出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境"></a>出现错误2：neo4j版本与jdk版本不相符合，neo4j似乎需要jdk11环境</h6><blockquote><p>Neo4j cannot be started using java version 1.8.0_221</p></blockquote><p>更换jdk启动neo4j，成功访问</p><p><img src="/medias/images/image-20200324193821721.png" alt="image-20200324193821721"></p><p><img src="/medias/images/image-20200324193840986.png" alt="image-20200324193840986"></p><h4 id="Neo4j简单的命令"><a href="#Neo4j简单的命令" class="headerlink" title="Neo4j简单的命令"></a>Neo4j简单的命令</h4><h5 id="后期需要去学习一些Cypher语法"><a href="#后期需要去学习一些Cypher语法" class="headerlink" title="后期需要去学习一些Cypher语法"></a>后期需要去学习一些Cypher语法</h5><p>1.删除数据库中之前的图，创建一个空白的环境进行操作</p><blockquote><p>MATCH (n) DETACH DELETE n</p></blockquote><p><em>MATCH</em> 是匹配操作，小括号()代表一个节点node，括号里面的n为标识符</p><p>2.创建一个人物节点：</p><blockquote><p>CREATE (n:Person {name:’John’}) RETURN n</p></blockquote><p>_CREATE_是创建操作，Person是标签，代表节点的类型。花括号{}代表节点属性。该语句表示创建一个标签为Person的节点，该节点具有一个name属性值，值为john</p><p>3.创建更多人物节点</p><blockquote><p>CREATE (n:Person {name:’Sally’}) RETURN n</p><p>CREATE (n:Person {name:’Steve’}) RETURN n</p><p>Create(n:Person{name:’Xing’})RETURN n</p></blockquote><p>4.创建地区节点</p><blockquote><p>CREATE(n:Location{city:’Miami’,state:’FL’})</p><p>CREATE(n:Location{city:’SHANXI’,state:’MA’})</p><p>CREATE(n:Location{city:’SHANGHAI’,state:’ME’})</p></blockquote><p>节点类型为Location，属性包括city和state</p><p>5.创建关系</p><blockquote><p>MATCH   (a:Person {name:’Liz’}),</p><p>​                (b:Person {name:’Mike’})</p><p>MERGE   (a)-&gt;[:FRIENDS]-&gt;(b)</p></blockquote><p>方括号<code>[]</code>即为关系，<code>FRIENDS</code>为关系的类型。注意这里的箭头<code>--&gt;</code>是有方向的，表示是从a到b的关系。</p><p>6.关系也可以增加属性</p><blockquote><p>MATCH (a:Person {name:’Shawn’}),<br>      (b:Person {name:’Sally’})<br>MERGE (a)-[:FRIENDS {since:2001}]-&gt;(b)</p></blockquote><p>在关系中，同样的使用花括号{}来增加关系的属性，这里给FRIENDS关系增加了since属性，属性值为2001，表示他们建立朋友关系的时间。</p><p>7.增加更多的关系</p><blockquote><p>MATCH (a:Person {name:’Shawn’}), (b:Person {name:’John’}) MERGE (a)-[:FRIENDS {since:2012}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Person {name:’Shawn’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Sally’}), (b:Person {name:’Steve’}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b)<br>MATCH (a:Person {name:’Liz’}), (b:Person {name:’John’}) MERGE (a)-[:MARRIED {since:1998}]-&gt;(b)</p></blockquote><p>8.建立不同类型节点之间的关系-人物和地点的关系</p><blockquote><p>MATCH (a:Person {name:’John’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1978}]-&gt;(b)</p></blockquote><p>这里的关系是BORN_IN，表示出生地，同样有一个属性，表示出生年份。 </p><p>9.同样建立更多人的出生地</p><blockquote><p>MATCH (a:Person {name:’Liz’}), (b:Location {city:’Boston’}) MERGE (a)-[:BORN_IN {year:1981}]-&gt;(b)<br>MATCH (a:Person {name:’Mike’}), (b:Location {city:’San Francisco’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Shawn’}), (b:Location {city:’Miami’}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)<br>MATCH (a:Person {name:’Steve’}), (b:Location {city:’Lynn’}) MERGE (a)-[:BORN_IN {year:1970}]-&gt;(b)</p></blockquote><p>10.至此，知识图谱的数据已经插入完毕，可以开始做查询了。我们查询下所有在Boston出生的人物</p><blockquote><p>MATCH (a:Person)-[:BORN_IN]-&gt;(b:Location {city:’Boston’}) RETURN a,b</p></blockquote><p><img src="/medias/images/image-20200324211750318.png" alt="image-20200324211750318"></p><p>11.查询所有对外有关系的节点</p><blockquote><p>MATCH (a)–&gt;() RETURN a</p></blockquote><p><img src="/medias/images/image-20200324211806411.png" alt="image-20200324211806411"></p><p>12.查询所有有关系的节点</p><blockquote><p>MATCH (a)–() RETURN a</p></blockquote><p><img src="/medias/images/image-20200324211913095.png" alt="image-20200324211913095"></p><p>13.查询所有对外有关系的节点，以及关系类型</p><blockquote><p>MATCH (a)-[r]-&gt;() RETURN a.name, type(r)</p></blockquote><p>14.查询所有有结婚关系的节点</p><blockquote><p>MATCH (n)-[:MARRIED]-() RETURN n</p></blockquote><p>15.创建节点的时候就建好关系</p><blockquote><p>CREATE (a:Person {name:’Todd’})-[r:FRIENDS]-&gt;(b:Person {name:’Carlos’})</p></blockquote><p>16.查找某人的朋友的朋友</p><blockquote><p>MATCH (a:Person {name:’Mike’})-[r1:FRIENDS]-()-[r2:FRIENDS]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName</p></blockquote><p>17.增加/修改节点的属性</p><blockquote><p>MATCH (a:Person {name:’Liz’}) SET a.age=34<br>MATCH (a:Person {name:’Shawn’}) SET a.age=32<br>MATCH (a:Person {name:’John’}) SET a.age=44<br>MATCH (a:Person {name:’Mike’}) SET a.age=25</p></blockquote><p>18.删除节点的属性</p><blockquote><p>MATCH (a:Person {name:’Mike’}) SET a.test=’test’<br>MATCH (a:Person {name:’Mike’}) REMOVE a.test</p></blockquote><p>19.删除节点</p><blockquote><p>MATCH (a:Location {city:’Portland’}) DELETE a</p></blockquote><p>20.删除有关系的节点</p><blockquote><p>MATCH (a:Person {name:’Todd’})-[rel]-(b:Person) DELETE a,b,rel</p></blockquote><h5 id="简单总结："><a href="#简单总结：" class="headerlink" title="简单总结："></a>简单总结：</h5><p>一开始学习图数据库不是很好理解，不像关系型数据库那样使用习惯了。图数据库是一个趋势，无论是在搜索还是在推荐系统中都被广泛使用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle工具</title>
      <link href="/2020/03/14/gradle-gong-ju-de-shi-yong/"/>
      <url>/2020/03/14/gradle-gong-ju-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>gradle是一个项目自动化构建开源工具，spring源码使用gradle构建的，因此进行学习一下</p><h3 id="Gradle工具的使用："><a href="#Gradle工具的使用：" class="headerlink" title="Gradle工具的使用："></a>Gradle工具的使用：</h3><h4 id="安装Gradle："><a href="#安装Gradle：" class="headerlink" title="安装Gradle："></a>安装Gradle：</h4><blockquote><p>gradle的下载地址：<br><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a><br>下载好之后进行解压，目录中最好别出现中文</p></blockquote><p>配置环境变量：<br>创建GRADLE_HOME：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753280471.png" alt="Alt text"><br>将gradle的Home路径引入：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753346944.png" alt="Alt text"><br>测试环境变量是否生效：<br>使用命令gradle -v<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753396477.png" alt="Alt text"></p><h4 id="gradle集成到idea中"><a href="#gradle集成到idea中" class="headerlink" title="gradle集成到idea中"></a>gradle集成到idea中</h4><p>idea的setting中有Gradle，但是并不用改<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753744975.png" alt="Alt text"><br>创建gradle工程，选择合适的模块：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753481408.png" alt="Alt text"><br>与maven类似填写坐标：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753518776.png" alt="Alt text"><br>创建工程时，选择自动导入，使用自己本地的gradle工具以及自己本地的jdk插件：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584753619640.png" alt="Alt text"></p><p>gradle安装与配置的问题：<br>gradle与idea进行配置时遇到的错误：</p><blockquote><p>org.jetbrains.plugins.gradle.tooling.util.ModuleComponentIdentifierIm的问题解决<br>或者有错误发现目录结构与正确的不一致<br>说明当前的idea版本与gradle版本不像匹配<br>idea2018不能和gradle5.0以及以上的版本匹配</p></blockquote><p>正确的配置项目的目录如下：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584761077716.png" alt="Alt text"><br>目录结构：</p><blockquote><p>src/main/java放置正式代码的目录<br>src/main/resource放置正式配置文件目录<br>src/test/java放置单元测试代码目录<br>src/test/resource放置测试配置文件目录<br>src/main/webapp放置页面元素或静态资源</p></blockquote><h4 id="grovy编程语言"><a href="#grovy编程语言" class="headerlink" title="grovy编程语言"></a>grovy编程语言</h4><p>使用gradle编辑器：<br><img src="https://gitee.com/fengyanxing/myImage/raw/master/img/1584761353437.png" alt="Alt text"></p><h5 id="grovy编程语言学习"><a href="#grovy编程语言学习" class="headerlink" title="grovy编程语言学习"></a>grovy编程语言学习</h5><pre class=" language-grovy"><code class="language-grovy">//grovy编程println("Hello Grovy");//省略；号println("Hello Grovy no ;")//省略括号println "Hello Grovy"//定义变量//def i = 18;//print i//def str = "星星";//println str//定义集合def list = ['a','b']//添加元素//list << 'c'//获取元素//println list.get(2)//定义一个map//def map = ['key1':'xing','key2':'feng']//添加键值对//map.put("key3","value")//println map.get("key3")//闭包，闭包是一段代码块，在gradle中，闭包当做参数进行使用//定义闭包def b1 = {    println "nihao"}//定义方法def method1(Closure clouser){    clouser()}//调用方法method1(b1)//定义餐宿的闭包def b2={    v->        println "hello ${v}"}def method2(Closure clouser){    clouser("xingxing")}method2 (b2)</code></pre>]]></content>
      
      
      <categories>
          
          <category> java工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlServer学习</title>
      <link href="/2020/03/10/sqlserver-shi-yong-de-jian-dan-ji-lu/"/>
      <url>/2020/03/10/sqlserver-shi-yong-de-jian-dan-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="记录项目中的业务处理-环境：sqlserver2012、vs2017"><a href="#记录项目中的业务处理-环境：sqlserver2012、vs2017" class="headerlink" title="记录项目中的业务处理(环境：sqlserver2012、vs2017)"></a>记录项目中的业务处理(环境：sqlserver2012、vs2017)</h3><h3 id="使用sql语句将数据转换成相应的格式"><a href="#使用sql语句将数据转换成相应的格式" class="headerlink" title="使用sql语句将数据转换成相应的格式"></a>使用sql语句将数据转换成相应的格式</h3><blockquote><p>1.使用cast函数,不能转换日期类型</p><p> cast(表达式 as 数据类型)</p></blockquote><pre class=" language-mssql"><code class="language-mssql">> select CAST(PLAN_LENGTH AS FLOAT) '长度' from [dbo].[CTS_PROJECTPLAN_DETAIL]</code></pre><blockquote><p>2.使用Convert函数通用</p><p>Convert(数据类型，表达式)</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">FLOAT</span> <span class="token punctuation">,</span>PLAN_LENGTH<span class="token punctuation">)</span> <span class="token string">'长度'</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>CTS_PROJECTPLAN_DETAIL<span class="token punctuation">]</span></code></pre></blockquote><h4 id="除法时遇到分母为0时的处理"><a href="#除法时遇到分母为0时的处理" class="headerlink" title="除法时遇到分母为0时的处理"></a>除法时遇到分母为0时的处理</h4><p>简单的示范：</p><pre class=" language-declaremssql"><code class="language-declaremssql">--定义变量并且设置分母为0，这样一定会出现错误declare @a int;declare @b int;set @a = 10;set @b = 0;select @a/@b--1.可以使用case语句进行判断操作,当分母为0时将其转换成1select case @b when 0 then 1 else @a/@b --2.使用函数nullif，该函数--nullif(express1,express2),如果express1==express2时，直接为null，将表达式2设置为0，遇到0时直接为nulldeclare @a int;declare @b int;set @a=10set @b=5select @a/nullif(@b,0)--当然最后的需要并不会是null值，可以使用isnull函数进行控制--isnull(express1,express2),如果e1为null时，返回e2declare @a int;declare @b int;set @a=10set @b=5select isnull(@a/nullif(@b,0),1)</code></pre><h4 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h4><blockquote><p>将两列数据位varchar类型的数据进行类型转换并进行除法运算</p><p>自己编写的语句是：</p><p>select</p><p>isnull(Convert(float,ziduan1)/nullif(Convert(float,字段2),0),1 ) ‘新列名’</p><p>from 表名</p><p>–简单的解释就是，两列char类型的数据进行float转换后进行除法，进行除数为0判断</p></blockquote><h4 id="查询数据库中的数据进行数据监视"><a href="#查询数据库中的数据进行数据监视" class="headerlink" title="查询数据库中的数据进行数据监视"></a>查询数据库中的数据进行数据监视</h4><p>要求：能够查出每周、每月、每年的工作量</p><blockquote><p>每日统计:<br>select 日期时间=convert(char(10), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(10), 日期时间, 120)</p><p>每周统计:<br>select 日期时间=datepart(week, 日期时间), 数量=sum(数量)<br>from T<br>where year(日期时间)=year(getdate())<br>group by datepart(week, 日期时间)</p><p>每月统计:<br>select 日期时间=convert(char(7), 日期时间, 120), 数量=sum(数量)<br>from T<br>group by convert(char(7), 日期时间, 120) </p></blockquote><p>直接进行更改，查询项目工作量的表中的workload列数据，按照周、月、日进行分组统计</p><pre class=" language-mssql"><code class="language-mssql">select 周计划=datepart(week,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where year([YEARMONTH])=year(getdate())group by datepart(week, [YEARMONTH])select 月计划=datepart(MONTH,[YEARMONTH] ),每周计划量=sum([WORKLOAD])from [dbo].[CTS_PROJECTPLAN_WORKLOAD] where month([YEARMONTH])=month(getdate())group by datepart(MONTH, [YEARMONTH])select 日期时间=convert(varchar(20), [YEARMONTH], 120), 数量=sum([WORKLOAD])from [CTS_PROJECTPLAN_WORKLOAD]group by convert(varchar(20), [YEARMONTH], 120) </code></pre><h4 id="存储过程-基于sqlserver2012进行记录"><a href="#存储过程-基于sqlserver2012进行记录" class="headerlink" title="存储过程(基于sqlserver2012进行记录)"></a>存储过程(基于sqlserver2012进行记录)</h4><p>项目中要求的数据进行拼接过于多，因此使用存储过程，自己也对存储过程进行简单的学习。</p><blockquote><p>存储过程的概念：</p><p>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。在数据量特别庞大的情况下利用存储过程能达到倍速的效率提升。</p></blockquote><pre class=" language-mssql"><code class="language-mssql">--情况1不带参数的存储过程create proc sp_nameasbegin    print 'helloworld'end--执行语句exec sp_name--删除当前的存储过程drop proc sp_name--2.带参数的存储过程create proc sp_name    @name nvarchar(50),    @author nvarchar(50)as begin    select * from Books where title = @name and Author = @authorend--执行带有参数的存储过程exec sp_name 'C# Primer 习题解答（第5版）','蒋爱军，李师贤，梅晓勇  著'exec sp_name @name = 'C# Primer 习题解答（第5版）' , @author = '蒋爱军，李师贤，梅晓勇  著'--3.带有默认值的存储过程create proc sp_name    @patt nvarchar(50) = '1046002111',    @repla nvarchar(50)as begin    select * from Articel_Words where [WordPattern] = @patt and [ReplaceWord] = @replaend--对参数进行更改exec sp_name @patt = 'newvalue'--4.带有输出参数的存储过程create proc usp_output@bookname nvarchar(50),@recordCount int output --关键字代表输出参数asbegin    select * from hero where bookname=@bookname    --把查询的记录条数赋值给变量@recordCount    set @recordCount = (select count(*) from hero where bookname=@bookname)end --调用带有参数的存储过程，需要定义变量，并把变量传递declare @num intexec usp_output @bookname='书剑恩仇录',@recordCount=@num outputselect @num as 记录条数--5.存储过程实现分页create proc usp_fenye@pagesize int=3, --每页记录的条数@index int=1,    --当前查看第几页的内容@recordcount int output, --总的条数@pagecount int output --总的页数asbegin    --分页    select        t.id,        t.bookname,        t.hero    from (select *,rn=row_number() over(order by id asc) from hero) as t    where t.rn between (@index-1) * @pagesize + 1 and @pagesize * @index    --计算总的条数    set @recordcount =( select count(*) from hero)    --计算总的页数    set @pagecount=ceiling(@recordcount * 1.0 / @pagesize)  --ceiling向上取整end--执行存储过程declare @tiaoshu intdeclare @yeshu intexec usp_fenye @pagesize=5,@index =3,@recordcount=@tiaoshu output,@pagecount=@yeshu outputselect @tiaoshu as 总的条数select @yeshu as 总的页数</code></pre><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><blockquote><p>drop produre sp_name</p><p>注意的是，存储过程中不能够删除另一个存储过程，只能够调用另一存储过程</p><p>每个不同的数据库具体实现不同</p><p>sqlserver使用：drop proc 存储过程名</p></blockquote><h4 id="其余的命令"><a href="#其余的命令" class="headerlink" title="其余的命令"></a>其余的命令</h4><blockquote><ol><li>show procedure status</li></ol><p>显示数据库中所有存储的存储过程基本信息</p><ol start="2"><li>show create procedure  sp_name </li><li>exec sp_name </li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题党--it星</title>
      <link href="/2020/01/14/gan-xie-xiang-yu/"/>
      <url>/2020/01/14/gan-xie-xiang-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎进入it星的博客"><a href="#欢迎进入it星的博客" class="headerlink" title="欢迎进入it星的博客"></a>欢迎进入it星的博客</h1><p>@(测试工具)[版权声明|不许抄袭]<br><strong>标题一：新建博客</strong><br>_ <strong>小标题</strong> ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>致看官的一封信：</strong></p><p>​    首先感谢您的浏览，本人的阶段性的学习记录都在该博客上公布，如果有与您方向一致的地方，还请您做出相应的批评与建议，本人的邮箱是<a href="mailto:itxingzai@163.com">itxingzai@163.com</a>,可以随时进行交流。</p><p>   本人从2018年九月开始学习计算机编程，由于个人原因好贪玩，导致学业并不是也别突出，因此准备将自己的技术栈进行填充，深入学习一些计算机的相关知识，随后将自己的学习记录放在本博客中，由于大部分的笔记是需要进行更新与重新设计，因此提交的时间不确定。</p><p>   希望看我博客的人越来越好看，感谢相遇，感谢网络。</p><p>​              此致</p><p>​       敬礼</p><p>​                       博客作者：it星</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人操作记录#文章分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试我的博客#文章标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
